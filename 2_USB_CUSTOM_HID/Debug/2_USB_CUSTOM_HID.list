
2_USB_CUSTOM_HID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f40  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080060d8  080060d8  000160d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006148  08006148  000201b8  2**0
                  CONTENTS
  4 .ARM          00000008  08006148  08006148  00016148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006150  08006150  000201b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006150  08006150  00016150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006154  08006154  00016154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001b8  20000000  08006158  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000998  200001b8  08006310  000201b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b50  08006310  00020b50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011ffa  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c84  00000000  00000000  000321e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae0  00000000  00000000  00034e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009a8  00000000  00000000  00035948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000180f4  00000000  00000000  000362f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e613  00000000  00000000  0004e3e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000869b6  00000000  00000000  0005c9f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e33ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ad0  00000000  00000000  000e3400  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200001b8 	.word	0x200001b8
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080060c0 	.word	0x080060c0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200001bc 	.word	0x200001bc
 80001d4:	080060c0 	.word	0x080060c0

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <USB_RX_Interrupt>:
uint8_t usb_rx_buffer[64];
uint8_t send_data = 32, i;

extern USBD_HandleTypeDef hUsbDeviceFS;
void USB_RX_Interrupt(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
	USBD_CUSTOM_HID_HandleTypeDef *myusb=(USBD_CUSTOM_HID_HandleTypeDef *)hUsbDeviceFS.pClassData;
 80004d6:	4b1c      	ldr	r3, [pc, #112]	; (8000548 <USB_RX_Interrupt+0x78>)
 80004d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80004dc:	607b      	str	r3, [r7, #4]

	//Clear arr
	for(i=0;i<64;i++)
 80004de:	4b1b      	ldr	r3, [pc, #108]	; (800054c <USB_RX_Interrupt+0x7c>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	701a      	strb	r2, [r3, #0]
 80004e4:	e00b      	b.n	80004fe <USB_RX_Interrupt+0x2e>
	{
		usb_rx_buffer[i]=0;
 80004e6:	4b19      	ldr	r3, [pc, #100]	; (800054c <USB_RX_Interrupt+0x7c>)
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	461a      	mov	r2, r3
 80004ec:	4b18      	ldr	r3, [pc, #96]	; (8000550 <USB_RX_Interrupt+0x80>)
 80004ee:	2100      	movs	r1, #0
 80004f0:	5499      	strb	r1, [r3, r2]
	for(i=0;i<64;i++)
 80004f2:	4b16      	ldr	r3, [pc, #88]	; (800054c <USB_RX_Interrupt+0x7c>)
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	3301      	adds	r3, #1
 80004f8:	b2da      	uxtb	r2, r3
 80004fa:	4b14      	ldr	r3, [pc, #80]	; (800054c <USB_RX_Interrupt+0x7c>)
 80004fc:	701a      	strb	r2, [r3, #0]
 80004fe:	4b13      	ldr	r3, [pc, #76]	; (800054c <USB_RX_Interrupt+0x7c>)
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	2b3f      	cmp	r3, #63	; 0x3f
 8000504:	d9ef      	bls.n	80004e6 <USB_RX_Interrupt+0x16>
	}

	//myusb->Report_buf[0]= numbers of byte data
	for(i=0;i<myusb->Report_buf[0];i++)
 8000506:	4b11      	ldr	r3, [pc, #68]	; (800054c <USB_RX_Interrupt+0x7c>)
 8000508:	2200      	movs	r2, #0
 800050a:	701a      	strb	r2, [r3, #0]
 800050c:	e00f      	b.n	800052e <USB_RX_Interrupt+0x5e>
	{
		usb_rx_buffer[i]=myusb->Report_buf[i+1];
 800050e:	4b0f      	ldr	r3, [pc, #60]	; (800054c <USB_RX_Interrupt+0x7c>)
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	3301      	adds	r3, #1
 8000514:	4a0d      	ldr	r2, [pc, #52]	; (800054c <USB_RX_Interrupt+0x7c>)
 8000516:	7812      	ldrb	r2, [r2, #0]
 8000518:	4611      	mov	r1, r2
 800051a:	687a      	ldr	r2, [r7, #4]
 800051c:	5cd2      	ldrb	r2, [r2, r3]
 800051e:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <USB_RX_Interrupt+0x80>)
 8000520:	545a      	strb	r2, [r3, r1]
	for(i=0;i<myusb->Report_buf[0];i++)
 8000522:	4b0a      	ldr	r3, [pc, #40]	; (800054c <USB_RX_Interrupt+0x7c>)
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	3301      	adds	r3, #1
 8000528:	b2da      	uxtb	r2, r3
 800052a:	4b08      	ldr	r3, [pc, #32]	; (800054c <USB_RX_Interrupt+0x7c>)
 800052c:	701a      	strb	r2, [r3, #0]
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	781a      	ldrb	r2, [r3, #0]
 8000532:	4b06      	ldr	r3, [pc, #24]	; (800054c <USB_RX_Interrupt+0x7c>)
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	429a      	cmp	r2, r3
 8000538:	d8e9      	bhi.n	800050e <USB_RX_Interrupt+0x3e>
	}
}
 800053a:	bf00      	nop
 800053c:	bf00      	nop
 800053e:	370c      	adds	r7, #12
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr
 8000548:	20000278 	.word	0x20000278
 800054c:	20000270 	.word	0x20000270
 8000550:	20000230 	.word	0x20000230

08000554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000558:	f000 f950 	bl	80007fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055c:	f000 f820 	bl	80005a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000560:	f000 f886 	bl	8000670 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000564:	f005 f928 	bl	80057b8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, &send_data, 1);
 8000568:	2201      	movs	r2, #1
 800056a:	490b      	ldr	r1, [pc, #44]	; (8000598 <main+0x44>)
 800056c:	480b      	ldr	r0, [pc, #44]	; (800059c <main+0x48>)
 800056e:	f003 fedf 	bl	8004330 <USBD_CUSTOM_HID_SendReport>
		HAL_Delay(2000);
 8000572:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000576:	f000 f9b3 	bl	80008e0 <HAL_Delay>
		if (++send_data == 128) {
 800057a:	4b07      	ldr	r3, [pc, #28]	; (8000598 <main+0x44>)
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	3301      	adds	r3, #1
 8000580:	b2da      	uxtb	r2, r3
 8000582:	4b05      	ldr	r3, [pc, #20]	; (8000598 <main+0x44>)
 8000584:	701a      	strb	r2, [r3, #0]
 8000586:	4b04      	ldr	r3, [pc, #16]	; (8000598 <main+0x44>)
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	2b80      	cmp	r3, #128	; 0x80
 800058c:	d1ec      	bne.n	8000568 <main+0x14>
			send_data = 32;
 800058e:	4b02      	ldr	r3, [pc, #8]	; (8000598 <main+0x44>)
 8000590:	2220      	movs	r2, #32
 8000592:	701a      	strb	r2, [r3, #0]
		USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, &send_data, 1);
 8000594:	e7e8      	b.n	8000568 <main+0x14>
 8000596:	bf00      	nop
 8000598:	20000000 	.word	0x20000000
 800059c:	20000278 	.word	0x20000278

080005a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b094      	sub	sp, #80	; 0x50
 80005a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a6:	f107 0320 	add.w	r3, r7, #32
 80005aa:	2230      	movs	r2, #48	; 0x30
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f005 fd7e 	bl	80060b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b4:	f107 030c 	add.w	r3, r7, #12
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]
 80005c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c4:	2300      	movs	r3, #0
 80005c6:	60bb      	str	r3, [r7, #8]
 80005c8:	4b27      	ldr	r3, [pc, #156]	; (8000668 <SystemClock_Config+0xc8>)
 80005ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005cc:	4a26      	ldr	r2, [pc, #152]	; (8000668 <SystemClock_Config+0xc8>)
 80005ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d2:	6413      	str	r3, [r2, #64]	; 0x40
 80005d4:	4b24      	ldr	r3, [pc, #144]	; (8000668 <SystemClock_Config+0xc8>)
 80005d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005dc:	60bb      	str	r3, [r7, #8]
 80005de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e0:	2300      	movs	r3, #0
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	4b21      	ldr	r3, [pc, #132]	; (800066c <SystemClock_Config+0xcc>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a20      	ldr	r2, [pc, #128]	; (800066c <SystemClock_Config+0xcc>)
 80005ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005ee:	6013      	str	r3, [r2, #0]
 80005f0:	4b1e      	ldr	r3, [pc, #120]	; (800066c <SystemClock_Config+0xcc>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005f8:	607b      	str	r3, [r7, #4]
 80005fa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005fc:	2301      	movs	r3, #1
 80005fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000600:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000604:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000606:	2302      	movs	r3, #2
 8000608:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800060a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800060e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000610:	2304      	movs	r3, #4
 8000612:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000614:	2348      	movs	r3, #72	; 0x48
 8000616:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000618:	2302      	movs	r3, #2
 800061a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800061c:	2303      	movs	r3, #3
 800061e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000620:	f107 0320 	add.w	r3, r7, #32
 8000624:	4618      	mov	r0, r3
 8000626:	f001 fd81 	bl	800212c <HAL_RCC_OscConfig>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000630:	f000 f846 	bl	80006c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000634:	230f      	movs	r3, #15
 8000636:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000638:	2302      	movs	r3, #2
 800063a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063c:	2300      	movs	r3, #0
 800063e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000640:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000644:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000646:	2300      	movs	r3, #0
 8000648:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800064a:	f107 030c 	add.w	r3, r7, #12
 800064e:	2102      	movs	r1, #2
 8000650:	4618      	mov	r0, r3
 8000652:	f001 ffe3 	bl	800261c <HAL_RCC_ClockConfig>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800065c:	f000 f830 	bl	80006c0 <Error_Handler>
  }
}
 8000660:	bf00      	nop
 8000662:	3750      	adds	r7, #80	; 0x50
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	40023800 	.word	0x40023800
 800066c:	40007000 	.word	0x40007000

08000670 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	4b10      	ldr	r3, [pc, #64]	; (80006bc <MX_GPIO_Init+0x4c>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	4a0f      	ldr	r2, [pc, #60]	; (80006bc <MX_GPIO_Init+0x4c>)
 8000680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000684:	6313      	str	r3, [r2, #48]	; 0x30
 8000686:	4b0d      	ldr	r3, [pc, #52]	; (80006bc <MX_GPIO_Init+0x4c>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	603b      	str	r3, [r7, #0]
 8000696:	4b09      	ldr	r3, [pc, #36]	; (80006bc <MX_GPIO_Init+0x4c>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	4a08      	ldr	r2, [pc, #32]	; (80006bc <MX_GPIO_Init+0x4c>)
 800069c:	f043 0301 	orr.w	r3, r3, #1
 80006a0:	6313      	str	r3, [r2, #48]	; 0x30
 80006a2:	4b06      	ldr	r3, [pc, #24]	; (80006bc <MX_GPIO_Init+0x4c>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	f003 0301 	and.w	r3, r3, #1
 80006aa:	603b      	str	r3, [r7, #0]
 80006ac:	683b      	ldr	r3, [r7, #0]

}
 80006ae:	bf00      	nop
 80006b0:	370c      	adds	r7, #12
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	40023800 	.word	0x40023800

080006c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c4:	b672      	cpsid	i
}
 80006c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80006c8:	e7fe      	b.n	80006c8 <Error_Handler+0x8>
	...

080006cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	4b10      	ldr	r3, [pc, #64]	; (8000718 <HAL_MspInit+0x4c>)
 80006d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006da:	4a0f      	ldr	r2, [pc, #60]	; (8000718 <HAL_MspInit+0x4c>)
 80006dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006e0:	6453      	str	r3, [r2, #68]	; 0x44
 80006e2:	4b0d      	ldr	r3, [pc, #52]	; (8000718 <HAL_MspInit+0x4c>)
 80006e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	603b      	str	r3, [r7, #0]
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <HAL_MspInit+0x4c>)
 80006f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f6:	4a08      	ldr	r2, [pc, #32]	; (8000718 <HAL_MspInit+0x4c>)
 80006f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006fc:	6413      	str	r3, [r2, #64]	; 0x40
 80006fe:	4b06      	ldr	r3, [pc, #24]	; (8000718 <HAL_MspInit+0x4c>)
 8000700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000706:	603b      	str	r3, [r7, #0]
 8000708:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800070a:	bf00      	nop
 800070c:	370c      	adds	r7, #12
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	40023800 	.word	0x40023800

0800071c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000720:	e7fe      	b.n	8000720 <NMI_Handler+0x4>

08000722 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000722:	b480      	push	{r7}
 8000724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000726:	e7fe      	b.n	8000726 <HardFault_Handler+0x4>

08000728 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800072c:	e7fe      	b.n	800072c <MemManage_Handler+0x4>

0800072e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800072e:	b480      	push	{r7}
 8000730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000732:	e7fe      	b.n	8000732 <BusFault_Handler+0x4>

08000734 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000738:	e7fe      	b.n	8000738 <UsageFault_Handler+0x4>

0800073a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800073a:	b480      	push	{r7}
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800073e:	bf00      	nop
 8000740:	46bd      	mov	sp, r7
 8000742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000746:	4770      	bx	lr

08000748 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800074c:	bf00      	nop
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr

08000756 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000756:	b480      	push	{r7}
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800075a:	bf00      	nop
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr

08000764 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000768:	f000 f89a 	bl	80008a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}

08000770 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000774:	4802      	ldr	r0, [pc, #8]	; (8000780 <OTG_FS_IRQHandler+0x10>)
 8000776:	f000 fcbd 	bl	80010f4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000748 	.word	0x20000748

08000784 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000788:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <SystemInit+0x20>)
 800078a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800078e:	4a05      	ldr	r2, [pc, #20]	; (80007a4 <SystemInit+0x20>)
 8000790:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000794:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000798:	bf00      	nop
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	e000ed00 	.word	0xe000ed00

080007a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80007a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80007ac:	480d      	ldr	r0, [pc, #52]	; (80007e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80007ae:	490e      	ldr	r1, [pc, #56]	; (80007e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80007b0:	4a0e      	ldr	r2, [pc, #56]	; (80007ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007b4:	e002      	b.n	80007bc <LoopCopyDataInit>

080007b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ba:	3304      	adds	r3, #4

080007bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007c0:	d3f9      	bcc.n	80007b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007c2:	4a0b      	ldr	r2, [pc, #44]	; (80007f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80007c4:	4c0b      	ldr	r4, [pc, #44]	; (80007f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80007c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007c8:	e001      	b.n	80007ce <LoopFillZerobss>

080007ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007cc:	3204      	adds	r2, #4

080007ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007d0:	d3fb      	bcc.n	80007ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80007d2:	f7ff ffd7 	bl	8000784 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007d6:	f005 fc47 	bl	8006068 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007da:	f7ff febb 	bl	8000554 <main>
  bx  lr    
 80007de:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80007e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007e8:	200001b8 	.word	0x200001b8
  ldr r2, =_sidata
 80007ec:	08006158 	.word	0x08006158
  ldr r2, =_sbss
 80007f0:	200001b8 	.word	0x200001b8
  ldr r4, =_ebss
 80007f4:	20000b50 	.word	0x20000b50

080007f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007f8:	e7fe      	b.n	80007f8 <ADC_IRQHandler>
	...

080007fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000800:	4b0e      	ldr	r3, [pc, #56]	; (800083c <HAL_Init+0x40>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a0d      	ldr	r2, [pc, #52]	; (800083c <HAL_Init+0x40>)
 8000806:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800080a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800080c:	4b0b      	ldr	r3, [pc, #44]	; (800083c <HAL_Init+0x40>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a0a      	ldr	r2, [pc, #40]	; (800083c <HAL_Init+0x40>)
 8000812:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000816:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000818:	4b08      	ldr	r3, [pc, #32]	; (800083c <HAL_Init+0x40>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a07      	ldr	r2, [pc, #28]	; (800083c <HAL_Init+0x40>)
 800081e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000822:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000824:	2003      	movs	r0, #3
 8000826:	f000 f94f 	bl	8000ac8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800082a:	2000      	movs	r0, #0
 800082c:	f000 f808 	bl	8000840 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000830:	f7ff ff4c 	bl	80006cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000834:	2300      	movs	r3, #0
}
 8000836:	4618      	mov	r0, r3
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40023c00 	.word	0x40023c00

08000840 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000848:	4b12      	ldr	r3, [pc, #72]	; (8000894 <HAL_InitTick+0x54>)
 800084a:	681a      	ldr	r2, [r3, #0]
 800084c:	4b12      	ldr	r3, [pc, #72]	; (8000898 <HAL_InitTick+0x58>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	4619      	mov	r1, r3
 8000852:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000856:	fbb3 f3f1 	udiv	r3, r3, r1
 800085a:	fbb2 f3f3 	udiv	r3, r2, r3
 800085e:	4618      	mov	r0, r3
 8000860:	f000 f967 	bl	8000b32 <HAL_SYSTICK_Config>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800086a:	2301      	movs	r3, #1
 800086c:	e00e      	b.n	800088c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	2b0f      	cmp	r3, #15
 8000872:	d80a      	bhi.n	800088a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000874:	2200      	movs	r2, #0
 8000876:	6879      	ldr	r1, [r7, #4]
 8000878:	f04f 30ff 	mov.w	r0, #4294967295
 800087c:	f000 f92f 	bl	8000ade <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000880:	4a06      	ldr	r2, [pc, #24]	; (800089c <HAL_InitTick+0x5c>)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000886:	2300      	movs	r3, #0
 8000888:	e000      	b.n	800088c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800088a:	2301      	movs	r3, #1
}
 800088c:	4618      	mov	r0, r3
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	20000004 	.word	0x20000004
 8000898:	2000000c 	.word	0x2000000c
 800089c:	20000008 	.word	0x20000008

080008a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008a4:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <HAL_IncTick+0x20>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	461a      	mov	r2, r3
 80008aa:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <HAL_IncTick+0x24>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4413      	add	r3, r2
 80008b0:	4a04      	ldr	r2, [pc, #16]	; (80008c4 <HAL_IncTick+0x24>)
 80008b2:	6013      	str	r3, [r2, #0]
}
 80008b4:	bf00      	nop
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	2000000c 	.word	0x2000000c
 80008c4:	20000274 	.word	0x20000274

080008c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  return uwTick;
 80008cc:	4b03      	ldr	r3, [pc, #12]	; (80008dc <HAL_GetTick+0x14>)
 80008ce:	681b      	ldr	r3, [r3, #0]
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	20000274 	.word	0x20000274

080008e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008e8:	f7ff ffee 	bl	80008c8 <HAL_GetTick>
 80008ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008f8:	d005      	beq.n	8000906 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008fa:	4b0a      	ldr	r3, [pc, #40]	; (8000924 <HAL_Delay+0x44>)
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	461a      	mov	r2, r3
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	4413      	add	r3, r2
 8000904:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000906:	bf00      	nop
 8000908:	f7ff ffde 	bl	80008c8 <HAL_GetTick>
 800090c:	4602      	mov	r2, r0
 800090e:	68bb      	ldr	r3, [r7, #8]
 8000910:	1ad3      	subs	r3, r2, r3
 8000912:	68fa      	ldr	r2, [r7, #12]
 8000914:	429a      	cmp	r2, r3
 8000916:	d8f7      	bhi.n	8000908 <HAL_Delay+0x28>
  {
  }
}
 8000918:	bf00      	nop
 800091a:	bf00      	nop
 800091c:	3710      	adds	r7, #16
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	2000000c 	.word	0x2000000c

08000928 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000928:	b480      	push	{r7}
 800092a:	b085      	sub	sp, #20
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	f003 0307 	and.w	r3, r3, #7
 8000936:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000938:	4b0c      	ldr	r3, [pc, #48]	; (800096c <__NVIC_SetPriorityGrouping+0x44>)
 800093a:	68db      	ldr	r3, [r3, #12]
 800093c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800093e:	68ba      	ldr	r2, [r7, #8]
 8000940:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000944:	4013      	ands	r3, r2
 8000946:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000950:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000954:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000958:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800095a:	4a04      	ldr	r2, [pc, #16]	; (800096c <__NVIC_SetPriorityGrouping+0x44>)
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	60d3      	str	r3, [r2, #12]
}
 8000960:	bf00      	nop
 8000962:	3714      	adds	r7, #20
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr
 800096c:	e000ed00 	.word	0xe000ed00

08000970 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000974:	4b04      	ldr	r3, [pc, #16]	; (8000988 <__NVIC_GetPriorityGrouping+0x18>)
 8000976:	68db      	ldr	r3, [r3, #12]
 8000978:	0a1b      	lsrs	r3, r3, #8
 800097a:	f003 0307 	and.w	r3, r3, #7
}
 800097e:	4618      	mov	r0, r3
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr
 8000988:	e000ed00 	.word	0xe000ed00

0800098c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800099a:	2b00      	cmp	r3, #0
 800099c:	db0b      	blt.n	80009b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800099e:	79fb      	ldrb	r3, [r7, #7]
 80009a0:	f003 021f 	and.w	r2, r3, #31
 80009a4:	4907      	ldr	r1, [pc, #28]	; (80009c4 <__NVIC_EnableIRQ+0x38>)
 80009a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009aa:	095b      	lsrs	r3, r3, #5
 80009ac:	2001      	movs	r0, #1
 80009ae:	fa00 f202 	lsl.w	r2, r0, r2
 80009b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009b6:	bf00      	nop
 80009b8:	370c      	adds	r7, #12
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	e000e100 	.word	0xe000e100

080009c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	6039      	str	r1, [r7, #0]
 80009d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	db0a      	blt.n	80009f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	b2da      	uxtb	r2, r3
 80009e0:	490c      	ldr	r1, [pc, #48]	; (8000a14 <__NVIC_SetPriority+0x4c>)
 80009e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e6:	0112      	lsls	r2, r2, #4
 80009e8:	b2d2      	uxtb	r2, r2
 80009ea:	440b      	add	r3, r1
 80009ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009f0:	e00a      	b.n	8000a08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	b2da      	uxtb	r2, r3
 80009f6:	4908      	ldr	r1, [pc, #32]	; (8000a18 <__NVIC_SetPriority+0x50>)
 80009f8:	79fb      	ldrb	r3, [r7, #7]
 80009fa:	f003 030f 	and.w	r3, r3, #15
 80009fe:	3b04      	subs	r3, #4
 8000a00:	0112      	lsls	r2, r2, #4
 8000a02:	b2d2      	uxtb	r2, r2
 8000a04:	440b      	add	r3, r1
 8000a06:	761a      	strb	r2, [r3, #24]
}
 8000a08:	bf00      	nop
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr
 8000a14:	e000e100 	.word	0xe000e100
 8000a18:	e000ed00 	.word	0xe000ed00

08000a1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b089      	sub	sp, #36	; 0x24
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	60f8      	str	r0, [r7, #12]
 8000a24:	60b9      	str	r1, [r7, #8]
 8000a26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	f003 0307 	and.w	r3, r3, #7
 8000a2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a30:	69fb      	ldr	r3, [r7, #28]
 8000a32:	f1c3 0307 	rsb	r3, r3, #7
 8000a36:	2b04      	cmp	r3, #4
 8000a38:	bf28      	it	cs
 8000a3a:	2304      	movcs	r3, #4
 8000a3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a3e:	69fb      	ldr	r3, [r7, #28]
 8000a40:	3304      	adds	r3, #4
 8000a42:	2b06      	cmp	r3, #6
 8000a44:	d902      	bls.n	8000a4c <NVIC_EncodePriority+0x30>
 8000a46:	69fb      	ldr	r3, [r7, #28]
 8000a48:	3b03      	subs	r3, #3
 8000a4a:	e000      	b.n	8000a4e <NVIC_EncodePriority+0x32>
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a50:	f04f 32ff 	mov.w	r2, #4294967295
 8000a54:	69bb      	ldr	r3, [r7, #24]
 8000a56:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5a:	43da      	mvns	r2, r3
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	401a      	ands	r2, r3
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a64:	f04f 31ff 	mov.w	r1, #4294967295
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a6e:	43d9      	mvns	r1, r3
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a74:	4313      	orrs	r3, r2
         );
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3724      	adds	r7, #36	; 0x24
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
	...

08000a84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	3b01      	subs	r3, #1
 8000a90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a94:	d301      	bcc.n	8000a9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a96:	2301      	movs	r3, #1
 8000a98:	e00f      	b.n	8000aba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a9a:	4a0a      	ldr	r2, [pc, #40]	; (8000ac4 <SysTick_Config+0x40>)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	3b01      	subs	r3, #1
 8000aa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aa2:	210f      	movs	r1, #15
 8000aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa8:	f7ff ff8e 	bl	80009c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000aac:	4b05      	ldr	r3, [pc, #20]	; (8000ac4 <SysTick_Config+0x40>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ab2:	4b04      	ldr	r3, [pc, #16]	; (8000ac4 <SysTick_Config+0x40>)
 8000ab4:	2207      	movs	r2, #7
 8000ab6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ab8:	2300      	movs	r3, #0
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	e000e010 	.word	0xe000e010

08000ac8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f7ff ff29 	bl	8000928 <__NVIC_SetPriorityGrouping>
}
 8000ad6:	bf00      	nop
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}

08000ade <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b086      	sub	sp, #24
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	60b9      	str	r1, [r7, #8]
 8000ae8:	607a      	str	r2, [r7, #4]
 8000aea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000aec:	2300      	movs	r3, #0
 8000aee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000af0:	f7ff ff3e 	bl	8000970 <__NVIC_GetPriorityGrouping>
 8000af4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000af6:	687a      	ldr	r2, [r7, #4]
 8000af8:	68b9      	ldr	r1, [r7, #8]
 8000afa:	6978      	ldr	r0, [r7, #20]
 8000afc:	f7ff ff8e 	bl	8000a1c <NVIC_EncodePriority>
 8000b00:	4602      	mov	r2, r0
 8000b02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b06:	4611      	mov	r1, r2
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff ff5d 	bl	80009c8 <__NVIC_SetPriority>
}
 8000b0e:	bf00      	nop
 8000b10:	3718      	adds	r7, #24
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b16:	b580      	push	{r7, lr}
 8000b18:	b082      	sub	sp, #8
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff ff31 	bl	800098c <__NVIC_EnableIRQ>
}
 8000b2a:	bf00      	nop
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b32:	b580      	push	{r7, lr}
 8000b34:	b082      	sub	sp, #8
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b3a:	6878      	ldr	r0, [r7, #4]
 8000b3c:	f7ff ffa2 	bl	8000a84 <SysTick_Config>
 8000b40:	4603      	mov	r3, r0
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
	...

08000b4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b089      	sub	sp, #36	; 0x24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b56:	2300      	movs	r3, #0
 8000b58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b62:	2300      	movs	r3, #0
 8000b64:	61fb      	str	r3, [r7, #28]
 8000b66:	e159      	b.n	8000e1c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b68:	2201      	movs	r2, #1
 8000b6a:	69fb      	ldr	r3, [r7, #28]
 8000b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	697a      	ldr	r2, [r7, #20]
 8000b78:	4013      	ands	r3, r2
 8000b7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b7c:	693a      	ldr	r2, [r7, #16]
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	f040 8148 	bne.w	8000e16 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	f003 0303 	and.w	r3, r3, #3
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d005      	beq.n	8000b9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b9a:	2b02      	cmp	r3, #2
 8000b9c:	d130      	bne.n	8000c00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	689b      	ldr	r3, [r3, #8]
 8000ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ba4:	69fb      	ldr	r3, [r7, #28]
 8000ba6:	005b      	lsls	r3, r3, #1
 8000ba8:	2203      	movs	r2, #3
 8000baa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bae:	43db      	mvns	r3, r3
 8000bb0:	69ba      	ldr	r2, [r7, #24]
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	68da      	ldr	r2, [r3, #12]
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	005b      	lsls	r3, r3, #1
 8000bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc2:	69ba      	ldr	r2, [r7, #24]
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	69ba      	ldr	r2, [r7, #24]
 8000bcc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bdc:	43db      	mvns	r3, r3
 8000bde:	69ba      	ldr	r2, [r7, #24]
 8000be0:	4013      	ands	r3, r2
 8000be2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	091b      	lsrs	r3, r3, #4
 8000bea:	f003 0201 	and.w	r2, r3, #1
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf4:	69ba      	ldr	r2, [r7, #24]
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	69ba      	ldr	r2, [r7, #24]
 8000bfe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	f003 0303 	and.w	r3, r3, #3
 8000c08:	2b03      	cmp	r3, #3
 8000c0a:	d017      	beq.n	8000c3c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	2203      	movs	r2, #3
 8000c18:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1c:	43db      	mvns	r3, r3
 8000c1e:	69ba      	ldr	r2, [r7, #24]
 8000c20:	4013      	ands	r3, r2
 8000c22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	689a      	ldr	r2, [r3, #8]
 8000c28:	69fb      	ldr	r3, [r7, #28]
 8000c2a:	005b      	lsls	r3, r3, #1
 8000c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c30:	69ba      	ldr	r2, [r7, #24]
 8000c32:	4313      	orrs	r3, r2
 8000c34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	69ba      	ldr	r2, [r7, #24]
 8000c3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	f003 0303 	and.w	r3, r3, #3
 8000c44:	2b02      	cmp	r3, #2
 8000c46:	d123      	bne.n	8000c90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c48:	69fb      	ldr	r3, [r7, #28]
 8000c4a:	08da      	lsrs	r2, r3, #3
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	3208      	adds	r2, #8
 8000c50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	f003 0307 	and.w	r3, r3, #7
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	220f      	movs	r2, #15
 8000c60:	fa02 f303 	lsl.w	r3, r2, r3
 8000c64:	43db      	mvns	r3, r3
 8000c66:	69ba      	ldr	r2, [r7, #24]
 8000c68:	4013      	ands	r3, r2
 8000c6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	691a      	ldr	r2, [r3, #16]
 8000c70:	69fb      	ldr	r3, [r7, #28]
 8000c72:	f003 0307 	and.w	r3, r3, #7
 8000c76:	009b      	lsls	r3, r3, #2
 8000c78:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7c:	69ba      	ldr	r2, [r7, #24]
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	08da      	lsrs	r2, r3, #3
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	3208      	adds	r2, #8
 8000c8a:	69b9      	ldr	r1, [r7, #24]
 8000c8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	005b      	lsls	r3, r3, #1
 8000c9a:	2203      	movs	r2, #3
 8000c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca0:	43db      	mvns	r3, r3
 8000ca2:	69ba      	ldr	r2, [r7, #24]
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	f003 0203 	and.w	r2, r3, #3
 8000cb0:	69fb      	ldr	r3, [r7, #28]
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb8:	69ba      	ldr	r2, [r7, #24]
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	69ba      	ldr	r2, [r7, #24]
 8000cc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	f000 80a2 	beq.w	8000e16 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	4b57      	ldr	r3, [pc, #348]	; (8000e34 <HAL_GPIO_Init+0x2e8>)
 8000cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cda:	4a56      	ldr	r2, [pc, #344]	; (8000e34 <HAL_GPIO_Init+0x2e8>)
 8000cdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ce0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ce2:	4b54      	ldr	r3, [pc, #336]	; (8000e34 <HAL_GPIO_Init+0x2e8>)
 8000ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000cee:	4a52      	ldr	r2, [pc, #328]	; (8000e38 <HAL_GPIO_Init+0x2ec>)
 8000cf0:	69fb      	ldr	r3, [r7, #28]
 8000cf2:	089b      	lsrs	r3, r3, #2
 8000cf4:	3302      	adds	r3, #2
 8000cf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000cfc:	69fb      	ldr	r3, [r7, #28]
 8000cfe:	f003 0303 	and.w	r3, r3, #3
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	220f      	movs	r2, #15
 8000d06:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0a:	43db      	mvns	r3, r3
 8000d0c:	69ba      	ldr	r2, [r7, #24]
 8000d0e:	4013      	ands	r3, r2
 8000d10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4a49      	ldr	r2, [pc, #292]	; (8000e3c <HAL_GPIO_Init+0x2f0>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d019      	beq.n	8000d4e <HAL_GPIO_Init+0x202>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4a48      	ldr	r2, [pc, #288]	; (8000e40 <HAL_GPIO_Init+0x2f4>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d013      	beq.n	8000d4a <HAL_GPIO_Init+0x1fe>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4a47      	ldr	r2, [pc, #284]	; (8000e44 <HAL_GPIO_Init+0x2f8>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d00d      	beq.n	8000d46 <HAL_GPIO_Init+0x1fa>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4a46      	ldr	r2, [pc, #280]	; (8000e48 <HAL_GPIO_Init+0x2fc>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d007      	beq.n	8000d42 <HAL_GPIO_Init+0x1f6>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4a45      	ldr	r2, [pc, #276]	; (8000e4c <HAL_GPIO_Init+0x300>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d101      	bne.n	8000d3e <HAL_GPIO_Init+0x1f2>
 8000d3a:	2304      	movs	r3, #4
 8000d3c:	e008      	b.n	8000d50 <HAL_GPIO_Init+0x204>
 8000d3e:	2307      	movs	r3, #7
 8000d40:	e006      	b.n	8000d50 <HAL_GPIO_Init+0x204>
 8000d42:	2303      	movs	r3, #3
 8000d44:	e004      	b.n	8000d50 <HAL_GPIO_Init+0x204>
 8000d46:	2302      	movs	r3, #2
 8000d48:	e002      	b.n	8000d50 <HAL_GPIO_Init+0x204>
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e000      	b.n	8000d50 <HAL_GPIO_Init+0x204>
 8000d4e:	2300      	movs	r3, #0
 8000d50:	69fa      	ldr	r2, [r7, #28]
 8000d52:	f002 0203 	and.w	r2, r2, #3
 8000d56:	0092      	lsls	r2, r2, #2
 8000d58:	4093      	lsls	r3, r2
 8000d5a:	69ba      	ldr	r2, [r7, #24]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d60:	4935      	ldr	r1, [pc, #212]	; (8000e38 <HAL_GPIO_Init+0x2ec>)
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	089b      	lsrs	r3, r3, #2
 8000d66:	3302      	adds	r3, #2
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d6e:	4b38      	ldr	r3, [pc, #224]	; (8000e50 <HAL_GPIO_Init+0x304>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d74:	693b      	ldr	r3, [r7, #16]
 8000d76:	43db      	mvns	r3, r3
 8000d78:	69ba      	ldr	r2, [r7, #24]
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d003      	beq.n	8000d92 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000d8a:	69ba      	ldr	r2, [r7, #24]
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000d92:	4a2f      	ldr	r2, [pc, #188]	; (8000e50 <HAL_GPIO_Init+0x304>)
 8000d94:	69bb      	ldr	r3, [r7, #24]
 8000d96:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000d98:	4b2d      	ldr	r3, [pc, #180]	; (8000e50 <HAL_GPIO_Init+0x304>)
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	43db      	mvns	r3, r3
 8000da2:	69ba      	ldr	r2, [r7, #24]
 8000da4:	4013      	ands	r3, r2
 8000da6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d003      	beq.n	8000dbc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000db4:	69ba      	ldr	r2, [r7, #24]
 8000db6:	693b      	ldr	r3, [r7, #16]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000dbc:	4a24      	ldr	r2, [pc, #144]	; (8000e50 <HAL_GPIO_Init+0x304>)
 8000dbe:	69bb      	ldr	r3, [r7, #24]
 8000dc0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dc2:	4b23      	ldr	r3, [pc, #140]	; (8000e50 <HAL_GPIO_Init+0x304>)
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	43db      	mvns	r3, r3
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d003      	beq.n	8000de6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000dde:	69ba      	ldr	r2, [r7, #24]
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000de6:	4a1a      	ldr	r2, [pc, #104]	; (8000e50 <HAL_GPIO_Init+0x304>)
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000dec:	4b18      	ldr	r3, [pc, #96]	; (8000e50 <HAL_GPIO_Init+0x304>)
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	43db      	mvns	r3, r3
 8000df6:	69ba      	ldr	r2, [r7, #24]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d003      	beq.n	8000e10 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	693b      	ldr	r3, [r7, #16]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e10:	4a0f      	ldr	r2, [pc, #60]	; (8000e50 <HAL_GPIO_Init+0x304>)
 8000e12:	69bb      	ldr	r3, [r7, #24]
 8000e14:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	61fb      	str	r3, [r7, #28]
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	2b0f      	cmp	r3, #15
 8000e20:	f67f aea2 	bls.w	8000b68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e24:	bf00      	nop
 8000e26:	bf00      	nop
 8000e28:	3724      	adds	r7, #36	; 0x24
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	40023800 	.word	0x40023800
 8000e38:	40013800 	.word	0x40013800
 8000e3c:	40020000 	.word	0x40020000
 8000e40:	40020400 	.word	0x40020400
 8000e44:	40020800 	.word	0x40020800
 8000e48:	40020c00 	.word	0x40020c00
 8000e4c:	40021000 	.word	0x40021000
 8000e50:	40013c00 	.word	0x40013c00

08000e54 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000e54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e56:	b08f      	sub	sp, #60	; 0x3c
 8000e58:	af0a      	add	r7, sp, #40	; 0x28
 8000e5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d101      	bne.n	8000e66 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	e10f      	b.n	8001086 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d106      	bne.n	8000e86 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000e80:	6878      	ldr	r0, [r7, #4]
 8000e82:	f004 fdf9 	bl	8005a78 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2203      	movs	r2, #3
 8000e8a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d102      	bne.n	8000ea0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f001 fea2 	bl	8002bee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	603b      	str	r3, [r7, #0]
 8000eb0:	687e      	ldr	r6, [r7, #4]
 8000eb2:	466d      	mov	r5, sp
 8000eb4:	f106 0410 	add.w	r4, r6, #16
 8000eb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000eba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ebc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ebe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ec0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000ec4:	e885 0003 	stmia.w	r5, {r0, r1}
 8000ec8:	1d33      	adds	r3, r6, #4
 8000eca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ecc:	6838      	ldr	r0, [r7, #0]
 8000ece:	f001 fd79 	bl	80029c4 <USB_CoreInit>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d005      	beq.n	8000ee4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2202      	movs	r2, #2
 8000edc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	e0d0      	b.n	8001086 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2100      	movs	r1, #0
 8000eea:	4618      	mov	r0, r3
 8000eec:	f001 fe90 	bl	8002c10 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	73fb      	strb	r3, [r7, #15]
 8000ef4:	e04a      	b.n	8000f8c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000ef6:	7bfa      	ldrb	r2, [r7, #15]
 8000ef8:	6879      	ldr	r1, [r7, #4]
 8000efa:	4613      	mov	r3, r2
 8000efc:	00db      	lsls	r3, r3, #3
 8000efe:	1a9b      	subs	r3, r3, r2
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	440b      	add	r3, r1
 8000f04:	333d      	adds	r3, #61	; 0x3d
 8000f06:	2201      	movs	r2, #1
 8000f08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000f0a:	7bfa      	ldrb	r2, [r7, #15]
 8000f0c:	6879      	ldr	r1, [r7, #4]
 8000f0e:	4613      	mov	r3, r2
 8000f10:	00db      	lsls	r3, r3, #3
 8000f12:	1a9b      	subs	r3, r3, r2
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	440b      	add	r3, r1
 8000f18:	333c      	adds	r3, #60	; 0x3c
 8000f1a:	7bfa      	ldrb	r2, [r7, #15]
 8000f1c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000f1e:	7bfa      	ldrb	r2, [r7, #15]
 8000f20:	7bfb      	ldrb	r3, [r7, #15]
 8000f22:	b298      	uxth	r0, r3
 8000f24:	6879      	ldr	r1, [r7, #4]
 8000f26:	4613      	mov	r3, r2
 8000f28:	00db      	lsls	r3, r3, #3
 8000f2a:	1a9b      	subs	r3, r3, r2
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	440b      	add	r3, r1
 8000f30:	3342      	adds	r3, #66	; 0x42
 8000f32:	4602      	mov	r2, r0
 8000f34:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000f36:	7bfa      	ldrb	r2, [r7, #15]
 8000f38:	6879      	ldr	r1, [r7, #4]
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	00db      	lsls	r3, r3, #3
 8000f3e:	1a9b      	subs	r3, r3, r2
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	440b      	add	r3, r1
 8000f44:	333f      	adds	r3, #63	; 0x3f
 8000f46:	2200      	movs	r2, #0
 8000f48:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000f4a:	7bfa      	ldrb	r2, [r7, #15]
 8000f4c:	6879      	ldr	r1, [r7, #4]
 8000f4e:	4613      	mov	r3, r2
 8000f50:	00db      	lsls	r3, r3, #3
 8000f52:	1a9b      	subs	r3, r3, r2
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	440b      	add	r3, r1
 8000f58:	3344      	adds	r3, #68	; 0x44
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000f5e:	7bfa      	ldrb	r2, [r7, #15]
 8000f60:	6879      	ldr	r1, [r7, #4]
 8000f62:	4613      	mov	r3, r2
 8000f64:	00db      	lsls	r3, r3, #3
 8000f66:	1a9b      	subs	r3, r3, r2
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	440b      	add	r3, r1
 8000f6c:	3348      	adds	r3, #72	; 0x48
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000f72:	7bfa      	ldrb	r2, [r7, #15]
 8000f74:	6879      	ldr	r1, [r7, #4]
 8000f76:	4613      	mov	r3, r2
 8000f78:	00db      	lsls	r3, r3, #3
 8000f7a:	1a9b      	subs	r3, r3, r2
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	440b      	add	r3, r1
 8000f80:	3350      	adds	r3, #80	; 0x50
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f86:	7bfb      	ldrb	r3, [r7, #15]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	73fb      	strb	r3, [r7, #15]
 8000f8c:	7bfa      	ldrb	r2, [r7, #15]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	429a      	cmp	r2, r3
 8000f94:	d3af      	bcc.n	8000ef6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f96:	2300      	movs	r3, #0
 8000f98:	73fb      	strb	r3, [r7, #15]
 8000f9a:	e044      	b.n	8001026 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000f9c:	7bfa      	ldrb	r2, [r7, #15]
 8000f9e:	6879      	ldr	r1, [r7, #4]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	00db      	lsls	r3, r3, #3
 8000fa4:	1a9b      	subs	r3, r3, r2
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	440b      	add	r3, r1
 8000faa:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8000fae:	2200      	movs	r2, #0
 8000fb0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000fb2:	7bfa      	ldrb	r2, [r7, #15]
 8000fb4:	6879      	ldr	r1, [r7, #4]
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	00db      	lsls	r3, r3, #3
 8000fba:	1a9b      	subs	r3, r3, r2
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	440b      	add	r3, r1
 8000fc0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8000fc4:	7bfa      	ldrb	r2, [r7, #15]
 8000fc6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000fc8:	7bfa      	ldrb	r2, [r7, #15]
 8000fca:	6879      	ldr	r1, [r7, #4]
 8000fcc:	4613      	mov	r3, r2
 8000fce:	00db      	lsls	r3, r3, #3
 8000fd0:	1a9b      	subs	r3, r3, r2
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	440b      	add	r3, r1
 8000fd6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8000fda:	2200      	movs	r2, #0
 8000fdc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000fde:	7bfa      	ldrb	r2, [r7, #15]
 8000fe0:	6879      	ldr	r1, [r7, #4]
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	00db      	lsls	r3, r3, #3
 8000fe6:	1a9b      	subs	r3, r3, r2
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	440b      	add	r3, r1
 8000fec:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000ff4:	7bfa      	ldrb	r2, [r7, #15]
 8000ff6:	6879      	ldr	r1, [r7, #4]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	00db      	lsls	r3, r3, #3
 8000ffc:	1a9b      	subs	r3, r3, r2
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	440b      	add	r3, r1
 8001002:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800100a:	7bfa      	ldrb	r2, [r7, #15]
 800100c:	6879      	ldr	r1, [r7, #4]
 800100e:	4613      	mov	r3, r2
 8001010:	00db      	lsls	r3, r3, #3
 8001012:	1a9b      	subs	r3, r3, r2
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	440b      	add	r3, r1
 8001018:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001020:	7bfb      	ldrb	r3, [r7, #15]
 8001022:	3301      	adds	r3, #1
 8001024:	73fb      	strb	r3, [r7, #15]
 8001026:	7bfa      	ldrb	r2, [r7, #15]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	429a      	cmp	r2, r3
 800102e:	d3b5      	bcc.n	8000f9c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	603b      	str	r3, [r7, #0]
 8001036:	687e      	ldr	r6, [r7, #4]
 8001038:	466d      	mov	r5, sp
 800103a:	f106 0410 	add.w	r4, r6, #16
 800103e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001040:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001042:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001044:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001046:	e894 0003 	ldmia.w	r4, {r0, r1}
 800104a:	e885 0003 	stmia.w	r5, {r0, r1}
 800104e:	1d33      	adds	r3, r6, #4
 8001050:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001052:	6838      	ldr	r0, [r7, #0]
 8001054:	f001 fe06 	bl	8002c64 <USB_DevInit>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d005      	beq.n	800106a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2202      	movs	r2, #2
 8001062:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e00d      	b.n	8001086 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2200      	movs	r2, #0
 800106e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2201      	movs	r2, #1
 8001076:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4618      	mov	r0, r3
 8001080:	f002 fe4e 	bl	8003d20 <USB_DevDisconnect>

  return HAL_OK;
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3714      	adds	r7, #20
 800108a:	46bd      	mov	sp, r7
 800108c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800108e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b084      	sub	sp, #16
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d101      	bne.n	80010aa <HAL_PCD_Start+0x1c>
 80010a6:	2302      	movs	r3, #2
 80010a8:	e020      	b.n	80010ec <HAL_PCD_Start+0x5e>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2201      	movs	r2, #1
 80010ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d109      	bne.n	80010ce <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d005      	beq.n	80010ce <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010c6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4618      	mov	r0, r3
 80010d4:	f001 fd7a 	bl	8002bcc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4618      	mov	r0, r3
 80010de:	f002 fdfe 	bl	8003cde <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2200      	movs	r2, #0
 80010e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80010ea:	2300      	movs	r3, #0
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3710      	adds	r7, #16
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80010f4:	b590      	push	{r4, r7, lr}
 80010f6:	b08d      	sub	sp, #52	; 0x34
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001102:	6a3b      	ldr	r3, [r7, #32]
 8001104:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4618      	mov	r0, r3
 800110c:	f002 febc 	bl	8003e88 <USB_GetMode>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	f040 839d 	bne.w	8001852 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4618      	mov	r0, r3
 800111e:	f002 fe20 	bl	8003d62 <USB_ReadInterrupts>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	f000 8393 	beq.w	8001850 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4618      	mov	r0, r3
 8001130:	f002 fe17 	bl	8003d62 <USB_ReadInterrupts>
 8001134:	4603      	mov	r3, r0
 8001136:	f003 0302 	and.w	r3, r3, #2
 800113a:	2b02      	cmp	r3, #2
 800113c:	d107      	bne.n	800114e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	695a      	ldr	r2, [r3, #20]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f002 0202 	and.w	r2, r2, #2
 800114c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4618      	mov	r0, r3
 8001154:	f002 fe05 	bl	8003d62 <USB_ReadInterrupts>
 8001158:	4603      	mov	r3, r0
 800115a:	f003 0310 	and.w	r3, r3, #16
 800115e:	2b10      	cmp	r3, #16
 8001160:	d161      	bne.n	8001226 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	699a      	ldr	r2, [r3, #24]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f022 0210 	bic.w	r2, r2, #16
 8001170:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001172:	6a3b      	ldr	r3, [r7, #32]
 8001174:	6a1b      	ldr	r3, [r3, #32]
 8001176:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	f003 020f 	and.w	r2, r3, #15
 800117e:	4613      	mov	r3, r2
 8001180:	00db      	lsls	r3, r3, #3
 8001182:	1a9b      	subs	r3, r3, r2
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	4413      	add	r3, r2
 800118e:	3304      	adds	r3, #4
 8001190:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	0c5b      	lsrs	r3, r3, #17
 8001196:	f003 030f 	and.w	r3, r3, #15
 800119a:	2b02      	cmp	r3, #2
 800119c:	d124      	bne.n	80011e8 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80011a4:	4013      	ands	r3, r2
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d035      	beq.n	8001216 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	091b      	lsrs	r3, r3, #4
 80011b2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80011b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	461a      	mov	r2, r3
 80011bc:	6a38      	ldr	r0, [r7, #32]
 80011be:	f002 fc6b 	bl	8003a98 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	68da      	ldr	r2, [r3, #12]
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	091b      	lsrs	r3, r3, #4
 80011ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011ce:	441a      	add	r2, r3
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	699a      	ldr	r2, [r3, #24]
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	091b      	lsrs	r3, r3, #4
 80011dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011e0:	441a      	add	r2, r3
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	619a      	str	r2, [r3, #24]
 80011e6:	e016      	b.n	8001216 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	0c5b      	lsrs	r3, r3, #17
 80011ec:	f003 030f 	and.w	r3, r3, #15
 80011f0:	2b06      	cmp	r3, #6
 80011f2:	d110      	bne.n	8001216 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80011fa:	2208      	movs	r2, #8
 80011fc:	4619      	mov	r1, r3
 80011fe:	6a38      	ldr	r0, [r7, #32]
 8001200:	f002 fc4a 	bl	8003a98 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	699a      	ldr	r2, [r3, #24]
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	091b      	lsrs	r3, r3, #4
 800120c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001210:	441a      	add	r2, r3
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	699a      	ldr	r2, [r3, #24]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f042 0210 	orr.w	r2, r2, #16
 8001224:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4618      	mov	r0, r3
 800122c:	f002 fd99 	bl	8003d62 <USB_ReadInterrupts>
 8001230:	4603      	mov	r3, r0
 8001232:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001236:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800123a:	d16e      	bne.n	800131a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800123c:	2300      	movs	r3, #0
 800123e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4618      	mov	r0, r3
 8001246:	f002 fd9f 	bl	8003d88 <USB_ReadDevAllOutEpInterrupt>
 800124a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800124c:	e062      	b.n	8001314 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800124e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001250:	f003 0301 	and.w	r3, r3, #1
 8001254:	2b00      	cmp	r3, #0
 8001256:	d057      	beq.n	8001308 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800125e:	b2d2      	uxtb	r2, r2
 8001260:	4611      	mov	r1, r2
 8001262:	4618      	mov	r0, r3
 8001264:	f002 fdc4 	bl	8003df0 <USB_ReadDevOutEPInterrupt>
 8001268:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	f003 0301 	and.w	r3, r3, #1
 8001270:	2b00      	cmp	r3, #0
 8001272:	d00c      	beq.n	800128e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001276:	015a      	lsls	r2, r3, #5
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	4413      	add	r3, r2
 800127c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001280:	461a      	mov	r2, r3
 8001282:	2301      	movs	r3, #1
 8001284:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001286:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f000 fd99 	bl	8001dc0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	f003 0308 	and.w	r3, r3, #8
 8001294:	2b00      	cmp	r3, #0
 8001296:	d00c      	beq.n	80012b2 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129a:	015a      	lsls	r2, r3, #5
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	4413      	add	r3, r2
 80012a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012a4:	461a      	mov	r2, r3
 80012a6:	2308      	movs	r3, #8
 80012a8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80012aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f000 fe93 	bl	8001fd8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	f003 0310 	and.w	r3, r3, #16
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d008      	beq.n	80012ce <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80012bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012be:	015a      	lsls	r2, r3, #5
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	4413      	add	r3, r2
 80012c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012c8:	461a      	mov	r2, r3
 80012ca:	2310      	movs	r3, #16
 80012cc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	f003 0320 	and.w	r3, r3, #32
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d008      	beq.n	80012ea <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80012d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012da:	015a      	lsls	r2, r3, #5
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	4413      	add	r3, r2
 80012e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012e4:	461a      	mov	r2, r3
 80012e6:	2320      	movs	r3, #32
 80012e8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d009      	beq.n	8001308 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80012f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f6:	015a      	lsls	r2, r3, #5
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	4413      	add	r3, r2
 80012fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001300:	461a      	mov	r2, r3
 8001302:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001306:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130a:	3301      	adds	r3, #1
 800130c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800130e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001310:	085b      	lsrs	r3, r3, #1
 8001312:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001316:	2b00      	cmp	r3, #0
 8001318:	d199      	bne.n	800124e <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4618      	mov	r0, r3
 8001320:	f002 fd1f 	bl	8003d62 <USB_ReadInterrupts>
 8001324:	4603      	mov	r3, r0
 8001326:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800132a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800132e:	f040 80c0 	bne.w	80014b2 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4618      	mov	r0, r3
 8001338:	f002 fd40 	bl	8003dbc <USB_ReadDevAllInEpInterrupt>
 800133c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800133e:	2300      	movs	r3, #0
 8001340:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001342:	e0b2      	b.n	80014aa <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	2b00      	cmp	r3, #0
 800134c:	f000 80a7 	beq.w	800149e <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001356:	b2d2      	uxtb	r2, r2
 8001358:	4611      	mov	r1, r2
 800135a:	4618      	mov	r0, r3
 800135c:	f002 fd66 	bl	8003e2c <USB_ReadDevInEPInterrupt>
 8001360:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	f003 0301 	and.w	r3, r3, #1
 8001368:	2b00      	cmp	r3, #0
 800136a:	d057      	beq.n	800141c <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800136c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136e:	f003 030f 	and.w	r3, r3, #15
 8001372:	2201      	movs	r2, #1
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001380:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	43db      	mvns	r3, r3
 8001386:	69f9      	ldr	r1, [r7, #28]
 8001388:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800138c:	4013      	ands	r3, r2
 800138e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001392:	015a      	lsls	r2, r3, #5
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	4413      	add	r3, r2
 8001398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800139c:	461a      	mov	r2, r3
 800139e:	2301      	movs	r3, #1
 80013a0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	691b      	ldr	r3, [r3, #16]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d132      	bne.n	8001410 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80013aa:	6879      	ldr	r1, [r7, #4]
 80013ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013ae:	4613      	mov	r3, r2
 80013b0:	00db      	lsls	r3, r3, #3
 80013b2:	1a9b      	subs	r3, r3, r2
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	440b      	add	r3, r1
 80013b8:	3348      	adds	r3, #72	; 0x48
 80013ba:	6819      	ldr	r1, [r3, #0]
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013c0:	4613      	mov	r3, r2
 80013c2:	00db      	lsls	r3, r3, #3
 80013c4:	1a9b      	subs	r3, r3, r2
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	4403      	add	r3, r0
 80013ca:	3344      	adds	r3, #68	; 0x44
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4419      	add	r1, r3
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013d4:	4613      	mov	r3, r2
 80013d6:	00db      	lsls	r3, r3, #3
 80013d8:	1a9b      	subs	r3, r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	4403      	add	r3, r0
 80013de:	3348      	adds	r3, #72	; 0x48
 80013e0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80013e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d113      	bne.n	8001410 <HAL_PCD_IRQHandler+0x31c>
 80013e8:	6879      	ldr	r1, [r7, #4]
 80013ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013ec:	4613      	mov	r3, r2
 80013ee:	00db      	lsls	r3, r3, #3
 80013f0:	1a9b      	subs	r3, r3, r2
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	440b      	add	r3, r1
 80013f6:	3350      	adds	r3, #80	; 0x50
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d108      	bne.n	8001410 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6818      	ldr	r0, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001408:	461a      	mov	r2, r3
 800140a:	2101      	movs	r1, #1
 800140c:	f002 fd6e 	bl	8003eec <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001412:	b2db      	uxtb	r3, r3
 8001414:	4619      	mov	r1, r3
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f004 fbaf 	bl	8005b7a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	f003 0308 	and.w	r3, r3, #8
 8001422:	2b00      	cmp	r3, #0
 8001424:	d008      	beq.n	8001438 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001428:	015a      	lsls	r2, r3, #5
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	4413      	add	r3, r2
 800142e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001432:	461a      	mov	r2, r3
 8001434:	2308      	movs	r3, #8
 8001436:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	f003 0310 	and.w	r3, r3, #16
 800143e:	2b00      	cmp	r3, #0
 8001440:	d008      	beq.n	8001454 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001444:	015a      	lsls	r2, r3, #5
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	4413      	add	r3, r2
 800144a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800144e:	461a      	mov	r2, r3
 8001450:	2310      	movs	r3, #16
 8001452:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800145a:	2b00      	cmp	r3, #0
 800145c:	d008      	beq.n	8001470 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800145e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001460:	015a      	lsls	r2, r3, #5
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	4413      	add	r3, r2
 8001466:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800146a:	461a      	mov	r2, r3
 800146c:	2340      	movs	r3, #64	; 0x40
 800146e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	2b00      	cmp	r3, #0
 8001478:	d008      	beq.n	800148c <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800147a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147c:	015a      	lsls	r2, r3, #5
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	4413      	add	r3, r2
 8001482:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001486:	461a      	mov	r2, r3
 8001488:	2302      	movs	r3, #2
 800148a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001492:	2b00      	cmp	r3, #0
 8001494:	d003      	beq.n	800149e <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001496:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f000 fc03 	bl	8001ca4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800149e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a0:	3301      	adds	r3, #1
 80014a2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80014a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014a6:	085b      	lsrs	r3, r3, #1
 80014a8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80014aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	f47f af49 	bne.w	8001344 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f002 fc53 	bl	8003d62 <USB_ReadInterrupts>
 80014bc:	4603      	mov	r3, r0
 80014be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80014c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80014c6:	d122      	bne.n	800150e <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	69fa      	ldr	r2, [r7, #28]
 80014d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80014d6:	f023 0301 	bic.w	r3, r3, #1
 80014da:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d108      	bne.n	80014f8 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80014ee:	2100      	movs	r1, #0
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f000 fe0f 	bl	8002114 <HAL_PCDEx_LPM_Callback>
 80014f6:	e002      	b.n	80014fe <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f004 fbab 	bl	8005c54 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	695a      	ldr	r2, [r3, #20]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800150c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4618      	mov	r0, r3
 8001514:	f002 fc25 	bl	8003d62 <USB_ReadInterrupts>
 8001518:	4603      	mov	r3, r0
 800151a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800151e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001522:	d112      	bne.n	800154a <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	f003 0301 	and.w	r3, r3, #1
 8001530:	2b01      	cmp	r3, #1
 8001532:	d102      	bne.n	800153a <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f004 fb67 	bl	8005c08 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	695a      	ldr	r2, [r3, #20]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001548:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4618      	mov	r0, r3
 8001550:	f002 fc07 	bl	8003d62 <USB_ReadInterrupts>
 8001554:	4603      	mov	r3, r0
 8001556:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800155a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800155e:	f040 80c7 	bne.w	80016f0 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	69fa      	ldr	r2, [r7, #28]
 800156c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001570:	f023 0301 	bic.w	r3, r3, #1
 8001574:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2110      	movs	r1, #16
 800157c:	4618      	mov	r0, r3
 800157e:	f001 fcd5 	bl	8002f2c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001582:	2300      	movs	r3, #0
 8001584:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001586:	e056      	b.n	8001636 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800158a:	015a      	lsls	r2, r3, #5
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	4413      	add	r3, r2
 8001590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001594:	461a      	mov	r2, r3
 8001596:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800159a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800159c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800159e:	015a      	lsls	r2, r3, #5
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	4413      	add	r3, r2
 80015a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015ac:	0151      	lsls	r1, r2, #5
 80015ae:	69fa      	ldr	r2, [r7, #28]
 80015b0:	440a      	add	r2, r1
 80015b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80015b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80015ba:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80015bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015be:	015a      	lsls	r2, r3, #5
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	4413      	add	r3, r2
 80015c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015cc:	0151      	lsls	r1, r2, #5
 80015ce:	69fa      	ldr	r2, [r7, #28]
 80015d0:	440a      	add	r2, r1
 80015d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80015d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80015da:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80015dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015de:	015a      	lsls	r2, r3, #5
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	4413      	add	r3, r2
 80015e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015e8:	461a      	mov	r2, r3
 80015ea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80015ee:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80015f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015f2:	015a      	lsls	r2, r3, #5
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	4413      	add	r3, r2
 80015f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001600:	0151      	lsls	r1, r2, #5
 8001602:	69fa      	ldr	r2, [r7, #28]
 8001604:	440a      	add	r2, r1
 8001606:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800160a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800160e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001612:	015a      	lsls	r2, r3, #5
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	4413      	add	r3, r2
 8001618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001620:	0151      	lsls	r1, r2, #5
 8001622:	69fa      	ldr	r2, [r7, #28]
 8001624:	440a      	add	r2, r1
 8001626:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800162a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800162e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001632:	3301      	adds	r3, #1
 8001634:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800163c:	429a      	cmp	r2, r3
 800163e:	d3a3      	bcc.n	8001588 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001646:	69db      	ldr	r3, [r3, #28]
 8001648:	69fa      	ldr	r2, [r7, #28]
 800164a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800164e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001652:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001658:	2b00      	cmp	r3, #0
 800165a:	d016      	beq.n	800168a <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001662:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001666:	69fa      	ldr	r2, [r7, #28]
 8001668:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800166c:	f043 030b 	orr.w	r3, r3, #11
 8001670:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800167a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167c:	69fa      	ldr	r2, [r7, #28]
 800167e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001682:	f043 030b 	orr.w	r3, r3, #11
 8001686:	6453      	str	r3, [r2, #68]	; 0x44
 8001688:	e015      	b.n	80016b6 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001690:	695b      	ldr	r3, [r3, #20]
 8001692:	69fa      	ldr	r2, [r7, #28]
 8001694:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001698:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800169c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80016a0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016a8:	691b      	ldr	r3, [r3, #16]
 80016aa:	69fa      	ldr	r2, [r7, #28]
 80016ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016b0:	f043 030b 	orr.w	r3, r3, #11
 80016b4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	69fa      	ldr	r2, [r7, #28]
 80016c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016c4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80016c8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6818      	ldr	r0, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	691b      	ldr	r3, [r3, #16]
 80016d2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80016da:	461a      	mov	r2, r3
 80016dc:	f002 fc06 	bl	8003eec <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	695a      	ldr	r2, [r3, #20]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80016ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f002 fb34 	bl	8003d62 <USB_ReadInterrupts>
 80016fa:	4603      	mov	r3, r0
 80016fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001700:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001704:	d124      	bne.n	8001750 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4618      	mov	r0, r3
 800170c:	f002 fbca 	bl	8003ea4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4618      	mov	r0, r3
 8001716:	f001 fc6a 	bl	8002fee <USB_GetDevSpeed>
 800171a:	4603      	mov	r3, r0
 800171c:	461a      	mov	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681c      	ldr	r4, [r3, #0]
 8001726:	f001 f941 	bl	80029ac <HAL_RCC_GetHCLKFreq>
 800172a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001730:	b2db      	uxtb	r3, r3
 8001732:	461a      	mov	r2, r3
 8001734:	4620      	mov	r0, r4
 8001736:	f001 f9a7 	bl	8002a88 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f004 fa45 	bl	8005bca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	695a      	ldr	r2, [r3, #20]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800174e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4618      	mov	r0, r3
 8001756:	f002 fb04 	bl	8003d62 <USB_ReadInterrupts>
 800175a:	4603      	mov	r3, r0
 800175c:	f003 0308 	and.w	r3, r3, #8
 8001760:	2b08      	cmp	r3, #8
 8001762:	d10a      	bne.n	800177a <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f004 fa22 	bl	8005bae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	695a      	ldr	r2, [r3, #20]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f002 0208 	and.w	r2, r2, #8
 8001778:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4618      	mov	r0, r3
 8001780:	f002 faef 	bl	8003d62 <USB_ReadInterrupts>
 8001784:	4603      	mov	r3, r0
 8001786:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800178a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800178e:	d10f      	bne.n	80017b0 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001790:	2300      	movs	r3, #0
 8001792:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001796:	b2db      	uxtb	r3, r3
 8001798:	4619      	mov	r1, r3
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f004 fa7a 	bl	8005c94 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	695a      	ldr	r2, [r3, #20]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80017ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f002 fad4 	bl	8003d62 <USB_ReadInterrupts>
 80017ba:	4603      	mov	r3, r0
 80017bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80017c4:	d10f      	bne.n	80017e6 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80017c6:	2300      	movs	r3, #0
 80017c8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80017ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	4619      	mov	r1, r3
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f004 fa4d 	bl	8005c70 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	695a      	ldr	r2, [r3, #20]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80017e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f002 fab9 	bl	8003d62 <USB_ReadInterrupts>
 80017f0:	4603      	mov	r3, r0
 80017f2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80017f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017fa:	d10a      	bne.n	8001812 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f004 fa5b 	bl	8005cb8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	695a      	ldr	r2, [r3, #20]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001810:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4618      	mov	r0, r3
 8001818:	f002 faa3 	bl	8003d62 <USB_ReadInterrupts>
 800181c:	4603      	mov	r3, r0
 800181e:	f003 0304 	and.w	r3, r3, #4
 8001822:	2b04      	cmp	r3, #4
 8001824:	d115      	bne.n	8001852 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	f003 0304 	and.w	r3, r3, #4
 8001834:	2b00      	cmp	r3, #0
 8001836:	d002      	beq.n	800183e <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f004 fa4b 	bl	8005cd4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	6859      	ldr	r1, [r3, #4]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	430a      	orrs	r2, r1
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	e000      	b.n	8001852 <HAL_PCD_IRQHandler+0x75e>
      return;
 8001850:	bf00      	nop
    }
  }
}
 8001852:	3734      	adds	r7, #52	; 0x34
 8001854:	46bd      	mov	sp, r7
 8001856:	bd90      	pop	{r4, r7, pc}

08001858 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	460b      	mov	r3, r1
 8001862:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800186a:	2b01      	cmp	r3, #1
 800186c:	d101      	bne.n	8001872 <HAL_PCD_SetAddress+0x1a>
 800186e:	2302      	movs	r3, #2
 8001870:	e013      	b.n	800189a <HAL_PCD_SetAddress+0x42>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2201      	movs	r2, #1
 8001876:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	78fa      	ldrb	r2, [r7, #3]
 800187e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	78fa      	ldrb	r2, [r7, #3]
 8001888:	4611      	mov	r1, r2
 800188a:	4618      	mov	r0, r3
 800188c:	f002 fa01 	bl	8003c92 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2200      	movs	r2, #0
 8001894:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b084      	sub	sp, #16
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
 80018aa:	4608      	mov	r0, r1
 80018ac:	4611      	mov	r1, r2
 80018ae:	461a      	mov	r2, r3
 80018b0:	4603      	mov	r3, r0
 80018b2:	70fb      	strb	r3, [r7, #3]
 80018b4:	460b      	mov	r3, r1
 80018b6:	803b      	strh	r3, [r7, #0]
 80018b8:	4613      	mov	r3, r2
 80018ba:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80018bc:	2300      	movs	r3, #0
 80018be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80018c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	da0f      	bge.n	80018e8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018c8:	78fb      	ldrb	r3, [r7, #3]
 80018ca:	f003 020f 	and.w	r2, r3, #15
 80018ce:	4613      	mov	r3, r2
 80018d0:	00db      	lsls	r3, r3, #3
 80018d2:	1a9b      	subs	r3, r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	3338      	adds	r3, #56	; 0x38
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	4413      	add	r3, r2
 80018dc:	3304      	adds	r3, #4
 80018de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2201      	movs	r2, #1
 80018e4:	705a      	strb	r2, [r3, #1]
 80018e6:	e00f      	b.n	8001908 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018e8:	78fb      	ldrb	r3, [r7, #3]
 80018ea:	f003 020f 	and.w	r2, r3, #15
 80018ee:	4613      	mov	r3, r2
 80018f0:	00db      	lsls	r3, r3, #3
 80018f2:	1a9b      	subs	r3, r3, r2
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	4413      	add	r3, r2
 80018fe:	3304      	adds	r3, #4
 8001900:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	2200      	movs	r2, #0
 8001906:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001908:	78fb      	ldrb	r3, [r7, #3]
 800190a:	f003 030f 	and.w	r3, r3, #15
 800190e:	b2da      	uxtb	r2, r3
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001914:	883a      	ldrh	r2, [r7, #0]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	78ba      	ldrb	r2, [r7, #2]
 800191e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	785b      	ldrb	r3, [r3, #1]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d004      	beq.n	8001932 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	b29a      	uxth	r2, r3
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001932:	78bb      	ldrb	r3, [r7, #2]
 8001934:	2b02      	cmp	r3, #2
 8001936:	d102      	bne.n	800193e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2200      	movs	r2, #0
 800193c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001944:	2b01      	cmp	r3, #1
 8001946:	d101      	bne.n	800194c <HAL_PCD_EP_Open+0xaa>
 8001948:	2302      	movs	r3, #2
 800194a:	e00e      	b.n	800196a <HAL_PCD_EP_Open+0xc8>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2201      	movs	r2, #1
 8001950:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	68f9      	ldr	r1, [r7, #12]
 800195a:	4618      	mov	r0, r3
 800195c:	f001 fb6c 	bl	8003038 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2200      	movs	r2, #0
 8001964:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001968:	7afb      	ldrb	r3, [r7, #11]
}
 800196a:	4618      	mov	r0, r3
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b084      	sub	sp, #16
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
 800197a:	460b      	mov	r3, r1
 800197c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800197e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001982:	2b00      	cmp	r3, #0
 8001984:	da0f      	bge.n	80019a6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001986:	78fb      	ldrb	r3, [r7, #3]
 8001988:	f003 020f 	and.w	r2, r3, #15
 800198c:	4613      	mov	r3, r2
 800198e:	00db      	lsls	r3, r3, #3
 8001990:	1a9b      	subs	r3, r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	3338      	adds	r3, #56	; 0x38
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	4413      	add	r3, r2
 800199a:	3304      	adds	r3, #4
 800199c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2201      	movs	r2, #1
 80019a2:	705a      	strb	r2, [r3, #1]
 80019a4:	e00f      	b.n	80019c6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019a6:	78fb      	ldrb	r3, [r7, #3]
 80019a8:	f003 020f 	and.w	r2, r3, #15
 80019ac:	4613      	mov	r3, r2
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	1a9b      	subs	r3, r3, r2
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	4413      	add	r3, r2
 80019bc:	3304      	adds	r3, #4
 80019be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2200      	movs	r2, #0
 80019c4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80019c6:	78fb      	ldrb	r3, [r7, #3]
 80019c8:	f003 030f 	and.w	r3, r3, #15
 80019cc:	b2da      	uxtb	r2, r3
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d101      	bne.n	80019e0 <HAL_PCD_EP_Close+0x6e>
 80019dc:	2302      	movs	r3, #2
 80019de:	e00e      	b.n	80019fe <HAL_PCD_EP_Close+0x8c>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2201      	movs	r2, #1
 80019e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	68f9      	ldr	r1, [r7, #12]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f001 fbaa 	bl	8003148 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2200      	movs	r2, #0
 80019f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b086      	sub	sp, #24
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	60f8      	str	r0, [r7, #12]
 8001a0e:	607a      	str	r2, [r7, #4]
 8001a10:	603b      	str	r3, [r7, #0]
 8001a12:	460b      	mov	r3, r1
 8001a14:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a16:	7afb      	ldrb	r3, [r7, #11]
 8001a18:	f003 020f 	and.w	r2, r3, #15
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	00db      	lsls	r3, r3, #3
 8001a20:	1a9b      	subs	r3, r3, r2
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001a28:	68fa      	ldr	r2, [r7, #12]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	3304      	adds	r3, #4
 8001a2e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	683a      	ldr	r2, [r7, #0]
 8001a3a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	2200      	movs	r2, #0
 8001a46:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a48:	7afb      	ldrb	r3, [r7, #11]
 8001a4a:	f003 030f 	and.w	r3, r3, #15
 8001a4e:	b2da      	uxtb	r2, r3
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	691b      	ldr	r3, [r3, #16]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d102      	bne.n	8001a62 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a62:	7afb      	ldrb	r3, [r7, #11]
 8001a64:	f003 030f 	and.w	r3, r3, #15
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d109      	bne.n	8001a80 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	6818      	ldr	r0, [r3, #0]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	691b      	ldr	r3, [r3, #16]
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	461a      	mov	r2, r3
 8001a78:	6979      	ldr	r1, [r7, #20]
 8001a7a:	f001 fe85 	bl	8003788 <USB_EP0StartXfer>
 8001a7e:	e008      	b.n	8001a92 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	6818      	ldr	r0, [r3, #0]
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	691b      	ldr	r3, [r3, #16]
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	6979      	ldr	r1, [r7, #20]
 8001a8e:	f001 fc37 	bl	8003300 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001a92:	2300      	movs	r3, #0
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3718      	adds	r7, #24
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	607a      	str	r2, [r7, #4]
 8001aa6:	603b      	str	r3, [r7, #0]
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001aac:	7afb      	ldrb	r3, [r7, #11]
 8001aae:	f003 020f 	and.w	r2, r3, #15
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	00db      	lsls	r3, r3, #3
 8001ab6:	1a9b      	subs	r3, r3, r2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	3338      	adds	r3, #56	; 0x38
 8001abc:	68fa      	ldr	r2, [r7, #12]
 8001abe:	4413      	add	r3, r2
 8001ac0:	3304      	adds	r3, #4
 8001ac2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	683a      	ldr	r2, [r7, #0]
 8001ace:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	2201      	movs	r2, #1
 8001ada:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001adc:	7afb      	ldrb	r3, [r7, #11]
 8001ade:	f003 030f 	and.w	r3, r3, #15
 8001ae2:	b2da      	uxtb	r2, r3
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	691b      	ldr	r3, [r3, #16]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d102      	bne.n	8001af6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001af6:	7afb      	ldrb	r3, [r7, #11]
 8001af8:	f003 030f 	and.w	r3, r3, #15
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d109      	bne.n	8001b14 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	6818      	ldr	r0, [r3, #0]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	691b      	ldr	r3, [r3, #16]
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	6979      	ldr	r1, [r7, #20]
 8001b0e:	f001 fe3b 	bl	8003788 <USB_EP0StartXfer>
 8001b12:	e008      	b.n	8001b26 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	6818      	ldr	r0, [r3, #0]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	691b      	ldr	r3, [r3, #16]
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	461a      	mov	r2, r3
 8001b20:	6979      	ldr	r1, [r7, #20]
 8001b22:	f001 fbed 	bl	8003300 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001b26:	2300      	movs	r3, #0
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3718      	adds	r7, #24
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	460b      	mov	r3, r1
 8001b3a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001b3c:	78fb      	ldrb	r3, [r7, #3]
 8001b3e:	f003 020f 	and.w	r2, r3, #15
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d901      	bls.n	8001b4e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e050      	b.n	8001bf0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	da0f      	bge.n	8001b76 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b56:	78fb      	ldrb	r3, [r7, #3]
 8001b58:	f003 020f 	and.w	r2, r3, #15
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	00db      	lsls	r3, r3, #3
 8001b60:	1a9b      	subs	r3, r3, r2
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	3338      	adds	r3, #56	; 0x38
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	4413      	add	r3, r2
 8001b6a:	3304      	adds	r3, #4
 8001b6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2201      	movs	r2, #1
 8001b72:	705a      	strb	r2, [r3, #1]
 8001b74:	e00d      	b.n	8001b92 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001b76:	78fa      	ldrb	r2, [r7, #3]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	00db      	lsls	r3, r3, #3
 8001b7c:	1a9b      	subs	r3, r3, r2
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	4413      	add	r3, r2
 8001b88:	3304      	adds	r3, #4
 8001b8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2201      	movs	r2, #1
 8001b96:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b98:	78fb      	ldrb	r3, [r7, #3]
 8001b9a:	f003 030f 	and.w	r3, r3, #15
 8001b9e:	b2da      	uxtb	r2, r3
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d101      	bne.n	8001bb2 <HAL_PCD_EP_SetStall+0x82>
 8001bae:	2302      	movs	r3, #2
 8001bb0:	e01e      	b.n	8001bf0 <HAL_PCD_EP_SetStall+0xc0>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	68f9      	ldr	r1, [r7, #12]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f001 ff92 	bl	8003aea <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001bc6:	78fb      	ldrb	r3, [r7, #3]
 8001bc8:	f003 030f 	and.w	r3, r3, #15
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d10a      	bne.n	8001be6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6818      	ldr	r0, [r3, #0]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	691b      	ldr	r3, [r3, #16]
 8001bd8:	b2d9      	uxtb	r1, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001be0:	461a      	mov	r2, r3
 8001be2:	f002 f983 	bl	8003eec <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001bee:	2300      	movs	r3, #0
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3710      	adds	r7, #16
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	460b      	mov	r3, r1
 8001c02:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001c04:	78fb      	ldrb	r3, [r7, #3]
 8001c06:	f003 020f 	and.w	r2, r3, #15
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d901      	bls.n	8001c16 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e042      	b.n	8001c9c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	da0f      	bge.n	8001c3e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c1e:	78fb      	ldrb	r3, [r7, #3]
 8001c20:	f003 020f 	and.w	r2, r3, #15
 8001c24:	4613      	mov	r3, r2
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	1a9b      	subs	r3, r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	3338      	adds	r3, #56	; 0x38
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	4413      	add	r3, r2
 8001c32:	3304      	adds	r3, #4
 8001c34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	705a      	strb	r2, [r3, #1]
 8001c3c:	e00f      	b.n	8001c5e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c3e:	78fb      	ldrb	r3, [r7, #3]
 8001c40:	f003 020f 	and.w	r2, r3, #15
 8001c44:	4613      	mov	r3, r2
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	1a9b      	subs	r3, r3, r2
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	4413      	add	r3, r2
 8001c54:	3304      	adds	r3, #4
 8001c56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2200      	movs	r2, #0
 8001c62:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c64:	78fb      	ldrb	r3, [r7, #3]
 8001c66:	f003 030f 	and.w	r3, r3, #15
 8001c6a:	b2da      	uxtb	r2, r3
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d101      	bne.n	8001c7e <HAL_PCD_EP_ClrStall+0x86>
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	e00e      	b.n	8001c9c <HAL_PCD_EP_ClrStall+0xa4>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2201      	movs	r2, #1
 8001c82:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	68f9      	ldr	r1, [r7, #12]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f001 ff9a 	bl	8003bc6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001c9a:	2300      	movs	r3, #0
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3710      	adds	r7, #16
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b08a      	sub	sp, #40	; 0x28
 8001ca8:	af02      	add	r7, sp, #8
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	00db      	lsls	r3, r3, #3
 8001cbe:	1a9b      	subs	r3, r3, r2
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	3338      	adds	r3, #56	; 0x38
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	3304      	adds	r3, #4
 8001cca:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	699a      	ldr	r2, [r3, #24]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	695b      	ldr	r3, [r3, #20]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d901      	bls.n	8001cdc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e06c      	b.n	8001db6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	695a      	ldr	r2, [r3, #20]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	69fa      	ldr	r2, [r7, #28]
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d902      	bls.n	8001cf8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	3303      	adds	r3, #3
 8001cfc:	089b      	lsrs	r3, r3, #2
 8001cfe:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001d00:	e02b      	b.n	8001d5a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	695a      	ldr	r2, [r3, #20]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	699b      	ldr	r3, [r3, #24]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	69fa      	ldr	r2, [r7, #28]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d902      	bls.n	8001d1e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	3303      	adds	r3, #3
 8001d22:	089b      	lsrs	r3, r3, #2
 8001d24:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	68d9      	ldr	r1, [r3, #12]
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	b2da      	uxtb	r2, r3
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	9300      	str	r3, [sp, #0]
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	6978      	ldr	r0, [r7, #20]
 8001d3e:	f001 fe76 	bl	8003a2e <USB_WritePacket>

    ep->xfer_buff  += len;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	68da      	ldr	r2, [r3, #12]
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	441a      	add	r2, r3
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	699a      	ldr	r2, [r3, #24]
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	441a      	add	r2, r3
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	015a      	lsls	r2, r3, #5
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	4413      	add	r3, r2
 8001d62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d809      	bhi.n	8001d84 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	699a      	ldr	r2, [r3, #24]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d203      	bcs.n	8001d84 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	695b      	ldr	r3, [r3, #20]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d1be      	bne.n	8001d02 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	695a      	ldr	r2, [r3, #20]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d811      	bhi.n	8001db4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	f003 030f 	and.w	r3, r3, #15
 8001d96:	2201      	movs	r2, #1
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001da4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	43db      	mvns	r3, r3
 8001daa:	6939      	ldr	r1, [r7, #16]
 8001dac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001db0:	4013      	ands	r3, r2
 8001db2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3720      	adds	r7, #32
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
	...

08001dc0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	333c      	adds	r3, #60	; 0x3c
 8001dd8:	3304      	adds	r3, #4
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	015a      	lsls	r2, r3, #5
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	4413      	add	r3, r2
 8001de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	f040 80a0 	bne.w	8001f38 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	f003 0308 	and.w	r3, r3, #8
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d015      	beq.n	8001e2e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	4a72      	ldr	r2, [pc, #456]	; (8001fd0 <PCD_EP_OutXfrComplete_int+0x210>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	f240 80dd 	bls.w	8001fc6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f000 80d7 	beq.w	8001fc6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	015a      	lsls	r2, r3, #5
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	4413      	add	r3, r2
 8001e20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e24:	461a      	mov	r2, r3
 8001e26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e2a:	6093      	str	r3, [r2, #8]
 8001e2c:	e0cb      	b.n	8001fc6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	f003 0320 	and.w	r3, r3, #32
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d009      	beq.n	8001e4c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	015a      	lsls	r2, r3, #5
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	4413      	add	r3, r2
 8001e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e44:	461a      	mov	r2, r3
 8001e46:	2320      	movs	r3, #32
 8001e48:	6093      	str	r3, [r2, #8]
 8001e4a:	e0bc      	b.n	8001fc6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f040 80b7 	bne.w	8001fc6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	4a5d      	ldr	r2, [pc, #372]	; (8001fd0 <PCD_EP_OutXfrComplete_int+0x210>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d90f      	bls.n	8001e80 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d00a      	beq.n	8001e80 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	015a      	lsls	r2, r3, #5
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	4413      	add	r3, r2
 8001e72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e76:	461a      	mov	r2, r3
 8001e78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e7c:	6093      	str	r3, [r2, #8]
 8001e7e:	e0a2      	b.n	8001fc6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8001e80:	6879      	ldr	r1, [r7, #4]
 8001e82:	683a      	ldr	r2, [r7, #0]
 8001e84:	4613      	mov	r3, r2
 8001e86:	00db      	lsls	r3, r3, #3
 8001e88:	1a9b      	subs	r3, r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	440b      	add	r3, r1
 8001e8e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001e92:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	0159      	lsls	r1, r3, #5
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	440b      	add	r3, r1
 8001e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8001ea6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	683a      	ldr	r2, [r7, #0]
 8001eac:	4613      	mov	r3, r2
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	1a9b      	subs	r3, r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	4403      	add	r3, r0
 8001eb6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001eba:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8001ebc:	6879      	ldr	r1, [r7, #4]
 8001ebe:	683a      	ldr	r2, [r7, #0]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	1a9b      	subs	r3, r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	440b      	add	r3, r1
 8001eca:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001ece:	6819      	ldr	r1, [r3, #0]
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	683a      	ldr	r2, [r7, #0]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	1a9b      	subs	r3, r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	4403      	add	r3, r0
 8001ede:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4419      	add	r1, r3
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	4613      	mov	r3, r2
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	1a9b      	subs	r3, r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	4403      	add	r3, r0
 8001ef4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001ef8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d114      	bne.n	8001f2a <PCD_EP_OutXfrComplete_int+0x16a>
 8001f00:	6879      	ldr	r1, [r7, #4]
 8001f02:	683a      	ldr	r2, [r7, #0]
 8001f04:	4613      	mov	r3, r2
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	1a9b      	subs	r3, r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	440b      	add	r3, r1
 8001f0e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d108      	bne.n	8001f2a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6818      	ldr	r0, [r3, #0]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001f22:	461a      	mov	r2, r3
 8001f24:	2101      	movs	r1, #1
 8001f26:	f001 ffe1 	bl	8003eec <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	4619      	mov	r1, r3
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f003 fe07 	bl	8005b44 <HAL_PCD_DataOutStageCallback>
 8001f36:	e046      	b.n	8001fc6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	4a26      	ldr	r2, [pc, #152]	; (8001fd4 <PCD_EP_OutXfrComplete_int+0x214>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d124      	bne.n	8001f8a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d00a      	beq.n	8001f60 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	015a      	lsls	r2, r3, #5
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	4413      	add	r3, r2
 8001f52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f56:	461a      	mov	r2, r3
 8001f58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f5c:	6093      	str	r3, [r2, #8]
 8001f5e:	e032      	b.n	8001fc6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	f003 0320 	and.w	r3, r3, #32
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d008      	beq.n	8001f7c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	015a      	lsls	r2, r3, #5
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	4413      	add	r3, r2
 8001f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f76:	461a      	mov	r2, r3
 8001f78:	2320      	movs	r3, #32
 8001f7a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	4619      	mov	r1, r3
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f003 fdde 	bl	8005b44 <HAL_PCD_DataOutStageCallback>
 8001f88:	e01d      	b.n	8001fc6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d114      	bne.n	8001fba <PCD_EP_OutXfrComplete_int+0x1fa>
 8001f90:	6879      	ldr	r1, [r7, #4]
 8001f92:	683a      	ldr	r2, [r7, #0]
 8001f94:	4613      	mov	r3, r2
 8001f96:	00db      	lsls	r3, r3, #3
 8001f98:	1a9b      	subs	r3, r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	440b      	add	r3, r1
 8001f9e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d108      	bne.n	8001fba <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6818      	ldr	r0, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	f001 ff99 	bl	8003eec <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f003 fdbf 	bl	8005b44 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3718      	adds	r7, #24
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	4f54300a 	.word	0x4f54300a
 8001fd4:	4f54310a 	.word	0x4f54310a

08001fd8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b086      	sub	sp, #24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	333c      	adds	r3, #60	; 0x3c
 8001ff0:	3304      	adds	r3, #4
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	015a      	lsls	r2, r3, #5
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	4a15      	ldr	r2, [pc, #84]	; (8002060 <PCD_EP_OutSetupPacket_int+0x88>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d90e      	bls.n	800202c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002014:	2b00      	cmp	r3, #0
 8002016:	d009      	beq.n	800202c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	015a      	lsls	r2, r3, #5
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	4413      	add	r3, r2
 8002020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002024:	461a      	mov	r2, r3
 8002026:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800202a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f003 fd77 	bl	8005b20 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	4a0a      	ldr	r2, [pc, #40]	; (8002060 <PCD_EP_OutSetupPacket_int+0x88>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d90c      	bls.n	8002054 <PCD_EP_OutSetupPacket_int+0x7c>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d108      	bne.n	8002054 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6818      	ldr	r0, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800204c:	461a      	mov	r2, r3
 800204e:	2101      	movs	r1, #1
 8002050:	f001 ff4c 	bl	8003eec <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3718      	adds	r7, #24
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	4f54300a 	.word	0x4f54300a

08002064 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	460b      	mov	r3, r1
 800206e:	70fb      	strb	r3, [r7, #3]
 8002070:	4613      	mov	r3, r2
 8002072:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800207c:	78fb      	ldrb	r3, [r7, #3]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d107      	bne.n	8002092 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002082:	883b      	ldrh	r3, [r7, #0]
 8002084:	0419      	lsls	r1, r3, #16
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	68ba      	ldr	r2, [r7, #8]
 800208c:	430a      	orrs	r2, r1
 800208e:	629a      	str	r2, [r3, #40]	; 0x28
 8002090:	e028      	b.n	80020e4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002098:	0c1b      	lsrs	r3, r3, #16
 800209a:	68ba      	ldr	r2, [r7, #8]
 800209c:	4413      	add	r3, r2
 800209e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80020a0:	2300      	movs	r3, #0
 80020a2:	73fb      	strb	r3, [r7, #15]
 80020a4:	e00d      	b.n	80020c2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	7bfb      	ldrb	r3, [r7, #15]
 80020ac:	3340      	adds	r3, #64	; 0x40
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	4413      	add	r3, r2
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	0c1b      	lsrs	r3, r3, #16
 80020b6:	68ba      	ldr	r2, [r7, #8]
 80020b8:	4413      	add	r3, r2
 80020ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80020bc:	7bfb      	ldrb	r3, [r7, #15]
 80020be:	3301      	adds	r3, #1
 80020c0:	73fb      	strb	r3, [r7, #15]
 80020c2:	7bfa      	ldrb	r2, [r7, #15]
 80020c4:	78fb      	ldrb	r3, [r7, #3]
 80020c6:	3b01      	subs	r3, #1
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d3ec      	bcc.n	80020a6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80020cc:	883b      	ldrh	r3, [r7, #0]
 80020ce:	0418      	lsls	r0, r3, #16
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6819      	ldr	r1, [r3, #0]
 80020d4:	78fb      	ldrb	r3, [r7, #3]
 80020d6:	3b01      	subs	r3, #1
 80020d8:	68ba      	ldr	r2, [r7, #8]
 80020da:	4302      	orrs	r2, r0
 80020dc:	3340      	adds	r3, #64	; 0x40
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	440b      	add	r3, r1
 80020e2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3714      	adds	r7, #20
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80020f2:	b480      	push	{r7}
 80020f4:	b083      	sub	sp, #12
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
 80020fa:	460b      	mov	r3, r1
 80020fc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	887a      	ldrh	r2, [r7, #2]
 8002104:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002106:	2300      	movs	r3, #0
}
 8002108:	4618      	mov	r0, r3
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	460b      	mov	r3, r1
 800211e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e264      	b.n	8002608 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b00      	cmp	r3, #0
 8002148:	d075      	beq.n	8002236 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800214a:	4ba3      	ldr	r3, [pc, #652]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f003 030c 	and.w	r3, r3, #12
 8002152:	2b04      	cmp	r3, #4
 8002154:	d00c      	beq.n	8002170 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002156:	4ba0      	ldr	r3, [pc, #640]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800215e:	2b08      	cmp	r3, #8
 8002160:	d112      	bne.n	8002188 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002162:	4b9d      	ldr	r3, [pc, #628]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800216a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800216e:	d10b      	bne.n	8002188 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002170:	4b99      	ldr	r3, [pc, #612]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d05b      	beq.n	8002234 <HAL_RCC_OscConfig+0x108>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d157      	bne.n	8002234 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e23f      	b.n	8002608 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002190:	d106      	bne.n	80021a0 <HAL_RCC_OscConfig+0x74>
 8002192:	4b91      	ldr	r3, [pc, #580]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a90      	ldr	r2, [pc, #576]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 8002198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800219c:	6013      	str	r3, [r2, #0]
 800219e:	e01d      	b.n	80021dc <HAL_RCC_OscConfig+0xb0>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021a8:	d10c      	bne.n	80021c4 <HAL_RCC_OscConfig+0x98>
 80021aa:	4b8b      	ldr	r3, [pc, #556]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a8a      	ldr	r2, [pc, #552]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 80021b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021b4:	6013      	str	r3, [r2, #0]
 80021b6:	4b88      	ldr	r3, [pc, #544]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a87      	ldr	r2, [pc, #540]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 80021bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021c0:	6013      	str	r3, [r2, #0]
 80021c2:	e00b      	b.n	80021dc <HAL_RCC_OscConfig+0xb0>
 80021c4:	4b84      	ldr	r3, [pc, #528]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a83      	ldr	r2, [pc, #524]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 80021ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021ce:	6013      	str	r3, [r2, #0]
 80021d0:	4b81      	ldr	r3, [pc, #516]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a80      	ldr	r2, [pc, #512]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 80021d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d013      	beq.n	800220c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e4:	f7fe fb70 	bl	80008c8 <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021ec:	f7fe fb6c 	bl	80008c8 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b64      	cmp	r3, #100	; 0x64
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e204      	b.n	8002608 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021fe:	4b76      	ldr	r3, [pc, #472]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d0f0      	beq.n	80021ec <HAL_RCC_OscConfig+0xc0>
 800220a:	e014      	b.n	8002236 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220c:	f7fe fb5c 	bl	80008c8 <HAL_GetTick>
 8002210:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002214:	f7fe fb58 	bl	80008c8 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b64      	cmp	r3, #100	; 0x64
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e1f0      	b.n	8002608 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002226:	4b6c      	ldr	r3, [pc, #432]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d1f0      	bne.n	8002214 <HAL_RCC_OscConfig+0xe8>
 8002232:	e000      	b.n	8002236 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002234:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	2b00      	cmp	r3, #0
 8002240:	d063      	beq.n	800230a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002242:	4b65      	ldr	r3, [pc, #404]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f003 030c 	and.w	r3, r3, #12
 800224a:	2b00      	cmp	r3, #0
 800224c:	d00b      	beq.n	8002266 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800224e:	4b62      	ldr	r3, [pc, #392]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002256:	2b08      	cmp	r3, #8
 8002258:	d11c      	bne.n	8002294 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800225a:	4b5f      	ldr	r3, [pc, #380]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d116      	bne.n	8002294 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002266:	4b5c      	ldr	r3, [pc, #368]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d005      	beq.n	800227e <HAL_RCC_OscConfig+0x152>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d001      	beq.n	800227e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e1c4      	b.n	8002608 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800227e:	4b56      	ldr	r3, [pc, #344]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	4952      	ldr	r1, [pc, #328]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 800228e:	4313      	orrs	r3, r2
 8002290:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002292:	e03a      	b.n	800230a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d020      	beq.n	80022de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800229c:	4b4f      	ldr	r3, [pc, #316]	; (80023dc <HAL_RCC_OscConfig+0x2b0>)
 800229e:	2201      	movs	r2, #1
 80022a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a2:	f7fe fb11 	bl	80008c8 <HAL_GetTick>
 80022a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a8:	e008      	b.n	80022bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022aa:	f7fe fb0d 	bl	80008c8 <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d901      	bls.n	80022bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	e1a5      	b.n	8002608 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022bc:	4b46      	ldr	r3, [pc, #280]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0302 	and.w	r3, r3, #2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d0f0      	beq.n	80022aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022c8:	4b43      	ldr	r3, [pc, #268]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	00db      	lsls	r3, r3, #3
 80022d6:	4940      	ldr	r1, [pc, #256]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	600b      	str	r3, [r1, #0]
 80022dc:	e015      	b.n	800230a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022de:	4b3f      	ldr	r3, [pc, #252]	; (80023dc <HAL_RCC_OscConfig+0x2b0>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e4:	f7fe faf0 	bl	80008c8 <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ea:	e008      	b.n	80022fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022ec:	f7fe faec 	bl	80008c8 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e184      	b.n	8002608 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022fe:	4b36      	ldr	r3, [pc, #216]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1f0      	bne.n	80022ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0308 	and.w	r3, r3, #8
 8002312:	2b00      	cmp	r3, #0
 8002314:	d030      	beq.n	8002378 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	695b      	ldr	r3, [r3, #20]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d016      	beq.n	800234c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800231e:	4b30      	ldr	r3, [pc, #192]	; (80023e0 <HAL_RCC_OscConfig+0x2b4>)
 8002320:	2201      	movs	r2, #1
 8002322:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002324:	f7fe fad0 	bl	80008c8 <HAL_GetTick>
 8002328:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800232a:	e008      	b.n	800233e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800232c:	f7fe facc 	bl	80008c8 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e164      	b.n	8002608 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800233e:	4b26      	ldr	r3, [pc, #152]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 8002340:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d0f0      	beq.n	800232c <HAL_RCC_OscConfig+0x200>
 800234a:	e015      	b.n	8002378 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800234c:	4b24      	ldr	r3, [pc, #144]	; (80023e0 <HAL_RCC_OscConfig+0x2b4>)
 800234e:	2200      	movs	r2, #0
 8002350:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002352:	f7fe fab9 	bl	80008c8 <HAL_GetTick>
 8002356:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002358:	e008      	b.n	800236c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800235a:	f7fe fab5 	bl	80008c8 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e14d      	b.n	8002608 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800236c:	4b1a      	ldr	r3, [pc, #104]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 800236e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1f0      	bne.n	800235a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0304 	and.w	r3, r3, #4
 8002380:	2b00      	cmp	r3, #0
 8002382:	f000 80a0 	beq.w	80024c6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002386:	2300      	movs	r3, #0
 8002388:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800238a:	4b13      	ldr	r3, [pc, #76]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 800238c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d10f      	bne.n	80023b6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002396:	2300      	movs	r3, #0
 8002398:	60bb      	str	r3, [r7, #8]
 800239a:	4b0f      	ldr	r3, [pc, #60]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 800239c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239e:	4a0e      	ldr	r2, [pc, #56]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 80023a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023a4:	6413      	str	r3, [r2, #64]	; 0x40
 80023a6:	4b0c      	ldr	r3, [pc, #48]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 80023a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ae:	60bb      	str	r3, [r7, #8]
 80023b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023b2:	2301      	movs	r3, #1
 80023b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b6:	4b0b      	ldr	r3, [pc, #44]	; (80023e4 <HAL_RCC_OscConfig+0x2b8>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d121      	bne.n	8002406 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023c2:	4b08      	ldr	r3, [pc, #32]	; (80023e4 <HAL_RCC_OscConfig+0x2b8>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a07      	ldr	r2, [pc, #28]	; (80023e4 <HAL_RCC_OscConfig+0x2b8>)
 80023c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023ce:	f7fe fa7b 	bl	80008c8 <HAL_GetTick>
 80023d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d4:	e011      	b.n	80023fa <HAL_RCC_OscConfig+0x2ce>
 80023d6:	bf00      	nop
 80023d8:	40023800 	.word	0x40023800
 80023dc:	42470000 	.word	0x42470000
 80023e0:	42470e80 	.word	0x42470e80
 80023e4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023e8:	f7fe fa6e 	bl	80008c8 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e106      	b.n	8002608 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023fa:	4b85      	ldr	r3, [pc, #532]	; (8002610 <HAL_RCC_OscConfig+0x4e4>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002402:	2b00      	cmp	r3, #0
 8002404:	d0f0      	beq.n	80023e8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d106      	bne.n	800241c <HAL_RCC_OscConfig+0x2f0>
 800240e:	4b81      	ldr	r3, [pc, #516]	; (8002614 <HAL_RCC_OscConfig+0x4e8>)
 8002410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002412:	4a80      	ldr	r2, [pc, #512]	; (8002614 <HAL_RCC_OscConfig+0x4e8>)
 8002414:	f043 0301 	orr.w	r3, r3, #1
 8002418:	6713      	str	r3, [r2, #112]	; 0x70
 800241a:	e01c      	b.n	8002456 <HAL_RCC_OscConfig+0x32a>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	2b05      	cmp	r3, #5
 8002422:	d10c      	bne.n	800243e <HAL_RCC_OscConfig+0x312>
 8002424:	4b7b      	ldr	r3, [pc, #492]	; (8002614 <HAL_RCC_OscConfig+0x4e8>)
 8002426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002428:	4a7a      	ldr	r2, [pc, #488]	; (8002614 <HAL_RCC_OscConfig+0x4e8>)
 800242a:	f043 0304 	orr.w	r3, r3, #4
 800242e:	6713      	str	r3, [r2, #112]	; 0x70
 8002430:	4b78      	ldr	r3, [pc, #480]	; (8002614 <HAL_RCC_OscConfig+0x4e8>)
 8002432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002434:	4a77      	ldr	r2, [pc, #476]	; (8002614 <HAL_RCC_OscConfig+0x4e8>)
 8002436:	f043 0301 	orr.w	r3, r3, #1
 800243a:	6713      	str	r3, [r2, #112]	; 0x70
 800243c:	e00b      	b.n	8002456 <HAL_RCC_OscConfig+0x32a>
 800243e:	4b75      	ldr	r3, [pc, #468]	; (8002614 <HAL_RCC_OscConfig+0x4e8>)
 8002440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002442:	4a74      	ldr	r2, [pc, #464]	; (8002614 <HAL_RCC_OscConfig+0x4e8>)
 8002444:	f023 0301 	bic.w	r3, r3, #1
 8002448:	6713      	str	r3, [r2, #112]	; 0x70
 800244a:	4b72      	ldr	r3, [pc, #456]	; (8002614 <HAL_RCC_OscConfig+0x4e8>)
 800244c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800244e:	4a71      	ldr	r2, [pc, #452]	; (8002614 <HAL_RCC_OscConfig+0x4e8>)
 8002450:	f023 0304 	bic.w	r3, r3, #4
 8002454:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d015      	beq.n	800248a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800245e:	f7fe fa33 	bl	80008c8 <HAL_GetTick>
 8002462:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002464:	e00a      	b.n	800247c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002466:	f7fe fa2f 	bl	80008c8 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	f241 3288 	movw	r2, #5000	; 0x1388
 8002474:	4293      	cmp	r3, r2
 8002476:	d901      	bls.n	800247c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e0c5      	b.n	8002608 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800247c:	4b65      	ldr	r3, [pc, #404]	; (8002614 <HAL_RCC_OscConfig+0x4e8>)
 800247e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d0ee      	beq.n	8002466 <HAL_RCC_OscConfig+0x33a>
 8002488:	e014      	b.n	80024b4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800248a:	f7fe fa1d 	bl	80008c8 <HAL_GetTick>
 800248e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002490:	e00a      	b.n	80024a8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002492:	f7fe fa19 	bl	80008c8 <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d901      	bls.n	80024a8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e0af      	b.n	8002608 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024a8:	4b5a      	ldr	r3, [pc, #360]	; (8002614 <HAL_RCC_OscConfig+0x4e8>)
 80024aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d1ee      	bne.n	8002492 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024b4:	7dfb      	ldrb	r3, [r7, #23]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d105      	bne.n	80024c6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024ba:	4b56      	ldr	r3, [pc, #344]	; (8002614 <HAL_RCC_OscConfig+0x4e8>)
 80024bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024be:	4a55      	ldr	r2, [pc, #340]	; (8002614 <HAL_RCC_OscConfig+0x4e8>)
 80024c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	f000 809b 	beq.w	8002606 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024d0:	4b50      	ldr	r3, [pc, #320]	; (8002614 <HAL_RCC_OscConfig+0x4e8>)
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f003 030c 	and.w	r3, r3, #12
 80024d8:	2b08      	cmp	r3, #8
 80024da:	d05c      	beq.n	8002596 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d141      	bne.n	8002568 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024e4:	4b4c      	ldr	r3, [pc, #304]	; (8002618 <HAL_RCC_OscConfig+0x4ec>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ea:	f7fe f9ed 	bl	80008c8 <HAL_GetTick>
 80024ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024f0:	e008      	b.n	8002504 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024f2:	f7fe f9e9 	bl	80008c8 <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e081      	b.n	8002608 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002504:	4b43      	ldr	r3, [pc, #268]	; (8002614 <HAL_RCC_OscConfig+0x4e8>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d1f0      	bne.n	80024f2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	69da      	ldr	r2, [r3, #28]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a1b      	ldr	r3, [r3, #32]
 8002518:	431a      	orrs	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251e:	019b      	lsls	r3, r3, #6
 8002520:	431a      	orrs	r2, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002526:	085b      	lsrs	r3, r3, #1
 8002528:	3b01      	subs	r3, #1
 800252a:	041b      	lsls	r3, r3, #16
 800252c:	431a      	orrs	r2, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002532:	061b      	lsls	r3, r3, #24
 8002534:	4937      	ldr	r1, [pc, #220]	; (8002614 <HAL_RCC_OscConfig+0x4e8>)
 8002536:	4313      	orrs	r3, r2
 8002538:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800253a:	4b37      	ldr	r3, [pc, #220]	; (8002618 <HAL_RCC_OscConfig+0x4ec>)
 800253c:	2201      	movs	r2, #1
 800253e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002540:	f7fe f9c2 	bl	80008c8 <HAL_GetTick>
 8002544:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002546:	e008      	b.n	800255a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002548:	f7fe f9be 	bl	80008c8 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b02      	cmp	r3, #2
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e056      	b.n	8002608 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800255a:	4b2e      	ldr	r3, [pc, #184]	; (8002614 <HAL_RCC_OscConfig+0x4e8>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d0f0      	beq.n	8002548 <HAL_RCC_OscConfig+0x41c>
 8002566:	e04e      	b.n	8002606 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002568:	4b2b      	ldr	r3, [pc, #172]	; (8002618 <HAL_RCC_OscConfig+0x4ec>)
 800256a:	2200      	movs	r2, #0
 800256c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800256e:	f7fe f9ab 	bl	80008c8 <HAL_GetTick>
 8002572:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002574:	e008      	b.n	8002588 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002576:	f7fe f9a7 	bl	80008c8 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d901      	bls.n	8002588 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e03f      	b.n	8002608 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002588:	4b22      	ldr	r3, [pc, #136]	; (8002614 <HAL_RCC_OscConfig+0x4e8>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d1f0      	bne.n	8002576 <HAL_RCC_OscConfig+0x44a>
 8002594:	e037      	b.n	8002606 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	699b      	ldr	r3, [r3, #24]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d101      	bne.n	80025a2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e032      	b.n	8002608 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025a2:	4b1c      	ldr	r3, [pc, #112]	; (8002614 <HAL_RCC_OscConfig+0x4e8>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d028      	beq.n	8002602 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d121      	bne.n	8002602 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d11a      	bne.n	8002602 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025cc:	68fa      	ldr	r2, [r7, #12]
 80025ce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025d2:	4013      	ands	r3, r2
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025d8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025da:	4293      	cmp	r3, r2
 80025dc:	d111      	bne.n	8002602 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e8:	085b      	lsrs	r3, r3, #1
 80025ea:	3b01      	subs	r3, #1
 80025ec:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d107      	bne.n	8002602 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025fe:	429a      	cmp	r2, r3
 8002600:	d001      	beq.n	8002606 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e000      	b.n	8002608 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002606:	2300      	movs	r3, #0
}
 8002608:	4618      	mov	r0, r3
 800260a:	3718      	adds	r7, #24
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	40007000 	.word	0x40007000
 8002614:	40023800 	.word	0x40023800
 8002618:	42470060 	.word	0x42470060

0800261c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e0cc      	b.n	80027ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002630:	4b68      	ldr	r3, [pc, #416]	; (80027d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0307 	and.w	r3, r3, #7
 8002638:	683a      	ldr	r2, [r7, #0]
 800263a:	429a      	cmp	r2, r3
 800263c:	d90c      	bls.n	8002658 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800263e:	4b65      	ldr	r3, [pc, #404]	; (80027d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002640:	683a      	ldr	r2, [r7, #0]
 8002642:	b2d2      	uxtb	r2, r2
 8002644:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002646:	4b63      	ldr	r3, [pc, #396]	; (80027d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0307 	and.w	r3, r3, #7
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	429a      	cmp	r2, r3
 8002652:	d001      	beq.n	8002658 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e0b8      	b.n	80027ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0302 	and.w	r3, r3, #2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d020      	beq.n	80026a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0304 	and.w	r3, r3, #4
 800266c:	2b00      	cmp	r3, #0
 800266e:	d005      	beq.n	800267c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002670:	4b59      	ldr	r3, [pc, #356]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	4a58      	ldr	r2, [pc, #352]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002676:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800267a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0308 	and.w	r3, r3, #8
 8002684:	2b00      	cmp	r3, #0
 8002686:	d005      	beq.n	8002694 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002688:	4b53      	ldr	r3, [pc, #332]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	4a52      	ldr	r2, [pc, #328]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 800268e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002692:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002694:	4b50      	ldr	r3, [pc, #320]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	494d      	ldr	r1, [pc, #308]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d044      	beq.n	800273c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d107      	bne.n	80026ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ba:	4b47      	ldr	r3, [pc, #284]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d119      	bne.n	80026fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e07f      	b.n	80027ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d003      	beq.n	80026da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026d6:	2b03      	cmp	r3, #3
 80026d8:	d107      	bne.n	80026ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026da:	4b3f      	ldr	r3, [pc, #252]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d109      	bne.n	80026fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e06f      	b.n	80027ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ea:	4b3b      	ldr	r3, [pc, #236]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d101      	bne.n	80026fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e067      	b.n	80027ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026fa:	4b37      	ldr	r3, [pc, #220]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f023 0203 	bic.w	r2, r3, #3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	4934      	ldr	r1, [pc, #208]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002708:	4313      	orrs	r3, r2
 800270a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800270c:	f7fe f8dc 	bl	80008c8 <HAL_GetTick>
 8002710:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002712:	e00a      	b.n	800272a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002714:	f7fe f8d8 	bl	80008c8 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002722:	4293      	cmp	r3, r2
 8002724:	d901      	bls.n	800272a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e04f      	b.n	80027ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800272a:	4b2b      	ldr	r3, [pc, #172]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f003 020c 	and.w	r2, r3, #12
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	429a      	cmp	r2, r3
 800273a:	d1eb      	bne.n	8002714 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800273c:	4b25      	ldr	r3, [pc, #148]	; (80027d4 <HAL_RCC_ClockConfig+0x1b8>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0307 	and.w	r3, r3, #7
 8002744:	683a      	ldr	r2, [r7, #0]
 8002746:	429a      	cmp	r2, r3
 8002748:	d20c      	bcs.n	8002764 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800274a:	4b22      	ldr	r3, [pc, #136]	; (80027d4 <HAL_RCC_ClockConfig+0x1b8>)
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	b2d2      	uxtb	r2, r2
 8002750:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002752:	4b20      	ldr	r3, [pc, #128]	; (80027d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0307 	and.w	r3, r3, #7
 800275a:	683a      	ldr	r2, [r7, #0]
 800275c:	429a      	cmp	r2, r3
 800275e:	d001      	beq.n	8002764 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e032      	b.n	80027ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0304 	and.w	r3, r3, #4
 800276c:	2b00      	cmp	r3, #0
 800276e:	d008      	beq.n	8002782 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002770:	4b19      	ldr	r3, [pc, #100]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	4916      	ldr	r1, [pc, #88]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 800277e:	4313      	orrs	r3, r2
 8002780:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0308 	and.w	r3, r3, #8
 800278a:	2b00      	cmp	r3, #0
 800278c:	d009      	beq.n	80027a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800278e:	4b12      	ldr	r3, [pc, #72]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	00db      	lsls	r3, r3, #3
 800279c:	490e      	ldr	r1, [pc, #56]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027a2:	f000 f821 	bl	80027e8 <HAL_RCC_GetSysClockFreq>
 80027a6:	4602      	mov	r2, r0
 80027a8:	4b0b      	ldr	r3, [pc, #44]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	091b      	lsrs	r3, r3, #4
 80027ae:	f003 030f 	and.w	r3, r3, #15
 80027b2:	490a      	ldr	r1, [pc, #40]	; (80027dc <HAL_RCC_ClockConfig+0x1c0>)
 80027b4:	5ccb      	ldrb	r3, [r1, r3]
 80027b6:	fa22 f303 	lsr.w	r3, r2, r3
 80027ba:	4a09      	ldr	r2, [pc, #36]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 80027bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80027be:	4b09      	ldr	r3, [pc, #36]	; (80027e4 <HAL_RCC_ClockConfig+0x1c8>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7fe f83c 	bl	8000840 <HAL_InitTick>

  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3710      	adds	r7, #16
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	40023c00 	.word	0x40023c00
 80027d8:	40023800 	.word	0x40023800
 80027dc:	08006138 	.word	0x08006138
 80027e0:	20000004 	.word	0x20000004
 80027e4:	20000008 	.word	0x20000008

080027e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80027ec:	b084      	sub	sp, #16
 80027ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80027f0:	2300      	movs	r3, #0
 80027f2:	607b      	str	r3, [r7, #4]
 80027f4:	2300      	movs	r3, #0
 80027f6:	60fb      	str	r3, [r7, #12]
 80027f8:	2300      	movs	r3, #0
 80027fa:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80027fc:	2300      	movs	r3, #0
 80027fe:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002800:	4b67      	ldr	r3, [pc, #412]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f003 030c 	and.w	r3, r3, #12
 8002808:	2b08      	cmp	r3, #8
 800280a:	d00d      	beq.n	8002828 <HAL_RCC_GetSysClockFreq+0x40>
 800280c:	2b08      	cmp	r3, #8
 800280e:	f200 80bd 	bhi.w	800298c <HAL_RCC_GetSysClockFreq+0x1a4>
 8002812:	2b00      	cmp	r3, #0
 8002814:	d002      	beq.n	800281c <HAL_RCC_GetSysClockFreq+0x34>
 8002816:	2b04      	cmp	r3, #4
 8002818:	d003      	beq.n	8002822 <HAL_RCC_GetSysClockFreq+0x3a>
 800281a:	e0b7      	b.n	800298c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800281c:	4b61      	ldr	r3, [pc, #388]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800281e:	60bb      	str	r3, [r7, #8]
       break;
 8002820:	e0b7      	b.n	8002992 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002822:	4b61      	ldr	r3, [pc, #388]	; (80029a8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002824:	60bb      	str	r3, [r7, #8]
      break;
 8002826:	e0b4      	b.n	8002992 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002828:	4b5d      	ldr	r3, [pc, #372]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002830:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002832:	4b5b      	ldr	r3, [pc, #364]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d04d      	beq.n	80028da <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800283e:	4b58      	ldr	r3, [pc, #352]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	099b      	lsrs	r3, r3, #6
 8002844:	461a      	mov	r2, r3
 8002846:	f04f 0300 	mov.w	r3, #0
 800284a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800284e:	f04f 0100 	mov.w	r1, #0
 8002852:	ea02 0800 	and.w	r8, r2, r0
 8002856:	ea03 0901 	and.w	r9, r3, r1
 800285a:	4640      	mov	r0, r8
 800285c:	4649      	mov	r1, r9
 800285e:	f04f 0200 	mov.w	r2, #0
 8002862:	f04f 0300 	mov.w	r3, #0
 8002866:	014b      	lsls	r3, r1, #5
 8002868:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800286c:	0142      	lsls	r2, r0, #5
 800286e:	4610      	mov	r0, r2
 8002870:	4619      	mov	r1, r3
 8002872:	ebb0 0008 	subs.w	r0, r0, r8
 8002876:	eb61 0109 	sbc.w	r1, r1, r9
 800287a:	f04f 0200 	mov.w	r2, #0
 800287e:	f04f 0300 	mov.w	r3, #0
 8002882:	018b      	lsls	r3, r1, #6
 8002884:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002888:	0182      	lsls	r2, r0, #6
 800288a:	1a12      	subs	r2, r2, r0
 800288c:	eb63 0301 	sbc.w	r3, r3, r1
 8002890:	f04f 0000 	mov.w	r0, #0
 8002894:	f04f 0100 	mov.w	r1, #0
 8002898:	00d9      	lsls	r1, r3, #3
 800289a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800289e:	00d0      	lsls	r0, r2, #3
 80028a0:	4602      	mov	r2, r0
 80028a2:	460b      	mov	r3, r1
 80028a4:	eb12 0208 	adds.w	r2, r2, r8
 80028a8:	eb43 0309 	adc.w	r3, r3, r9
 80028ac:	f04f 0000 	mov.w	r0, #0
 80028b0:	f04f 0100 	mov.w	r1, #0
 80028b4:	0259      	lsls	r1, r3, #9
 80028b6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80028ba:	0250      	lsls	r0, r2, #9
 80028bc:	4602      	mov	r2, r0
 80028be:	460b      	mov	r3, r1
 80028c0:	4610      	mov	r0, r2
 80028c2:	4619      	mov	r1, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	461a      	mov	r2, r3
 80028c8:	f04f 0300 	mov.w	r3, #0
 80028cc:	f7fd fc84 	bl	80001d8 <__aeabi_uldivmod>
 80028d0:	4602      	mov	r2, r0
 80028d2:	460b      	mov	r3, r1
 80028d4:	4613      	mov	r3, r2
 80028d6:	60fb      	str	r3, [r7, #12]
 80028d8:	e04a      	b.n	8002970 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028da:	4b31      	ldr	r3, [pc, #196]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	099b      	lsrs	r3, r3, #6
 80028e0:	461a      	mov	r2, r3
 80028e2:	f04f 0300 	mov.w	r3, #0
 80028e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80028ea:	f04f 0100 	mov.w	r1, #0
 80028ee:	ea02 0400 	and.w	r4, r2, r0
 80028f2:	ea03 0501 	and.w	r5, r3, r1
 80028f6:	4620      	mov	r0, r4
 80028f8:	4629      	mov	r1, r5
 80028fa:	f04f 0200 	mov.w	r2, #0
 80028fe:	f04f 0300 	mov.w	r3, #0
 8002902:	014b      	lsls	r3, r1, #5
 8002904:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002908:	0142      	lsls	r2, r0, #5
 800290a:	4610      	mov	r0, r2
 800290c:	4619      	mov	r1, r3
 800290e:	1b00      	subs	r0, r0, r4
 8002910:	eb61 0105 	sbc.w	r1, r1, r5
 8002914:	f04f 0200 	mov.w	r2, #0
 8002918:	f04f 0300 	mov.w	r3, #0
 800291c:	018b      	lsls	r3, r1, #6
 800291e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002922:	0182      	lsls	r2, r0, #6
 8002924:	1a12      	subs	r2, r2, r0
 8002926:	eb63 0301 	sbc.w	r3, r3, r1
 800292a:	f04f 0000 	mov.w	r0, #0
 800292e:	f04f 0100 	mov.w	r1, #0
 8002932:	00d9      	lsls	r1, r3, #3
 8002934:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002938:	00d0      	lsls	r0, r2, #3
 800293a:	4602      	mov	r2, r0
 800293c:	460b      	mov	r3, r1
 800293e:	1912      	adds	r2, r2, r4
 8002940:	eb45 0303 	adc.w	r3, r5, r3
 8002944:	f04f 0000 	mov.w	r0, #0
 8002948:	f04f 0100 	mov.w	r1, #0
 800294c:	0299      	lsls	r1, r3, #10
 800294e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002952:	0290      	lsls	r0, r2, #10
 8002954:	4602      	mov	r2, r0
 8002956:	460b      	mov	r3, r1
 8002958:	4610      	mov	r0, r2
 800295a:	4619      	mov	r1, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	461a      	mov	r2, r3
 8002960:	f04f 0300 	mov.w	r3, #0
 8002964:	f7fd fc38 	bl	80001d8 <__aeabi_uldivmod>
 8002968:	4602      	mov	r2, r0
 800296a:	460b      	mov	r3, r1
 800296c:	4613      	mov	r3, r2
 800296e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002970:	4b0b      	ldr	r3, [pc, #44]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	0c1b      	lsrs	r3, r3, #16
 8002976:	f003 0303 	and.w	r3, r3, #3
 800297a:	3301      	adds	r3, #1
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	fbb2 f3f3 	udiv	r3, r2, r3
 8002988:	60bb      	str	r3, [r7, #8]
      break;
 800298a:	e002      	b.n	8002992 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800298c:	4b05      	ldr	r3, [pc, #20]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800298e:	60bb      	str	r3, [r7, #8]
      break;
 8002990:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002992:	68bb      	ldr	r3, [r7, #8]
}
 8002994:	4618      	mov	r0, r3
 8002996:	3710      	adds	r7, #16
 8002998:	46bd      	mov	sp, r7
 800299a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800299e:	bf00      	nop
 80029a0:	40023800 	.word	0x40023800
 80029a4:	00f42400 	.word	0x00f42400
 80029a8:	007a1200 	.word	0x007a1200

080029ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029b0:	4b03      	ldr	r3, [pc, #12]	; (80029c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80029b2:	681b      	ldr	r3, [r3, #0]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	20000004 	.word	0x20000004

080029c4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80029c4:	b084      	sub	sp, #16
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b084      	sub	sp, #16
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
 80029ce:	f107 001c 	add.w	r0, r7, #28
 80029d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80029d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d122      	bne.n	8002a22 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80029f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002a04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d105      	bne.n	8002a16 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f001 fac6 	bl	8003fa8 <USB_CoreReset>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	73fb      	strb	r3, [r7, #15]
 8002a20:	e01a      	b.n	8002a58 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f001 faba 	bl	8003fa8 <USB_CoreReset>
 8002a34:	4603      	mov	r3, r0
 8002a36:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002a38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d106      	bne.n	8002a4c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a42:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	639a      	str	r2, [r3, #56]	; 0x38
 8002a4a:	e005      	b.n	8002a58 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a50:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d10b      	bne.n	8002a76 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f043 0206 	orr.w	r2, r3, #6
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f043 0220 	orr.w	r2, r3, #32
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3710      	adds	r7, #16
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002a82:	b004      	add	sp, #16
 8002a84:	4770      	bx	lr
	...

08002a88 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b087      	sub	sp, #28
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	4613      	mov	r3, r2
 8002a94:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002a96:	79fb      	ldrb	r3, [r7, #7]
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d165      	bne.n	8002b68 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	4a41      	ldr	r2, [pc, #260]	; (8002ba4 <USB_SetTurnaroundTime+0x11c>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d906      	bls.n	8002ab2 <USB_SetTurnaroundTime+0x2a>
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	4a40      	ldr	r2, [pc, #256]	; (8002ba8 <USB_SetTurnaroundTime+0x120>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d202      	bcs.n	8002ab2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002aac:	230f      	movs	r3, #15
 8002aae:	617b      	str	r3, [r7, #20]
 8002ab0:	e062      	b.n	8002b78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	4a3c      	ldr	r2, [pc, #240]	; (8002ba8 <USB_SetTurnaroundTime+0x120>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d306      	bcc.n	8002ac8 <USB_SetTurnaroundTime+0x40>
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	4a3b      	ldr	r2, [pc, #236]	; (8002bac <USB_SetTurnaroundTime+0x124>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d202      	bcs.n	8002ac8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002ac2:	230e      	movs	r3, #14
 8002ac4:	617b      	str	r3, [r7, #20]
 8002ac6:	e057      	b.n	8002b78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	4a38      	ldr	r2, [pc, #224]	; (8002bac <USB_SetTurnaroundTime+0x124>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d306      	bcc.n	8002ade <USB_SetTurnaroundTime+0x56>
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	4a37      	ldr	r2, [pc, #220]	; (8002bb0 <USB_SetTurnaroundTime+0x128>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d202      	bcs.n	8002ade <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002ad8:	230d      	movs	r3, #13
 8002ada:	617b      	str	r3, [r7, #20]
 8002adc:	e04c      	b.n	8002b78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	4a33      	ldr	r2, [pc, #204]	; (8002bb0 <USB_SetTurnaroundTime+0x128>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d306      	bcc.n	8002af4 <USB_SetTurnaroundTime+0x6c>
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	4a32      	ldr	r2, [pc, #200]	; (8002bb4 <USB_SetTurnaroundTime+0x12c>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d802      	bhi.n	8002af4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002aee:	230c      	movs	r3, #12
 8002af0:	617b      	str	r3, [r7, #20]
 8002af2:	e041      	b.n	8002b78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	4a2f      	ldr	r2, [pc, #188]	; (8002bb4 <USB_SetTurnaroundTime+0x12c>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d906      	bls.n	8002b0a <USB_SetTurnaroundTime+0x82>
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	4a2e      	ldr	r2, [pc, #184]	; (8002bb8 <USB_SetTurnaroundTime+0x130>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d802      	bhi.n	8002b0a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002b04:	230b      	movs	r3, #11
 8002b06:	617b      	str	r3, [r7, #20]
 8002b08:	e036      	b.n	8002b78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	4a2a      	ldr	r2, [pc, #168]	; (8002bb8 <USB_SetTurnaroundTime+0x130>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d906      	bls.n	8002b20 <USB_SetTurnaroundTime+0x98>
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	4a29      	ldr	r2, [pc, #164]	; (8002bbc <USB_SetTurnaroundTime+0x134>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d802      	bhi.n	8002b20 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002b1a:	230a      	movs	r3, #10
 8002b1c:	617b      	str	r3, [r7, #20]
 8002b1e:	e02b      	b.n	8002b78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	4a26      	ldr	r2, [pc, #152]	; (8002bbc <USB_SetTurnaroundTime+0x134>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d906      	bls.n	8002b36 <USB_SetTurnaroundTime+0xae>
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	4a25      	ldr	r2, [pc, #148]	; (8002bc0 <USB_SetTurnaroundTime+0x138>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d202      	bcs.n	8002b36 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002b30:	2309      	movs	r3, #9
 8002b32:	617b      	str	r3, [r7, #20]
 8002b34:	e020      	b.n	8002b78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	4a21      	ldr	r2, [pc, #132]	; (8002bc0 <USB_SetTurnaroundTime+0x138>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d306      	bcc.n	8002b4c <USB_SetTurnaroundTime+0xc4>
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	4a20      	ldr	r2, [pc, #128]	; (8002bc4 <USB_SetTurnaroundTime+0x13c>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d802      	bhi.n	8002b4c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002b46:	2308      	movs	r3, #8
 8002b48:	617b      	str	r3, [r7, #20]
 8002b4a:	e015      	b.n	8002b78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	4a1d      	ldr	r2, [pc, #116]	; (8002bc4 <USB_SetTurnaroundTime+0x13c>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d906      	bls.n	8002b62 <USB_SetTurnaroundTime+0xda>
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	4a1c      	ldr	r2, [pc, #112]	; (8002bc8 <USB_SetTurnaroundTime+0x140>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d202      	bcs.n	8002b62 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002b5c:	2307      	movs	r3, #7
 8002b5e:	617b      	str	r3, [r7, #20]
 8002b60:	e00a      	b.n	8002b78 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002b62:	2306      	movs	r3, #6
 8002b64:	617b      	str	r3, [r7, #20]
 8002b66:	e007      	b.n	8002b78 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002b68:	79fb      	ldrb	r3, [r7, #7]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d102      	bne.n	8002b74 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002b6e:	2309      	movs	r3, #9
 8002b70:	617b      	str	r3, [r7, #20]
 8002b72:	e001      	b.n	8002b78 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002b74:	2309      	movs	r3, #9
 8002b76:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	68da      	ldr	r2, [r3, #12]
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	029b      	lsls	r3, r3, #10
 8002b8c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002b90:	431a      	orrs	r2, r3
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002b96:	2300      	movs	r3, #0
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	371c      	adds	r7, #28
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr
 8002ba4:	00d8acbf 	.word	0x00d8acbf
 8002ba8:	00e4e1c0 	.word	0x00e4e1c0
 8002bac:	00f42400 	.word	0x00f42400
 8002bb0:	01067380 	.word	0x01067380
 8002bb4:	011a499f 	.word	0x011a499f
 8002bb8:	01312cff 	.word	0x01312cff
 8002bbc:	014ca43f 	.word	0x014ca43f
 8002bc0:	016e3600 	.word	0x016e3600
 8002bc4:	01a6ab1f 	.word	0x01a6ab1f
 8002bc8:	01e84800 	.word	0x01e84800

08002bcc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f043 0201 	orr.w	r2, r3, #1
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr

08002bee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002bee:	b480      	push	{r7}
 8002bf0:	b083      	sub	sp, #12
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f023 0201 	bic.w	r2, r3, #1
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002c02:	2300      	movs	r3, #0
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	460b      	mov	r3, r1
 8002c1a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002c28:	78fb      	ldrb	r3, [r7, #3]
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d106      	bne.n	8002c3c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	60da      	str	r2, [r3, #12]
 8002c3a:	e00b      	b.n	8002c54 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8002c3c:	78fb      	ldrb	r3, [r7, #3]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d106      	bne.n	8002c50 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	60da      	str	r2, [r3, #12]
 8002c4e:	e001      	b.n	8002c54 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e003      	b.n	8002c5c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8002c54:	2032      	movs	r0, #50	; 0x32
 8002c56:	f7fd fe43 	bl	80008e0 <HAL_Delay>

  return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3708      	adds	r7, #8
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002c64:	b084      	sub	sp, #16
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b086      	sub	sp, #24
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
 8002c6e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002c72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002c76:	2300      	movs	r3, #0
 8002c78:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002c7e:	2300      	movs	r3, #0
 8002c80:	613b      	str	r3, [r7, #16]
 8002c82:	e009      	b.n	8002c98 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	3340      	adds	r3, #64	; 0x40
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	4413      	add	r3, r2
 8002c8e:	2200      	movs	r2, #0
 8002c90:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	3301      	adds	r3, #1
 8002c96:	613b      	str	r3, [r7, #16]
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	2b0e      	cmp	r3, #14
 8002c9c:	d9f2      	bls.n	8002c84 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002c9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d11c      	bne.n	8002cde <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cb2:	f043 0302 	orr.w	r3, r3, #2
 8002cb6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cbc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	639a      	str	r2, [r3, #56]	; 0x38
 8002cdc:	e00b      	b.n	8002cf6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cee:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	2300      	movs	r3, #0
 8002d00:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d08:	4619      	mov	r1, r3
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d10:	461a      	mov	r2, r3
 8002d12:	680b      	ldr	r3, [r1, #0]
 8002d14:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d10c      	bne.n	8002d36 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d104      	bne.n	8002d2c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002d22:	2100      	movs	r1, #0
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f000 f949 	bl	8002fbc <USB_SetDevSpeed>
 8002d2a:	e008      	b.n	8002d3e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002d2c:	2101      	movs	r1, #1
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 f944 	bl	8002fbc <USB_SetDevSpeed>
 8002d34:	e003      	b.n	8002d3e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002d36:	2103      	movs	r1, #3
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f000 f93f 	bl	8002fbc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002d3e:	2110      	movs	r1, #16
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 f8f3 	bl	8002f2c <USB_FlushTxFifo>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d001      	beq.n	8002d50 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f000 f911 	bl	8002f78 <USB_FlushRxFifo>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d66:	461a      	mov	r2, r3
 8002d68:	2300      	movs	r3, #0
 8002d6a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d72:	461a      	mov	r2, r3
 8002d74:	2300      	movs	r3, #0
 8002d76:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d7e:	461a      	mov	r2, r3
 8002d80:	2300      	movs	r3, #0
 8002d82:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002d84:	2300      	movs	r3, #0
 8002d86:	613b      	str	r3, [r7, #16]
 8002d88:	e043      	b.n	8002e12 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	015a      	lsls	r2, r3, #5
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	4413      	add	r3, r2
 8002d92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002da0:	d118      	bne.n	8002dd4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d10a      	bne.n	8002dbe <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	015a      	lsls	r2, r3, #5
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	4413      	add	r3, r2
 8002db0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002db4:	461a      	mov	r2, r3
 8002db6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002dba:	6013      	str	r3, [r2, #0]
 8002dbc:	e013      	b.n	8002de6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	015a      	lsls	r2, r3, #5
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dca:	461a      	mov	r2, r3
 8002dcc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002dd0:	6013      	str	r3, [r2, #0]
 8002dd2:	e008      	b.n	8002de6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	015a      	lsls	r2, r3, #5
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	4413      	add	r3, r2
 8002ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002de0:	461a      	mov	r2, r3
 8002de2:	2300      	movs	r3, #0
 8002de4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	015a      	lsls	r2, r3, #5
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	4413      	add	r3, r2
 8002dee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002df2:	461a      	mov	r2, r3
 8002df4:	2300      	movs	r3, #0
 8002df6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	015a      	lsls	r2, r3, #5
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	4413      	add	r3, r2
 8002e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e04:	461a      	mov	r2, r3
 8002e06:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002e0a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	3301      	adds	r3, #1
 8002e10:	613b      	str	r3, [r7, #16]
 8002e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e14:	693a      	ldr	r2, [r7, #16]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d3b7      	bcc.n	8002d8a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	613b      	str	r3, [r7, #16]
 8002e1e:	e043      	b.n	8002ea8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	015a      	lsls	r2, r3, #5
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	4413      	add	r3, r2
 8002e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e36:	d118      	bne.n	8002e6a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d10a      	bne.n	8002e54 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	015a      	lsls	r2, r3, #5
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	4413      	add	r3, r2
 8002e46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002e50:	6013      	str	r3, [r2, #0]
 8002e52:	e013      	b.n	8002e7c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	015a      	lsls	r2, r3, #5
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e60:	461a      	mov	r2, r3
 8002e62:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002e66:	6013      	str	r3, [r2, #0]
 8002e68:	e008      	b.n	8002e7c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	015a      	lsls	r2, r3, #5
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	4413      	add	r3, r2
 8002e72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e76:	461a      	mov	r2, r3
 8002e78:	2300      	movs	r3, #0
 8002e7a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	015a      	lsls	r2, r3, #5
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	4413      	add	r3, r2
 8002e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e88:	461a      	mov	r2, r3
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	015a      	lsls	r2, r3, #5
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	4413      	add	r3, r2
 8002e96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002ea0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	613b      	str	r3, [r7, #16]
 8002ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eaa:	693a      	ldr	r2, [r7, #16]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d3b7      	bcc.n	8002e20 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	68fa      	ldr	r2, [r7, #12]
 8002eba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ebe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ec2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8002ed0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8002ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d105      	bne.n	8002ee4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	f043 0210 	orr.w	r2, r3, #16
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	699a      	ldr	r2, [r3, #24]
 8002ee8:	4b0f      	ldr	r3, [pc, #60]	; (8002f28 <USB_DevInit+0x2c4>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8002ef0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d005      	beq.n	8002f02 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	f043 0208 	orr.w	r2, r3, #8
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8002f02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d107      	bne.n	8002f18 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002f10:	f043 0304 	orr.w	r3, r3, #4
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8002f18:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3718      	adds	r7, #24
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002f24:	b004      	add	sp, #16
 8002f26:	4770      	bx	lr
 8002f28:	803c3800 	.word	0x803c3800

08002f2c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8002f36:	2300      	movs	r3, #0
 8002f38:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	019b      	lsls	r3, r3, #6
 8002f3e:	f043 0220 	orr.w	r2, r3, #32
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	3301      	adds	r3, #1
 8002f4a:	60fb      	str	r3, [r7, #12]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	4a09      	ldr	r2, [pc, #36]	; (8002f74 <USB_FlushTxFifo+0x48>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d901      	bls.n	8002f58 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e006      	b.n	8002f66 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	691b      	ldr	r3, [r3, #16]
 8002f5c:	f003 0320 	and.w	r3, r3, #32
 8002f60:	2b20      	cmp	r3, #32
 8002f62:	d0f0      	beq.n	8002f46 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3714      	adds	r7, #20
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	00030d40 	.word	0x00030d40

08002f78 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b085      	sub	sp, #20
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8002f80:	2300      	movs	r3, #0
 8002f82:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2210      	movs	r2, #16
 8002f88:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	60fb      	str	r3, [r7, #12]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	4a09      	ldr	r2, [pc, #36]	; (8002fb8 <USB_FlushRxFifo+0x40>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d901      	bls.n	8002f9c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e006      	b.n	8002faa <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	f003 0310 	and.w	r3, r3, #16
 8002fa4:	2b10      	cmp	r3, #16
 8002fa6:	d0f0      	beq.n	8002f8a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3714      	adds	r7, #20
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	00030d40 	.word	0x00030d40

08002fbc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b085      	sub	sp, #20
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	78fb      	ldrb	r3, [r7, #3]
 8002fd6:	68f9      	ldr	r1, [r7, #12]
 8002fd8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3714      	adds	r7, #20
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr

08002fee <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8002fee:	b480      	push	{r7}
 8002ff0:	b087      	sub	sp, #28
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f003 0306 	and.w	r3, r3, #6
 8003006:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d102      	bne.n	8003014 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800300e:	2300      	movs	r3, #0
 8003010:	75fb      	strb	r3, [r7, #23]
 8003012:	e00a      	b.n	800302a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2b02      	cmp	r3, #2
 8003018:	d002      	beq.n	8003020 <USB_GetDevSpeed+0x32>
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2b06      	cmp	r3, #6
 800301e:	d102      	bne.n	8003026 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003020:	2302      	movs	r3, #2
 8003022:	75fb      	strb	r3, [r7, #23]
 8003024:	e001      	b.n	800302a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003026:	230f      	movs	r3, #15
 8003028:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800302a:	7dfb      	ldrb	r3, [r7, #23]
}
 800302c:	4618      	mov	r0, r3
 800302e:	371c      	adds	r7, #28
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003038:	b480      	push	{r7}
 800303a:	b085      	sub	sp, #20
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	785b      	ldrb	r3, [r3, #1]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d13a      	bne.n	80030ca <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800305a:	69da      	ldr	r2, [r3, #28]
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	f003 030f 	and.w	r3, r3, #15
 8003064:	2101      	movs	r1, #1
 8003066:	fa01 f303 	lsl.w	r3, r1, r3
 800306a:	b29b      	uxth	r3, r3
 800306c:	68f9      	ldr	r1, [r7, #12]
 800306e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003072:	4313      	orrs	r3, r2
 8003074:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	015a      	lsls	r2, r3, #5
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	4413      	add	r3, r2
 800307e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d155      	bne.n	8003138 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	015a      	lsls	r2, r3, #5
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	4413      	add	r3, r2
 8003094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	78db      	ldrb	r3, [r3, #3]
 80030a6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80030a8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	059b      	lsls	r3, r3, #22
 80030ae:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80030b0:	4313      	orrs	r3, r2
 80030b2:	68ba      	ldr	r2, [r7, #8]
 80030b4:	0151      	lsls	r1, r2, #5
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	440a      	add	r2, r1
 80030ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80030be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030c6:	6013      	str	r3, [r2, #0]
 80030c8:	e036      	b.n	8003138 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030d0:	69da      	ldr	r2, [r3, #28]
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	f003 030f 	and.w	r3, r3, #15
 80030da:	2101      	movs	r1, #1
 80030dc:	fa01 f303 	lsl.w	r3, r1, r3
 80030e0:	041b      	lsls	r3, r3, #16
 80030e2:	68f9      	ldr	r1, [r7, #12]
 80030e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80030e8:	4313      	orrs	r3, r2
 80030ea:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	015a      	lsls	r2, r3, #5
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	4413      	add	r3, r2
 80030f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d11a      	bne.n	8003138 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	015a      	lsls	r2, r3, #5
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	4413      	add	r3, r2
 800310a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	78db      	ldrb	r3, [r3, #3]
 800311c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800311e:	430b      	orrs	r3, r1
 8003120:	4313      	orrs	r3, r2
 8003122:	68ba      	ldr	r2, [r7, #8]
 8003124:	0151      	lsls	r1, r2, #5
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	440a      	add	r2, r1
 800312a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800312e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003132:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003136:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3714      	adds	r7, #20
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
	...

08003148 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003148:	b480      	push	{r7}
 800314a:	b085      	sub	sp, #20
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	785b      	ldrb	r3, [r3, #1]
 8003160:	2b01      	cmp	r3, #1
 8003162:	d161      	bne.n	8003228 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	015a      	lsls	r2, r3, #5
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	4413      	add	r3, r2
 800316c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003176:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800317a:	d11f      	bne.n	80031bc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	015a      	lsls	r2, r3, #5
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	4413      	add	r3, r2
 8003184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68ba      	ldr	r2, [r7, #8]
 800318c:	0151      	lsls	r1, r2, #5
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	440a      	add	r2, r1
 8003192:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003196:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800319a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	015a      	lsls	r2, r3, #5
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	4413      	add	r3, r2
 80031a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68ba      	ldr	r2, [r7, #8]
 80031ac:	0151      	lsls	r1, r2, #5
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	440a      	add	r2, r1
 80031b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80031b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80031ba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	f003 030f 	and.w	r3, r3, #15
 80031cc:	2101      	movs	r1, #1
 80031ce:	fa01 f303 	lsl.w	r3, r1, r3
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	43db      	mvns	r3, r3
 80031d6:	68f9      	ldr	r1, [r7, #12]
 80031d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80031dc:	4013      	ands	r3, r2
 80031de:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031e6:	69da      	ldr	r2, [r3, #28]
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	f003 030f 	and.w	r3, r3, #15
 80031f0:	2101      	movs	r1, #1
 80031f2:	fa01 f303 	lsl.w	r3, r1, r3
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	43db      	mvns	r3, r3
 80031fa:	68f9      	ldr	r1, [r7, #12]
 80031fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003200:	4013      	ands	r3, r2
 8003202:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	015a      	lsls	r2, r3, #5
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	4413      	add	r3, r2
 800320c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	0159      	lsls	r1, r3, #5
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	440b      	add	r3, r1
 800321a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800321e:	4619      	mov	r1, r3
 8003220:	4b35      	ldr	r3, [pc, #212]	; (80032f8 <USB_DeactivateEndpoint+0x1b0>)
 8003222:	4013      	ands	r3, r2
 8003224:	600b      	str	r3, [r1, #0]
 8003226:	e060      	b.n	80032ea <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	015a      	lsls	r2, r3, #5
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	4413      	add	r3, r2
 8003230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800323a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800323e:	d11f      	bne.n	8003280 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	015a      	lsls	r2, r3, #5
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	4413      	add	r3, r2
 8003248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68ba      	ldr	r2, [r7, #8]
 8003250:	0151      	lsls	r1, r2, #5
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	440a      	add	r2, r1
 8003256:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800325a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800325e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	015a      	lsls	r2, r3, #5
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	4413      	add	r3, r2
 8003268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68ba      	ldr	r2, [r7, #8]
 8003270:	0151      	lsls	r1, r2, #5
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	440a      	add	r2, r1
 8003276:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800327a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800327e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003286:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	f003 030f 	and.w	r3, r3, #15
 8003290:	2101      	movs	r1, #1
 8003292:	fa01 f303 	lsl.w	r3, r1, r3
 8003296:	041b      	lsls	r3, r3, #16
 8003298:	43db      	mvns	r3, r3
 800329a:	68f9      	ldr	r1, [r7, #12]
 800329c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80032a0:	4013      	ands	r3, r2
 80032a2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032aa:	69da      	ldr	r2, [r3, #28]
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	f003 030f 	and.w	r3, r3, #15
 80032b4:	2101      	movs	r1, #1
 80032b6:	fa01 f303 	lsl.w	r3, r1, r3
 80032ba:	041b      	lsls	r3, r3, #16
 80032bc:	43db      	mvns	r3, r3
 80032be:	68f9      	ldr	r1, [r7, #12]
 80032c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80032c4:	4013      	ands	r3, r2
 80032c6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	015a      	lsls	r2, r3, #5
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	4413      	add	r3, r2
 80032d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	0159      	lsls	r1, r3, #5
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	440b      	add	r3, r1
 80032de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032e2:	4619      	mov	r1, r3
 80032e4:	4b05      	ldr	r3, [pc, #20]	; (80032fc <USB_DeactivateEndpoint+0x1b4>)
 80032e6:	4013      	ands	r3, r2
 80032e8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3714      	adds	r7, #20
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr
 80032f8:	ec337800 	.word	0xec337800
 80032fc:	eff37800 	.word	0xeff37800

08003300 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b08a      	sub	sp, #40	; 0x28
 8003304:	af02      	add	r7, sp, #8
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	4613      	mov	r3, r2
 800330c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	785b      	ldrb	r3, [r3, #1]
 800331c:	2b01      	cmp	r3, #1
 800331e:	f040 815c 	bne.w	80035da <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d132      	bne.n	8003390 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	015a      	lsls	r2, r3, #5
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	4413      	add	r3, r2
 8003332:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	69ba      	ldr	r2, [r7, #24]
 800333a:	0151      	lsls	r1, r2, #5
 800333c:	69fa      	ldr	r2, [r7, #28]
 800333e:	440a      	add	r2, r1
 8003340:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003344:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003348:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800334c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	015a      	lsls	r2, r3, #5
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	4413      	add	r3, r2
 8003356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	69ba      	ldr	r2, [r7, #24]
 800335e:	0151      	lsls	r1, r2, #5
 8003360:	69fa      	ldr	r2, [r7, #28]
 8003362:	440a      	add	r2, r1
 8003364:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003368:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800336c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	015a      	lsls	r2, r3, #5
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	4413      	add	r3, r2
 8003376:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800337a:	691b      	ldr	r3, [r3, #16]
 800337c:	69ba      	ldr	r2, [r7, #24]
 800337e:	0151      	lsls	r1, r2, #5
 8003380:	69fa      	ldr	r2, [r7, #28]
 8003382:	440a      	add	r2, r1
 8003384:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003388:	0cdb      	lsrs	r3, r3, #19
 800338a:	04db      	lsls	r3, r3, #19
 800338c:	6113      	str	r3, [r2, #16]
 800338e:	e074      	b.n	800347a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	015a      	lsls	r2, r3, #5
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	4413      	add	r3, r2
 8003398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	69ba      	ldr	r2, [r7, #24]
 80033a0:	0151      	lsls	r1, r2, #5
 80033a2:	69fa      	ldr	r2, [r7, #28]
 80033a4:	440a      	add	r2, r1
 80033a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80033aa:	0cdb      	lsrs	r3, r3, #19
 80033ac:	04db      	lsls	r3, r3, #19
 80033ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	015a      	lsls	r2, r3, #5
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	4413      	add	r3, r2
 80033b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	69ba      	ldr	r2, [r7, #24]
 80033c0:	0151      	lsls	r1, r2, #5
 80033c2:	69fa      	ldr	r2, [r7, #28]
 80033c4:	440a      	add	r2, r1
 80033c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80033ca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80033ce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80033d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	015a      	lsls	r2, r3, #5
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	4413      	add	r3, r2
 80033dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033e0:	691a      	ldr	r2, [r3, #16]
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	6959      	ldr	r1, [r3, #20]
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	440b      	add	r3, r1
 80033ec:	1e59      	subs	r1, r3, #1
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80033f6:	04d9      	lsls	r1, r3, #19
 80033f8:	4b9d      	ldr	r3, [pc, #628]	; (8003670 <USB_EPStartXfer+0x370>)
 80033fa:	400b      	ands	r3, r1
 80033fc:	69b9      	ldr	r1, [r7, #24]
 80033fe:	0148      	lsls	r0, r1, #5
 8003400:	69f9      	ldr	r1, [r7, #28]
 8003402:	4401      	add	r1, r0
 8003404:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003408:	4313      	orrs	r3, r2
 800340a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	015a      	lsls	r2, r3, #5
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	4413      	add	r3, r2
 8003414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003418:	691a      	ldr	r2, [r3, #16]
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003422:	69b9      	ldr	r1, [r7, #24]
 8003424:	0148      	lsls	r0, r1, #5
 8003426:	69f9      	ldr	r1, [r7, #28]
 8003428:	4401      	add	r1, r0
 800342a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800342e:	4313      	orrs	r3, r2
 8003430:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	78db      	ldrb	r3, [r3, #3]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d11f      	bne.n	800347a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	015a      	lsls	r2, r3, #5
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	4413      	add	r3, r2
 8003442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003446:	691b      	ldr	r3, [r3, #16]
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	0151      	lsls	r1, r2, #5
 800344c:	69fa      	ldr	r2, [r7, #28]
 800344e:	440a      	add	r2, r1
 8003450:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003454:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003458:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	015a      	lsls	r2, r3, #5
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	4413      	add	r3, r2
 8003462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	0151      	lsls	r1, r2, #5
 800346c:	69fa      	ldr	r2, [r7, #28]
 800346e:	440a      	add	r2, r1
 8003470:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003474:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003478:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800347a:	79fb      	ldrb	r3, [r7, #7]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d14b      	bne.n	8003518 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	691b      	ldr	r3, [r3, #16]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d009      	beq.n	800349c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	015a      	lsls	r2, r3, #5
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	4413      	add	r3, r2
 8003490:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003494:	461a      	mov	r2, r3
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	78db      	ldrb	r3, [r3, #3]
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d128      	bne.n	80034f6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d110      	bne.n	80034d6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	015a      	lsls	r2, r3, #5
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	4413      	add	r3, r2
 80034bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	69ba      	ldr	r2, [r7, #24]
 80034c4:	0151      	lsls	r1, r2, #5
 80034c6:	69fa      	ldr	r2, [r7, #28]
 80034c8:	440a      	add	r2, r1
 80034ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80034d2:	6013      	str	r3, [r2, #0]
 80034d4:	e00f      	b.n	80034f6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	015a      	lsls	r2, r3, #5
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	4413      	add	r3, r2
 80034de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	0151      	lsls	r1, r2, #5
 80034e8:	69fa      	ldr	r2, [r7, #28]
 80034ea:	440a      	add	r2, r1
 80034ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034f4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	015a      	lsls	r2, r3, #5
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	4413      	add	r3, r2
 80034fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	0151      	lsls	r1, r2, #5
 8003508:	69fa      	ldr	r2, [r7, #28]
 800350a:	440a      	add	r2, r1
 800350c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003510:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003514:	6013      	str	r3, [r2, #0]
 8003516:	e12f      	b.n	8003778 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	015a      	lsls	r2, r3, #5
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	4413      	add	r3, r2
 8003520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	69ba      	ldr	r2, [r7, #24]
 8003528:	0151      	lsls	r1, r2, #5
 800352a:	69fa      	ldr	r2, [r7, #28]
 800352c:	440a      	add	r2, r1
 800352e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003532:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003536:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	78db      	ldrb	r3, [r3, #3]
 800353c:	2b01      	cmp	r3, #1
 800353e:	d015      	beq.n	800356c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	695b      	ldr	r3, [r3, #20]
 8003544:	2b00      	cmp	r3, #0
 8003546:	f000 8117 	beq.w	8003778 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003550:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	f003 030f 	and.w	r3, r3, #15
 800355a:	2101      	movs	r1, #1
 800355c:	fa01 f303 	lsl.w	r3, r1, r3
 8003560:	69f9      	ldr	r1, [r7, #28]
 8003562:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003566:	4313      	orrs	r3, r2
 8003568:	634b      	str	r3, [r1, #52]	; 0x34
 800356a:	e105      	b.n	8003778 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003578:	2b00      	cmp	r3, #0
 800357a:	d110      	bne.n	800359e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	015a      	lsls	r2, r3, #5
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	4413      	add	r3, r2
 8003584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	69ba      	ldr	r2, [r7, #24]
 800358c:	0151      	lsls	r1, r2, #5
 800358e:	69fa      	ldr	r2, [r7, #28]
 8003590:	440a      	add	r2, r1
 8003592:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003596:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800359a:	6013      	str	r3, [r2, #0]
 800359c:	e00f      	b.n	80035be <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	015a      	lsls	r2, r3, #5
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	4413      	add	r3, r2
 80035a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	0151      	lsls	r1, r2, #5
 80035b0:	69fa      	ldr	r2, [r7, #28]
 80035b2:	440a      	add	r2, r1
 80035b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035bc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	68d9      	ldr	r1, [r3, #12]
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	781a      	ldrb	r2, [r3, #0]
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	b298      	uxth	r0, r3
 80035cc:	79fb      	ldrb	r3, [r7, #7]
 80035ce:	9300      	str	r3, [sp, #0]
 80035d0:	4603      	mov	r3, r0
 80035d2:	68f8      	ldr	r0, [r7, #12]
 80035d4:	f000 fa2b 	bl	8003a2e <USB_WritePacket>
 80035d8:	e0ce      	b.n	8003778 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	015a      	lsls	r2, r3, #5
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	4413      	add	r3, r2
 80035e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	69ba      	ldr	r2, [r7, #24]
 80035ea:	0151      	lsls	r1, r2, #5
 80035ec:	69fa      	ldr	r2, [r7, #28]
 80035ee:	440a      	add	r2, r1
 80035f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80035f4:	0cdb      	lsrs	r3, r3, #19
 80035f6:	04db      	lsls	r3, r3, #19
 80035f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	015a      	lsls	r2, r3, #5
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	4413      	add	r3, r2
 8003602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003606:	691b      	ldr	r3, [r3, #16]
 8003608:	69ba      	ldr	r2, [r7, #24]
 800360a:	0151      	lsls	r1, r2, #5
 800360c:	69fa      	ldr	r2, [r7, #28]
 800360e:	440a      	add	r2, r1
 8003610:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003614:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003618:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800361c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d126      	bne.n	8003674 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	015a      	lsls	r2, r3, #5
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	4413      	add	r3, r2
 800362e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003632:	691a      	ldr	r2, [r3, #16]
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800363c:	69b9      	ldr	r1, [r7, #24]
 800363e:	0148      	lsls	r0, r1, #5
 8003640:	69f9      	ldr	r1, [r7, #28]
 8003642:	4401      	add	r1, r0
 8003644:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003648:	4313      	orrs	r3, r2
 800364a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	015a      	lsls	r2, r3, #5
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	4413      	add	r3, r2
 8003654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	69ba      	ldr	r2, [r7, #24]
 800365c:	0151      	lsls	r1, r2, #5
 800365e:	69fa      	ldr	r2, [r7, #28]
 8003660:	440a      	add	r2, r1
 8003662:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003666:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800366a:	6113      	str	r3, [r2, #16]
 800366c:	e036      	b.n	80036dc <USB_EPStartXfer+0x3dc>
 800366e:	bf00      	nop
 8003670:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	695a      	ldr	r2, [r3, #20]
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	4413      	add	r3, r2
 800367e:	1e5a      	subs	r2, r3, #1
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	fbb2 f3f3 	udiv	r3, r2, r3
 8003688:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	015a      	lsls	r2, r3, #5
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	4413      	add	r3, r2
 8003692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003696:	691a      	ldr	r2, [r3, #16]
 8003698:	8afb      	ldrh	r3, [r7, #22]
 800369a:	04d9      	lsls	r1, r3, #19
 800369c:	4b39      	ldr	r3, [pc, #228]	; (8003784 <USB_EPStartXfer+0x484>)
 800369e:	400b      	ands	r3, r1
 80036a0:	69b9      	ldr	r1, [r7, #24]
 80036a2:	0148      	lsls	r0, r1, #5
 80036a4:	69f9      	ldr	r1, [r7, #28]
 80036a6:	4401      	add	r1, r0
 80036a8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80036ac:	4313      	orrs	r3, r2
 80036ae:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	015a      	lsls	r2, r3, #5
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	4413      	add	r3, r2
 80036b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036bc:	691a      	ldr	r2, [r3, #16]
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	8af9      	ldrh	r1, [r7, #22]
 80036c4:	fb01 f303 	mul.w	r3, r1, r3
 80036c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036cc:	69b9      	ldr	r1, [r7, #24]
 80036ce:	0148      	lsls	r0, r1, #5
 80036d0:	69f9      	ldr	r1, [r7, #28]
 80036d2:	4401      	add	r1, r0
 80036d4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80036d8:	4313      	orrs	r3, r2
 80036da:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80036dc:	79fb      	ldrb	r3, [r7, #7]
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d10d      	bne.n	80036fe <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d009      	beq.n	80036fe <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	68d9      	ldr	r1, [r3, #12]
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	015a      	lsls	r2, r3, #5
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	4413      	add	r3, r2
 80036f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036fa:	460a      	mov	r2, r1
 80036fc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	78db      	ldrb	r3, [r3, #3]
 8003702:	2b01      	cmp	r3, #1
 8003704:	d128      	bne.n	8003758 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003712:	2b00      	cmp	r3, #0
 8003714:	d110      	bne.n	8003738 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	015a      	lsls	r2, r3, #5
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	4413      	add	r3, r2
 800371e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	0151      	lsls	r1, r2, #5
 8003728:	69fa      	ldr	r2, [r7, #28]
 800372a:	440a      	add	r2, r1
 800372c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003730:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003734:	6013      	str	r3, [r2, #0]
 8003736:	e00f      	b.n	8003758 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	015a      	lsls	r2, r3, #5
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	4413      	add	r3, r2
 8003740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	69ba      	ldr	r2, [r7, #24]
 8003748:	0151      	lsls	r1, r2, #5
 800374a:	69fa      	ldr	r2, [r7, #28]
 800374c:	440a      	add	r2, r1
 800374e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003752:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003756:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	015a      	lsls	r2, r3, #5
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	4413      	add	r3, r2
 8003760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	69ba      	ldr	r2, [r7, #24]
 8003768:	0151      	lsls	r1, r2, #5
 800376a:	69fa      	ldr	r2, [r7, #28]
 800376c:	440a      	add	r2, r1
 800376e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003772:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003776:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3720      	adds	r7, #32
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	1ff80000 	.word	0x1ff80000

08003788 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003788:	b480      	push	{r7}
 800378a:	b087      	sub	sp, #28
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	4613      	mov	r3, r2
 8003794:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	785b      	ldrb	r3, [r3, #1]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	f040 80cd 	bne.w	8003944 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d132      	bne.n	8003818 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	015a      	lsls	r2, r3, #5
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	4413      	add	r3, r2
 80037ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037be:	691b      	ldr	r3, [r3, #16]
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	0151      	lsls	r1, r2, #5
 80037c4:	697a      	ldr	r2, [r7, #20]
 80037c6:	440a      	add	r2, r1
 80037c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037cc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80037d0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80037d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	015a      	lsls	r2, r3, #5
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	4413      	add	r3, r2
 80037de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	693a      	ldr	r2, [r7, #16]
 80037e6:	0151      	lsls	r1, r2, #5
 80037e8:	697a      	ldr	r2, [r7, #20]
 80037ea:	440a      	add	r2, r1
 80037ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80037f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	015a      	lsls	r2, r3, #5
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	4413      	add	r3, r2
 80037fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	693a      	ldr	r2, [r7, #16]
 8003806:	0151      	lsls	r1, r2, #5
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	440a      	add	r2, r1
 800380c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003810:	0cdb      	lsrs	r3, r3, #19
 8003812:	04db      	lsls	r3, r3, #19
 8003814:	6113      	str	r3, [r2, #16]
 8003816:	e04e      	b.n	80038b6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	015a      	lsls	r2, r3, #5
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	4413      	add	r3, r2
 8003820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	693a      	ldr	r2, [r7, #16]
 8003828:	0151      	lsls	r1, r2, #5
 800382a:	697a      	ldr	r2, [r7, #20]
 800382c:	440a      	add	r2, r1
 800382e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003832:	0cdb      	lsrs	r3, r3, #19
 8003834:	04db      	lsls	r3, r3, #19
 8003836:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	015a      	lsls	r2, r3, #5
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	4413      	add	r3, r2
 8003840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	693a      	ldr	r2, [r7, #16]
 8003848:	0151      	lsls	r1, r2, #5
 800384a:	697a      	ldr	r2, [r7, #20]
 800384c:	440a      	add	r2, r1
 800384e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003852:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003856:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800385a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	695a      	ldr	r2, [r3, #20]
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	429a      	cmp	r2, r3
 8003866:	d903      	bls.n	8003870 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	689a      	ldr	r2, [r3, #8]
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	015a      	lsls	r2, r3, #5
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	4413      	add	r3, r2
 8003878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	693a      	ldr	r2, [r7, #16]
 8003880:	0151      	lsls	r1, r2, #5
 8003882:	697a      	ldr	r2, [r7, #20]
 8003884:	440a      	add	r2, r1
 8003886:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800388a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800388e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	015a      	lsls	r2, r3, #5
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	4413      	add	r3, r2
 8003898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800389c:	691a      	ldr	r2, [r3, #16]
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	695b      	ldr	r3, [r3, #20]
 80038a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038a6:	6939      	ldr	r1, [r7, #16]
 80038a8:	0148      	lsls	r0, r1, #5
 80038aa:	6979      	ldr	r1, [r7, #20]
 80038ac:	4401      	add	r1, r0
 80038ae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80038b2:	4313      	orrs	r3, r2
 80038b4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80038b6:	79fb      	ldrb	r3, [r7, #7]
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d11e      	bne.n	80038fa <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d009      	beq.n	80038d8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	015a      	lsls	r2, r3, #5
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	4413      	add	r3, r2
 80038cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038d0:	461a      	mov	r2, r3
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	015a      	lsls	r2, r3, #5
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	4413      	add	r3, r2
 80038e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	0151      	lsls	r1, r2, #5
 80038ea:	697a      	ldr	r2, [r7, #20]
 80038ec:	440a      	add	r2, r1
 80038ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80038f6:	6013      	str	r3, [r2, #0]
 80038f8:	e092      	b.n	8003a20 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	015a      	lsls	r2, r3, #5
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	4413      	add	r3, r2
 8003902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	693a      	ldr	r2, [r7, #16]
 800390a:	0151      	lsls	r1, r2, #5
 800390c:	697a      	ldr	r2, [r7, #20]
 800390e:	440a      	add	r2, r1
 8003910:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003914:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003918:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d07e      	beq.n	8003a20 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003928:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	f003 030f 	and.w	r3, r3, #15
 8003932:	2101      	movs	r1, #1
 8003934:	fa01 f303 	lsl.w	r3, r1, r3
 8003938:	6979      	ldr	r1, [r7, #20]
 800393a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800393e:	4313      	orrs	r3, r2
 8003940:	634b      	str	r3, [r1, #52]	; 0x34
 8003942:	e06d      	b.n	8003a20 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	015a      	lsls	r2, r3, #5
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	4413      	add	r3, r2
 800394c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	0151      	lsls	r1, r2, #5
 8003956:	697a      	ldr	r2, [r7, #20]
 8003958:	440a      	add	r2, r1
 800395a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800395e:	0cdb      	lsrs	r3, r3, #19
 8003960:	04db      	lsls	r3, r3, #19
 8003962:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	015a      	lsls	r2, r3, #5
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	4413      	add	r3, r2
 800396c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	693a      	ldr	r2, [r7, #16]
 8003974:	0151      	lsls	r1, r2, #5
 8003976:	697a      	ldr	r2, [r7, #20]
 8003978:	440a      	add	r2, r1
 800397a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800397e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003982:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003986:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	695b      	ldr	r3, [r3, #20]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d003      	beq.n	8003998 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	689a      	ldr	r2, [r3, #8]
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	015a      	lsls	r2, r3, #5
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	4413      	add	r3, r2
 80039a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	0151      	lsls	r1, r2, #5
 80039aa:	697a      	ldr	r2, [r7, #20]
 80039ac:	440a      	add	r2, r1
 80039ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80039b6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	015a      	lsls	r2, r3, #5
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	4413      	add	r3, r2
 80039c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039c4:	691a      	ldr	r2, [r3, #16]
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039ce:	6939      	ldr	r1, [r7, #16]
 80039d0:	0148      	lsls	r0, r1, #5
 80039d2:	6979      	ldr	r1, [r7, #20]
 80039d4:	4401      	add	r1, r0
 80039d6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80039da:	4313      	orrs	r3, r2
 80039dc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80039de:	79fb      	ldrb	r3, [r7, #7]
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d10d      	bne.n	8003a00 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d009      	beq.n	8003a00 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	68d9      	ldr	r1, [r3, #12]
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	015a      	lsls	r2, r3, #5
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	4413      	add	r3, r2
 80039f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039fc:	460a      	mov	r2, r1
 80039fe:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	015a      	lsls	r2, r3, #5
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	4413      	add	r3, r2
 8003a08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	0151      	lsls	r1, r2, #5
 8003a12:	697a      	ldr	r2, [r7, #20]
 8003a14:	440a      	add	r2, r1
 8003a16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a1a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003a1e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	371c      	adds	r7, #28
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr

08003a2e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003a2e:	b480      	push	{r7}
 8003a30:	b089      	sub	sp, #36	; 0x24
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	60f8      	str	r0, [r7, #12]
 8003a36:	60b9      	str	r1, [r7, #8]
 8003a38:	4611      	mov	r1, r2
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	71fb      	strb	r3, [r7, #7]
 8003a40:	4613      	mov	r3, r2
 8003a42:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8003a4c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d11a      	bne.n	8003a8a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003a54:	88bb      	ldrh	r3, [r7, #4]
 8003a56:	3303      	adds	r3, #3
 8003a58:	089b      	lsrs	r3, r3, #2
 8003a5a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	61bb      	str	r3, [r7, #24]
 8003a60:	e00f      	b.n	8003a82 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003a62:	79fb      	ldrb	r3, [r7, #7]
 8003a64:	031a      	lsls	r2, r3, #12
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	4413      	add	r3, r2
 8003a6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a6e:	461a      	mov	r2, r3
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	3304      	adds	r3, #4
 8003a7a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	3301      	adds	r3, #1
 8003a80:	61bb      	str	r3, [r7, #24]
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d3eb      	bcc.n	8003a62 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3724      	adds	r7, #36	; 0x24
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b089      	sub	sp, #36	; 0x24
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8003aae:	88fb      	ldrh	r3, [r7, #6]
 8003ab0:	3303      	adds	r3, #3
 8003ab2:	089b      	lsrs	r3, r3, #2
 8003ab4:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	61bb      	str	r3, [r7, #24]
 8003aba:	e00b      	b.n	8003ad4 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	601a      	str	r2, [r3, #0]
    pDest++;
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	3304      	adds	r3, #4
 8003acc:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	61bb      	str	r3, [r7, #24]
 8003ad4:	69ba      	ldr	r2, [r7, #24]
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d3ef      	bcc.n	8003abc <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8003adc:	69fb      	ldr	r3, [r7, #28]
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3724      	adds	r7, #36	; 0x24
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr

08003aea <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003aea:	b480      	push	{r7}
 8003aec:	b085      	sub	sp, #20
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
 8003af2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	785b      	ldrb	r3, [r3, #1]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d12c      	bne.n	8003b60 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	015a      	lsls	r2, r3, #5
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	db12      	blt.n	8003b3e <USB_EPSetStall+0x54>
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00f      	beq.n	8003b3e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	015a      	lsls	r2, r3, #5
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	4413      	add	r3, r2
 8003b26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68ba      	ldr	r2, [r7, #8]
 8003b2e:	0151      	lsls	r1, r2, #5
 8003b30:	68fa      	ldr	r2, [r7, #12]
 8003b32:	440a      	add	r2, r1
 8003b34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b38:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003b3c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	015a      	lsls	r2, r3, #5
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	4413      	add	r3, r2
 8003b46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	68ba      	ldr	r2, [r7, #8]
 8003b4e:	0151      	lsls	r1, r2, #5
 8003b50:	68fa      	ldr	r2, [r7, #12]
 8003b52:	440a      	add	r2, r1
 8003b54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b5c:	6013      	str	r3, [r2, #0]
 8003b5e:	e02b      	b.n	8003bb8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	015a      	lsls	r2, r3, #5
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	4413      	add	r3, r2
 8003b68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	db12      	blt.n	8003b98 <USB_EPSetStall+0xae>
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d00f      	beq.n	8003b98 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	015a      	lsls	r2, r3, #5
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	4413      	add	r3, r2
 8003b80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68ba      	ldr	r2, [r7, #8]
 8003b88:	0151      	lsls	r1, r2, #5
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	440a      	add	r2, r1
 8003b8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b92:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003b96:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	015a      	lsls	r2, r3, #5
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	68ba      	ldr	r2, [r7, #8]
 8003ba8:	0151      	lsls	r1, r2, #5
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	440a      	add	r2, r1
 8003bae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bb2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003bb6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3714      	adds	r7, #20
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr

08003bc6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003bc6:	b480      	push	{r7}
 8003bc8:	b085      	sub	sp, #20
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
 8003bce:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	785b      	ldrb	r3, [r3, #1]
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d128      	bne.n	8003c34 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	015a      	lsls	r2, r3, #5
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	4413      	add	r3, r2
 8003bea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	68ba      	ldr	r2, [r7, #8]
 8003bf2:	0151      	lsls	r1, r2, #5
 8003bf4:	68fa      	ldr	r2, [r7, #12]
 8003bf6:	440a      	add	r2, r1
 8003bf8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bfc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c00:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	78db      	ldrb	r3, [r3, #3]
 8003c06:	2b03      	cmp	r3, #3
 8003c08:	d003      	beq.n	8003c12 <USB_EPClearStall+0x4c>
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	78db      	ldrb	r3, [r3, #3]
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d138      	bne.n	8003c84 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	015a      	lsls	r2, r3, #5
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	4413      	add	r3, r2
 8003c1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68ba      	ldr	r2, [r7, #8]
 8003c22:	0151      	lsls	r1, r2, #5
 8003c24:	68fa      	ldr	r2, [r7, #12]
 8003c26:	440a      	add	r2, r1
 8003c28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c30:	6013      	str	r3, [r2, #0]
 8003c32:	e027      	b.n	8003c84 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	015a      	lsls	r2, r3, #5
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68ba      	ldr	r2, [r7, #8]
 8003c44:	0151      	lsls	r1, r2, #5
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	440a      	add	r2, r1
 8003c4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c4e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c52:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	78db      	ldrb	r3, [r3, #3]
 8003c58:	2b03      	cmp	r3, #3
 8003c5a:	d003      	beq.n	8003c64 <USB_EPClearStall+0x9e>
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	78db      	ldrb	r3, [r3, #3]
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d10f      	bne.n	8003c84 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	015a      	lsls	r2, r3, #5
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	4413      	add	r3, r2
 8003c6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68ba      	ldr	r2, [r7, #8]
 8003c74:	0151      	lsls	r1, r2, #5
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	440a      	add	r2, r1
 8003c7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c82:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3714      	adds	r7, #20
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr

08003c92 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8003c92:	b480      	push	{r7}
 8003c94:	b085      	sub	sp, #20
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68fa      	ldr	r2, [r7, #12]
 8003cac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cb0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003cb4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	78fb      	ldrb	r3, [r7, #3]
 8003cc0:	011b      	lsls	r3, r3, #4
 8003cc2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8003cc6:	68f9      	ldr	r1, [r7, #12]
 8003cc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3714      	adds	r7, #20
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr

08003cde <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003cde:	b480      	push	{r7}
 8003ce0:	b085      	sub	sp, #20
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003cf8:	f023 0303 	bic.w	r3, r3, #3
 8003cfc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	68fa      	ldr	r2, [r7, #12]
 8003d08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d0c:	f023 0302 	bic.w	r3, r3, #2
 8003d10:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003d12:	2300      	movs	r3, #0
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3714      	adds	r7, #20
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b085      	sub	sp, #20
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68fa      	ldr	r2, [r7, #12]
 8003d36:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003d3a:	f023 0303 	bic.w	r3, r3, #3
 8003d3e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d4e:	f043 0302 	orr.w	r3, r3, #2
 8003d52:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3714      	adds	r7, #20
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr

08003d62 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8003d62:	b480      	push	{r7}
 8003d64:	b085      	sub	sp, #20
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	699b      	ldr	r3, [r3, #24]
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	4013      	ands	r3, r2
 8003d78:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3714      	adds	r7, #20
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d9a:	699b      	ldr	r3, [r3, #24]
 8003d9c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003da4:	69db      	ldr	r3, [r3, #28]
 8003da6:	68ba      	ldr	r2, [r7, #8]
 8003da8:	4013      	ands	r3, r2
 8003daa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	0c1b      	lsrs	r3, r3, #16
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3714      	adds	r7, #20
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b085      	sub	sp, #20
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dd8:	69db      	ldr	r3, [r3, #28]
 8003dda:	68ba      	ldr	r2, [r7, #8]
 8003ddc:	4013      	ands	r3, r2
 8003dde:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	b29b      	uxth	r3, r3
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3714      	adds	r7, #20
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b085      	sub	sp, #20
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	460b      	mov	r3, r1
 8003dfa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8003e00:	78fb      	ldrb	r3, [r7, #3]
 8003e02:	015a      	lsls	r2, r3, #5
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	4413      	add	r3, r2
 8003e08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e16:	695b      	ldr	r3, [r3, #20]
 8003e18:	68ba      	ldr	r2, [r7, #8]
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003e1e:	68bb      	ldr	r3, [r7, #8]
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3714      	adds	r7, #20
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b087      	sub	sp, #28
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	460b      	mov	r3, r1
 8003e36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e4e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8003e50:	78fb      	ldrb	r3, [r7, #3]
 8003e52:	f003 030f 	and.w	r3, r3, #15
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	fa22 f303 	lsr.w	r3, r2, r3
 8003e5c:	01db      	lsls	r3, r3, #7
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	693a      	ldr	r2, [r7, #16]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8003e66:	78fb      	ldrb	r3, [r7, #3]
 8003e68:	015a      	lsls	r2, r3, #5
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	4413      	add	r3, r2
 8003e6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	4013      	ands	r3, r2
 8003e78:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003e7a:	68bb      	ldr	r3, [r7, #8]
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	371c      	adds	r7, #28
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	695b      	ldr	r3, [r3, #20]
 8003e94:	f003 0301 	and.w	r3, r3, #1
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b085      	sub	sp, #20
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ebe:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003ec2:	f023 0307 	bic.w	r3, r3, #7
 8003ec6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	68fa      	ldr	r2, [r7, #12]
 8003ed2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ed6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eda:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3714      	adds	r7, #20
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
	...

08003eec <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b087      	sub	sp, #28
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	607a      	str	r2, [r7, #4]
 8003ef8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	333c      	adds	r3, #60	; 0x3c
 8003f02:	3304      	adds	r3, #4
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	4a26      	ldr	r2, [pc, #152]	; (8003fa4 <USB_EP0_OutStart+0xb8>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d90a      	bls.n	8003f26 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f20:	d101      	bne.n	8003f26 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8003f22:	2300      	movs	r3, #0
 8003f24:	e037      	b.n	8003f96 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	2300      	movs	r3, #0
 8003f30:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	697a      	ldr	r2, [r7, #20]
 8003f3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003f44:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	697a      	ldr	r2, [r7, #20]
 8003f50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f54:	f043 0318 	orr.w	r3, r3, #24
 8003f58:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	697a      	ldr	r2, [r7, #20]
 8003f64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f68:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8003f6c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8003f6e:	7afb      	ldrb	r3, [r7, #11]
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d10f      	bne.n	8003f94 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	697a      	ldr	r2, [r7, #20]
 8003f8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f8e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8003f92:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	371c      	adds	r7, #28
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop
 8003fa4:	4f54300a 	.word	0x4f54300a

08003fa8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	60fb      	str	r3, [r7, #12]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	4a13      	ldr	r2, [pc, #76]	; (800400c <USB_CoreReset+0x64>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d901      	bls.n	8003fc6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e01b      	b.n	8003ffe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	daf2      	bge.n	8003fb4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	f043 0201 	orr.w	r2, r3, #1
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	60fb      	str	r3, [r7, #12]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	4a09      	ldr	r2, [pc, #36]	; (800400c <USB_CoreReset+0x64>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d901      	bls.n	8003ff0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e006      	b.n	8003ffe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	691b      	ldr	r3, [r3, #16]
 8003ff4:	f003 0301 	and.w	r3, r3, #1
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d0f0      	beq.n	8003fde <USB_CoreReset+0x36>

  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3714      	adds	r7, #20
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	00030d40 	.word	0x00030d40

08004010 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	460b      	mov	r3, r1
 800401a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 800401c:	2054      	movs	r0, #84	; 0x54
 800401e:	f001 ffdf 	bl	8005fe0 <USBD_static_malloc>
 8004022:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d105      	bne.n	8004036 <USBD_CUSTOM_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004032:	2302      	movs	r3, #2
 8004034:	e039      	b.n	80040aa <USBD_CUSTOM_HID_Init+0x9a>
  }

  pdev->pClassData = (void *)hhid;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	68fa      	ldr	r2, [r7, #12]
 800403a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	7c1b      	ldrb	r3, [r3, #16]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d107      	bne.n	8004056 <USBD_CUSTOM_HID_Init+0x46>
  {
    pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2205      	movs	r2, #5
 800404a:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2205      	movs	r2, #5
 8004050:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
 8004054:	e006      	b.n	8004064 <USBD_CUSTOM_HID_Init+0x54>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2205      	movs	r2, #5
 800405a:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2205      	movs	r2, #5
 8004060:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8004064:	2340      	movs	r3, #64	; 0x40
 8004066:	2203      	movs	r2, #3
 8004068:	2181      	movs	r1, #129	; 0x81
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f001 fea7 	bl	8005dbe <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8004076:	2340      	movs	r3, #64	; 0x40
 8004078:	2203      	movs	r2, #3
 800407a:	2101      	movs	r1, #1
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f001 fe9e 	bl	8005dbe <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2201      	movs	r2, #1
 8004086:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  hhid->state = CUSTOM_HID_IDLE;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	2340      	movs	r3, #64	; 0x40
 80040a0:	2101      	movs	r1, #1
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f001 ff7a 	bl	8005f9c <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3710      	adds	r7, #16
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b082      	sub	sp, #8
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
 80040ba:	460b      	mov	r3, r1
 80040bc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 80040be:	2181      	movs	r1, #129	; 0x81
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f001 fea2 	bl	8005e0a <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 80040d2:	2101      	movs	r1, #1
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f001 fe98 	bl	8005e0a <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = 0U;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00e      	beq.n	8004112 <USBD_CUSTOM_HID_DeInit+0x60>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004104:	4618      	mov	r0, r3
 8004106:	f001 ff79 	bl	8005ffc <USBD_static_free>
    pdev->pClassData = NULL;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004112:	2300      	movs	r3, #0
}
 8004114:	4618      	mov	r0, r3
 8004116:	3708      	adds	r7, #8
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b088      	sub	sp, #32
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800412c:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800412e:	2300      	movs	r3, #0
 8004130:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 8004132:	2300      	movs	r3, #0
 8004134:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8004136:	2300      	movs	r3, #0
 8004138:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800413a:	2300      	movs	r3, #0
 800413c:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d101      	bne.n	8004148 <USBD_CUSTOM_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8004144:	2303      	movs	r3, #3
 8004146:	e0ed      	b.n	8004324 <USBD_CUSTOM_HID_Setup+0x208>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004150:	2b00      	cmp	r3, #0
 8004152:	d052      	beq.n	80041fa <USBD_CUSTOM_HID_Setup+0xde>
 8004154:	2b20      	cmp	r3, #32
 8004156:	f040 80dd 	bne.w	8004314 <USBD_CUSTOM_HID_Setup+0x1f8>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	785b      	ldrb	r3, [r3, #1]
 800415e:	3b02      	subs	r3, #2
 8004160:	2b09      	cmp	r3, #9
 8004162:	d842      	bhi.n	80041ea <USBD_CUSTOM_HID_Setup+0xce>
 8004164:	a201      	add	r2, pc, #4	; (adr r2, 800416c <USBD_CUSTOM_HID_Setup+0x50>)
 8004166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800416a:	bf00      	nop
 800416c:	080041c5 	.word	0x080041c5
 8004170:	080041a3 	.word	0x080041a3
 8004174:	080041eb 	.word	0x080041eb
 8004178:	080041eb 	.word	0x080041eb
 800417c:	080041eb 	.word	0x080041eb
 8004180:	080041eb 	.word	0x080041eb
 8004184:	080041eb 	.word	0x080041eb
 8004188:	080041d5 	.word	0x080041d5
 800418c:	080041b3 	.word	0x080041b3
 8004190:	08004195 	.word	0x08004195
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	885b      	ldrh	r3, [r3, #2]
 8004198:	b2db      	uxtb	r3, r3
 800419a:	461a      	mov	r2, r3
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 80041a0:	e02a      	b.n	80041f8 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	3340      	adds	r3, #64	; 0x40
 80041a6:	2201      	movs	r2, #1
 80041a8:	4619      	mov	r1, r3
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f001 fa83 	bl	80056b6 <USBD_CtlSendData>
          break;
 80041b0:	e022      	b.n	80041f8 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	885b      	ldrh	r3, [r3, #2]
 80041b6:	0a1b      	lsrs	r3, r3, #8
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	461a      	mov	r2, r3
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	645a      	str	r2, [r3, #68]	; 0x44
          break;
 80041c2:	e019      	b.n	80041f8 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	3344      	adds	r3, #68	; 0x44
 80041c8:	2201      	movs	r2, #1
 80041ca:	4619      	mov	r1, r3
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f001 fa72 	bl	80056b6 <USBD_CtlSendData>
          break;
 80041d2:	e011      	b.n	80041f8 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	2201      	movs	r2, #1
 80041d8:	64da      	str	r2, [r3, #76]	; 0x4c
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 80041da:	6939      	ldr	r1, [r7, #16]
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	88db      	ldrh	r3, [r3, #6]
 80041e0:	461a      	mov	r2, r3
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f001 fa93 	bl	800570e <USBD_CtlPrepareRx>
          break;
 80041e8:	e006      	b.n	80041f8 <USBD_CUSTOM_HID_Setup+0xdc>

        default:
          USBD_CtlError(pdev, req);
 80041ea:	6839      	ldr	r1, [r7, #0]
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f001 f9f1 	bl	80055d4 <USBD_CtlError>
          ret = USBD_FAIL;
 80041f2:	2303      	movs	r3, #3
 80041f4:	75fb      	strb	r3, [r7, #23]
          break;
 80041f6:	bf00      	nop
      }
      break;
 80041f8:	e093      	b.n	8004322 <USBD_CUSTOM_HID_Setup+0x206>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	785b      	ldrb	r3, [r3, #1]
 80041fe:	2b0b      	cmp	r3, #11
 8004200:	d87f      	bhi.n	8004302 <USBD_CUSTOM_HID_Setup+0x1e6>
 8004202:	a201      	add	r2, pc, #4	; (adr r2, 8004208 <USBD_CUSTOM_HID_Setup+0xec>)
 8004204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004208:	08004239 	.word	0x08004239
 800420c:	08004311 	.word	0x08004311
 8004210:	08004303 	.word	0x08004303
 8004214:	08004303 	.word	0x08004303
 8004218:	08004303 	.word	0x08004303
 800421c:	08004303 	.word	0x08004303
 8004220:	08004263 	.word	0x08004263
 8004224:	08004303 	.word	0x08004303
 8004228:	08004303 	.word	0x08004303
 800422c:	08004303 	.word	0x08004303
 8004230:	080042b1 	.word	0x080042b1
 8004234:	080042db 	.word	0x080042db
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800423e:	b2db      	uxtb	r3, r3
 8004240:	2b03      	cmp	r3, #3
 8004242:	d107      	bne.n	8004254 <USBD_CUSTOM_HID_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004244:	f107 030e 	add.w	r3, r7, #14
 8004248:	2202      	movs	r2, #2
 800424a:	4619      	mov	r1, r3
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f001 fa32 	bl	80056b6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004252:	e05e      	b.n	8004312 <USBD_CUSTOM_HID_Setup+0x1f6>
            USBD_CtlError(pdev, req);
 8004254:	6839      	ldr	r1, [r7, #0]
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f001 f9bc 	bl	80055d4 <USBD_CtlError>
            ret = USBD_FAIL;
 800425c:	2303      	movs	r3, #3
 800425e:	75fb      	strb	r3, [r7, #23]
          break;
 8004260:	e057      	b.n	8004312 <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	885b      	ldrh	r3, [r3, #2]
 8004266:	0a1b      	lsrs	r3, r3, #8
 8004268:	b29b      	uxth	r3, r3
 800426a:	2b22      	cmp	r3, #34	; 0x22
 800426c:	d10b      	bne.n	8004286 <USBD_CUSTOM_HID_Setup+0x16a>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	88db      	ldrh	r3, [r3, #6]
 8004272:	2b40      	cmp	r3, #64	; 0x40
 8004274:	bf28      	it	cs
 8004276:	2340      	movcs	r3, #64	; 0x40
 8004278:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	61bb      	str	r3, [r7, #24]
 8004284:	e00d      	b.n	80042a2 <USBD_CUSTOM_HID_Setup+0x186>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	885b      	ldrh	r3, [r3, #2]
 800428a:	0a1b      	lsrs	r3, r3, #8
 800428c:	b29b      	uxth	r3, r3
 800428e:	2b21      	cmp	r3, #33	; 0x21
 8004290:	d107      	bne.n	80042a2 <USBD_CUSTOM_HID_Setup+0x186>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8004292:	4b26      	ldr	r3, [pc, #152]	; (800432c <USBD_CUSTOM_HID_Setup+0x210>)
 8004294:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	88db      	ldrh	r3, [r3, #6]
 800429a:	2b40      	cmp	r3, #64	; 0x40
 800429c:	bf28      	it	cs
 800429e:	2340      	movcs	r3, #64	; 0x40
 80042a0:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 80042a2:	8bfb      	ldrh	r3, [r7, #30]
 80042a4:	461a      	mov	r2, r3
 80042a6:	69b9      	ldr	r1, [r7, #24]
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f001 fa04 	bl	80056b6 <USBD_CtlSendData>
          break;
 80042ae:	e030      	b.n	8004312 <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	2b03      	cmp	r3, #3
 80042ba:	d107      	bne.n	80042cc <USBD_CUSTOM_HID_Setup+0x1b0>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	3348      	adds	r3, #72	; 0x48
 80042c0:	2201      	movs	r2, #1
 80042c2:	4619      	mov	r1, r3
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f001 f9f6 	bl	80056b6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80042ca:	e022      	b.n	8004312 <USBD_CUSTOM_HID_Setup+0x1f6>
            USBD_CtlError(pdev, req);
 80042cc:	6839      	ldr	r1, [r7, #0]
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f001 f980 	bl	80055d4 <USBD_CtlError>
            ret = USBD_FAIL;
 80042d4:	2303      	movs	r3, #3
 80042d6:	75fb      	strb	r3, [r7, #23]
          break;
 80042d8:	e01b      	b.n	8004312 <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	2b03      	cmp	r3, #3
 80042e4:	d106      	bne.n	80042f4 <USBD_CUSTOM_HID_Setup+0x1d8>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	885b      	ldrh	r3, [r3, #2]
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	461a      	mov	r2, r3
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	649a      	str	r2, [r3, #72]	; 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80042f2:	e00e      	b.n	8004312 <USBD_CUSTOM_HID_Setup+0x1f6>
            USBD_CtlError(pdev, req);
 80042f4:	6839      	ldr	r1, [r7, #0]
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f001 f96c 	bl	80055d4 <USBD_CtlError>
            ret = USBD_FAIL;
 80042fc:	2303      	movs	r3, #3
 80042fe:	75fb      	strb	r3, [r7, #23]
          break;
 8004300:	e007      	b.n	8004312 <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004302:	6839      	ldr	r1, [r7, #0]
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f001 f965 	bl	80055d4 <USBD_CtlError>
          ret = USBD_FAIL;
 800430a:	2303      	movs	r3, #3
 800430c:	75fb      	strb	r3, [r7, #23]
          break;
 800430e:	e000      	b.n	8004312 <USBD_CUSTOM_HID_Setup+0x1f6>
          break;
 8004310:	bf00      	nop
      }
      break;
 8004312:	e006      	b.n	8004322 <USBD_CUSTOM_HID_Setup+0x206>

    default:
      USBD_CtlError(pdev, req);
 8004314:	6839      	ldr	r1, [r7, #0]
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f001 f95c 	bl	80055d4 <USBD_CtlError>
      ret = USBD_FAIL;
 800431c:	2303      	movs	r3, #3
 800431e:	75fb      	strb	r3, [r7, #23]
      break;
 8004320:	bf00      	nop
  }
  return (uint8_t)ret;
 8004322:	7dfb      	ldrb	r3, [r7, #23]
}
 8004324:	4618      	mov	r0, r3
 8004326:	3720      	adds	r7, #32
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	200000cc 	.word	0x200000cc

08004330 <USBD_CUSTOM_HID_SendReport>:
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b086      	sub	sp, #24
 8004334:	af00      	add	r7, sp, #0
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	4613      	mov	r3, r2
 800433c:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004344:	2b00      	cmp	r3, #0
 8004346:	d101      	bne.n	800434c <USBD_CUSTOM_HID_SendReport+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8004348:	2303      	movs	r3, #3
 800434a:	e01c      	b.n	8004386 <USBD_CUSTOM_HID_SendReport+0x56>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004352:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800435a:	b2db      	uxtb	r3, r3
 800435c:	2b03      	cmp	r3, #3
 800435e:	d111      	bne.n	8004384 <USBD_CUSTOM_HID_SendReport+0x54>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004366:	2b00      	cmp	r3, #0
 8004368:	d10a      	bne.n	8004380 <USBD_CUSTOM_HID_SendReport+0x50>
    {
      hhid->state = CUSTOM_HID_BUSY;
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	2201      	movs	r2, #1
 800436e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 8004372:	88fb      	ldrh	r3, [r7, #6]
 8004374:	68ba      	ldr	r2, [r7, #8]
 8004376:	2181      	movs	r1, #129	; 0x81
 8004378:	68f8      	ldr	r0, [r7, #12]
 800437a:	f001 fdee 	bl	8005f5a <USBD_LL_Transmit>
 800437e:	e001      	b.n	8004384 <USBD_CUSTOM_HID_SendReport+0x54>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 8004380:	2301      	movs	r3, #1
 8004382:	e000      	b.n	8004386 <USBD_CUSTOM_HID_SendReport+0x56>
    }
  }
  return (uint8_t)USBD_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3718      	adds	r7, #24
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
	...

08004390 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2229      	movs	r2, #41	; 0x29
 800439c:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgFSDesc;
 800439e:	4b03      	ldr	r3, [pc, #12]	; (80043ac <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	370c      	adds	r7, #12
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr
 80043ac:	20000048 	.word	0x20000048

080043b0 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2229      	movs	r2, #41	; 0x29
 80043bc:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgHSDesc;
 80043be:	4b03      	ldr	r3, [pc, #12]	; (80043cc <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr
 80043cc:	20000074 	.word	0x20000074

080043d0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2229      	movs	r2, #41	; 0x29
 80043dc:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 80043de:	4b03      	ldr	r3, [pc, #12]	; (80043ec <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr
 80043ec:	200000a0 	.word	0x200000a0

080043f0 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	460b      	mov	r3, r1
 80043fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004402:	2200      	movs	r2, #0
 8004404:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return (uint8_t)USBD_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	370c      	adds	r7, #12
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr

08004416 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004416:	b580      	push	{r7, lr}
 8004418:	b084      	sub	sp, #16
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
 800441e:	460b      	mov	r3, r1
 8004420:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004428:	2b00      	cmp	r3, #0
 800442a:	d101      	bne.n	8004430 <USBD_CUSTOM_HID_DataOut+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800442c:	2303      	movs	r3, #3
 800442e:	e00e      	b.n	800444e <USBD_CUSTOM_HID_DataOut+0x38>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004436:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	7810      	ldrb	r0, [r2, #0]
 8004444:	68fa      	ldr	r2, [r7, #12]
 8004446:	7852      	ldrb	r2, [r2, #1]
 8004448:	4611      	mov	r1, r2
 800444a:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3710      	adds	r7, #16
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}

08004456 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004456:	b580      	push	{r7, lr}
 8004458:	b084      	sub	sp, #16
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004464:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d101      	bne.n	8004470 <USBD_CUSTOM_HID_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800446c:	2303      	movs	r3, #3
 800446e:	e011      	b.n	8004494 <USBD_CUSTOM_HID_EP0_RxReady+0x3e>
  }

  if (hhid->IsReportAvailable == 1U)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004474:	2b01      	cmp	r3, #1
 8004476:	d10c      	bne.n	8004492 <USBD_CUSTOM_HID_EP0_RxReady+0x3c>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	68fa      	ldr	r2, [r7, #12]
 8004482:	7810      	ldrb	r0, [r2, #0]
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	7852      	ldrb	r2, [r2, #1]
 8004488:	4611      	mov	r1, r2
 800448a:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2200      	movs	r2, #0
 8004490:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return (uint8_t)USBD_OK;
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	3710      	adds	r7, #16
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	220a      	movs	r2, #10
 80044a8:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 80044aa:	4b03      	ldr	r3, [pc, #12]	; (80044b8 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr
 80044b8:	2000010c 	.word	0x2000010c

080044bc <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d101      	bne.n	80044d0 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80044cc:	2303      	movs	r3, #3
 80044ce:	e004      	b.n	80044da <USBD_CUSTOM_HID_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	683a      	ldr	r2, [r7, #0]
 80044d4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	370c      	adds	r7, #12
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr

080044e6 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80044e6:	b580      	push	{r7, lr}
 80044e8:	b086      	sub	sp, #24
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	60f8      	str	r0, [r7, #12]
 80044ee:	60b9      	str	r1, [r7, #8]
 80044f0:	4613      	mov	r3, r2
 80044f2:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d101      	bne.n	80044fe <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e01f      	b.n	800453e <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2200      	movs	r2, #0
 8004502:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2200      	movs	r2, #0
 800450a:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2200      	movs	r2, #0
 8004512:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d003      	beq.n	8004524 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	68ba      	ldr	r2, [r7, #8]
 8004520:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	79fa      	ldrb	r2, [r7, #7]
 8004530:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004532:	68f8      	ldr	r0, [r7, #12]
 8004534:	f001 fbdc 	bl	8005cf0 <USBD_LL_Init>
 8004538:	4603      	mov	r3, r0
 800453a:	75fb      	strb	r3, [r7, #23]

  return ret;
 800453c:	7dfb      	ldrb	r3, [r7, #23]
}
 800453e:	4618      	mov	r0, r3
 8004540:	3718      	adds	r7, #24
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004546:	b580      	push	{r7, lr}
 8004548:	b084      	sub	sp, #16
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
 800454e:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004550:	2300      	movs	r3, #0
 8004552:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d101      	bne.n	800455e <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800455a:	2303      	movs	r3, #3
 800455c:	e016      	b.n	800458c <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	683a      	ldr	r2, [r7, #0]
 8004562:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800456c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00b      	beq.n	800458a <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800457a:	f107 020e 	add.w	r2, r7, #14
 800457e:	4610      	mov	r0, r2
 8004580:	4798      	blx	r3
 8004582:	4602      	mov	r2, r0
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	3710      	adds	r7, #16
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f001 fbf3 	bl	8005d88 <USBD_LL_Start>
 80045a2:	4603      	mov	r3, r0
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3708      	adds	r7, #8
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	370c      	adds	r7, #12
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr

080045c2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80045c2:	b580      	push	{r7, lr}
 80045c4:	b084      	sub	sp, #16
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
 80045ca:	460b      	mov	r3, r1
 80045cc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80045ce:	2303      	movs	r3, #3
 80045d0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d009      	beq.n	80045f0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	78fa      	ldrb	r2, [r7, #3]
 80045e6:	4611      	mov	r1, r2
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	4798      	blx	r3
 80045ec:	4603      	mov	r3, r0
 80045ee:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80045f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3710      	adds	r7, #16
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}

080045fa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80045fa:	b580      	push	{r7, lr}
 80045fc:	b082      	sub	sp, #8
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
 8004602:	460b      	mov	r3, r1
 8004604:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800460c:	2b00      	cmp	r3, #0
 800460e:	d007      	beq.n	8004620 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	78fa      	ldrb	r2, [r7, #3]
 800461a:	4611      	mov	r1, r2
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	4798      	blx	r3
  }

  return USBD_OK;
 8004620:	2300      	movs	r3, #0
}
 8004622:	4618      	mov	r0, r3
 8004624:	3708      	adds	r7, #8
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}

0800462a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800462a:	b580      	push	{r7, lr}
 800462c:	b084      	sub	sp, #16
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
 8004632:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800463a:	6839      	ldr	r1, [r7, #0]
 800463c:	4618      	mov	r0, r3
 800463e:	f000 ff8f 	bl	8005560 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2201      	movs	r2, #1
 8004646:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8004650:	461a      	mov	r2, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800465e:	f003 031f 	and.w	r3, r3, #31
 8004662:	2b02      	cmp	r3, #2
 8004664:	d01a      	beq.n	800469c <USBD_LL_SetupStage+0x72>
 8004666:	2b02      	cmp	r3, #2
 8004668:	d822      	bhi.n	80046b0 <USBD_LL_SetupStage+0x86>
 800466a:	2b00      	cmp	r3, #0
 800466c:	d002      	beq.n	8004674 <USBD_LL_SetupStage+0x4a>
 800466e:	2b01      	cmp	r3, #1
 8004670:	d00a      	beq.n	8004688 <USBD_LL_SetupStage+0x5e>
 8004672:	e01d      	b.n	80046b0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800467a:	4619      	mov	r1, r3
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f000 fa61 	bl	8004b44 <USBD_StdDevReq>
 8004682:	4603      	mov	r3, r0
 8004684:	73fb      	strb	r3, [r7, #15]
      break;
 8004686:	e020      	b.n	80046ca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800468e:	4619      	mov	r1, r3
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f000 fac5 	bl	8004c20 <USBD_StdItfReq>
 8004696:	4603      	mov	r3, r0
 8004698:	73fb      	strb	r3, [r7, #15]
      break;
 800469a:	e016      	b.n	80046ca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80046a2:	4619      	mov	r1, r3
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f000 fb04 	bl	8004cb2 <USBD_StdEPReq>
 80046aa:	4603      	mov	r3, r0
 80046ac:	73fb      	strb	r3, [r7, #15]
      break;
 80046ae:	e00c      	b.n	80046ca <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80046b6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	4619      	mov	r1, r3
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f001 fbc2 	bl	8005e48 <USBD_LL_StallEP>
 80046c4:	4603      	mov	r3, r0
 80046c6:	73fb      	strb	r3, [r7, #15]
      break;
 80046c8:	bf00      	nop
  }

  return ret;
 80046ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3710      	adds	r7, #16
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b086      	sub	sp, #24
 80046d8:	af00      	add	r7, sp, #0
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	460b      	mov	r3, r1
 80046de:	607a      	str	r2, [r7, #4]
 80046e0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80046e2:	7afb      	ldrb	r3, [r7, #11]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d138      	bne.n	800475a <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80046ee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80046f6:	2b03      	cmp	r3, #3
 80046f8:	d14a      	bne.n	8004790 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	689a      	ldr	r2, [r3, #8]
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	429a      	cmp	r2, r3
 8004704:	d913      	bls.n	800472e <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	689a      	ldr	r2, [r3, #8]
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	1ad2      	subs	r2, r2, r3
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	68da      	ldr	r2, [r3, #12]
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	4293      	cmp	r3, r2
 800471e:	bf28      	it	cs
 8004720:	4613      	movcs	r3, r2
 8004722:	461a      	mov	r2, r3
 8004724:	6879      	ldr	r1, [r7, #4]
 8004726:	68f8      	ldr	r0, [r7, #12]
 8004728:	f001 f80e 	bl	8005748 <USBD_CtlContinueRx>
 800472c:	e030      	b.n	8004790 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004734:	b2db      	uxtb	r3, r3
 8004736:	2b03      	cmp	r3, #3
 8004738:	d10b      	bne.n	8004752 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d005      	beq.n	8004752 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	68f8      	ldr	r0, [r7, #12]
 8004750:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8004752:	68f8      	ldr	r0, [r7, #12]
 8004754:	f001 f809 	bl	800576a <USBD_CtlSendStatus>
 8004758:	e01a      	b.n	8004790 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2b03      	cmp	r3, #3
 8004764:	d114      	bne.n	8004790 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800476c:	699b      	ldr	r3, [r3, #24]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00e      	beq.n	8004790 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004778:	699b      	ldr	r3, [r3, #24]
 800477a:	7afa      	ldrb	r2, [r7, #11]
 800477c:	4611      	mov	r1, r2
 800477e:	68f8      	ldr	r0, [r7, #12]
 8004780:	4798      	blx	r3
 8004782:	4603      	mov	r3, r0
 8004784:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8004786:	7dfb      	ldrb	r3, [r7, #23]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d001      	beq.n	8004790 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800478c:	7dfb      	ldrb	r3, [r7, #23]
 800478e:	e000      	b.n	8004792 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3718      	adds	r7, #24
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}

0800479a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800479a:	b580      	push	{r7, lr}
 800479c:	b086      	sub	sp, #24
 800479e:	af00      	add	r7, sp, #0
 80047a0:	60f8      	str	r0, [r7, #12]
 80047a2:	460b      	mov	r3, r1
 80047a4:	607a      	str	r2, [r7, #4]
 80047a6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80047a8:	7afb      	ldrb	r3, [r7, #11]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d16b      	bne.n	8004886 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	3314      	adds	r3, #20
 80047b2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d156      	bne.n	800486c <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	689a      	ldr	r2, [r3, #8]
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d914      	bls.n	80047f4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	689a      	ldr	r2, [r3, #8]
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	1ad2      	subs	r2, r2, r3
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	461a      	mov	r2, r3
 80047de:	6879      	ldr	r1, [r7, #4]
 80047e0:	68f8      	ldr	r0, [r7, #12]
 80047e2:	f000 ff83 	bl	80056ec <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80047e6:	2300      	movs	r3, #0
 80047e8:	2200      	movs	r2, #0
 80047ea:	2100      	movs	r1, #0
 80047ec:	68f8      	ldr	r0, [r7, #12]
 80047ee:	f001 fbd5 	bl	8005f9c <USBD_LL_PrepareReceive>
 80047f2:	e03b      	b.n	800486c <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	68da      	ldr	r2, [r3, #12]
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d11c      	bne.n	800483a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	685a      	ldr	r2, [r3, #4]
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8004808:	429a      	cmp	r2, r3
 800480a:	d316      	bcc.n	800483a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	685a      	ldr	r2, [r3, #4]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004816:	429a      	cmp	r2, r3
 8004818:	d20f      	bcs.n	800483a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800481a:	2200      	movs	r2, #0
 800481c:	2100      	movs	r1, #0
 800481e:	68f8      	ldr	r0, [r7, #12]
 8004820:	f000 ff64 	bl	80056ec <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2200      	movs	r2, #0
 8004828:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800482c:	2300      	movs	r3, #0
 800482e:	2200      	movs	r2, #0
 8004830:	2100      	movs	r1, #0
 8004832:	68f8      	ldr	r0, [r7, #12]
 8004834:	f001 fbb2 	bl	8005f9c <USBD_LL_PrepareReceive>
 8004838:	e018      	b.n	800486c <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004840:	b2db      	uxtb	r3, r3
 8004842:	2b03      	cmp	r3, #3
 8004844:	d10b      	bne.n	800485e <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d005      	beq.n	800485e <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	68f8      	ldr	r0, [r7, #12]
 800485c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800485e:	2180      	movs	r1, #128	; 0x80
 8004860:	68f8      	ldr	r0, [r7, #12]
 8004862:	f001 faf1 	bl	8005e48 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004866:	68f8      	ldr	r0, [r7, #12]
 8004868:	f000 ff92 	bl	8005790 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8004872:	2b01      	cmp	r3, #1
 8004874:	d122      	bne.n	80048bc <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8004876:	68f8      	ldr	r0, [r7, #12]
 8004878:	f7ff fe98 	bl	80045ac <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2200      	movs	r2, #0
 8004880:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004884:	e01a      	b.n	80048bc <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800488c:	b2db      	uxtb	r3, r3
 800488e:	2b03      	cmp	r3, #3
 8004890:	d114      	bne.n	80048bc <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004898:	695b      	ldr	r3, [r3, #20]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d00e      	beq.n	80048bc <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	7afa      	ldrb	r2, [r7, #11]
 80048a8:	4611      	mov	r1, r2
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	4798      	blx	r3
 80048ae:	4603      	mov	r3, r0
 80048b0:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80048b2:	7dfb      	ldrb	r3, [r7, #23]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d001      	beq.n	80048bc <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80048b8:	7dfb      	ldrb	r3, [r7, #23]
 80048ba:	e000      	b.n	80048be <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3718      	adds	r7, #24
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80048c6:	b580      	push	{r7, lr}
 80048c8:	b082      	sub	sp, #8
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2201      	movs	r2, #1
 80048d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d101      	bne.n	80048fa <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e02f      	b.n	800495a <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004900:	2b00      	cmp	r3, #0
 8004902:	d00f      	beq.n	8004924 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d009      	beq.n	8004924 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	6852      	ldr	r2, [r2, #4]
 800491c:	b2d2      	uxtb	r2, r2
 800491e:	4611      	mov	r1, r2
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004924:	2340      	movs	r3, #64	; 0x40
 8004926:	2200      	movs	r2, #0
 8004928:	2100      	movs	r1, #0
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f001 fa47 	bl	8005dbe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2240      	movs	r2, #64	; 0x40
 800493c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004940:	2340      	movs	r3, #64	; 0x40
 8004942:	2200      	movs	r2, #0
 8004944:	2180      	movs	r1, #128	; 0x80
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f001 fa39 	bl	8005dbe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2240      	movs	r2, #64	; 0x40
 8004956:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3708      	adds	r7, #8
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}

08004962 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004962:	b480      	push	{r7}
 8004964:	b083      	sub	sp, #12
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
 800496a:	460b      	mov	r3, r1
 800496c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	78fa      	ldrb	r2, [r7, #3]
 8004972:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	370c      	adds	r7, #12
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr

08004982 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004982:	b480      	push	{r7}
 8004984:	b083      	sub	sp, #12
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004990:	b2da      	uxtb	r2, r3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2204      	movs	r2, #4
 800499c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	370c      	adds	r7, #12
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr

080049ae <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80049ae:	b480      	push	{r7}
 80049b0:	b083      	sub	sp, #12
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	2b04      	cmp	r3, #4
 80049c0:	d106      	bne.n	80049d0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80049c8:	b2da      	uxtb	r2, r3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	370c      	adds	r7, #12
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr

080049de <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80049de:	b580      	push	{r7, lr}
 80049e0:	b082      	sub	sp, #8
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d101      	bne.n	80049f4 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80049f0:	2303      	movs	r3, #3
 80049f2:	e012      	b.n	8004a1a <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	2b03      	cmp	r3, #3
 80049fe:	d10b      	bne.n	8004a18 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a06:	69db      	ldr	r3, [r3, #28]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d005      	beq.n	8004a18 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a12:	69db      	ldr	r3, [r3, #28]
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3708      	adds	r7, #8
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}

08004a22 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8004a22:	b580      	push	{r7, lr}
 8004a24:	b082      	sub	sp, #8
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
 8004a2a:	460b      	mov	r3, r1
 8004a2c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d101      	bne.n	8004a3c <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e014      	b.n	8004a66 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	2b03      	cmp	r3, #3
 8004a46:	d10d      	bne.n	8004a64 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a4e:	6a1b      	ldr	r3, [r3, #32]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d007      	beq.n	8004a64 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a5a:	6a1b      	ldr	r3, [r3, #32]
 8004a5c:	78fa      	ldrb	r2, [r7, #3]
 8004a5e:	4611      	mov	r1, r2
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3708      	adds	r7, #8
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}

08004a6e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8004a6e:	b580      	push	{r7, lr}
 8004a70:	b082      	sub	sp, #8
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
 8004a76:	460b      	mov	r3, r1
 8004a78:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d101      	bne.n	8004a88 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8004a84:	2303      	movs	r3, #3
 8004a86:	e014      	b.n	8004ab2 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	2b03      	cmp	r3, #3
 8004a92:	d10d      	bne.n	8004ab0 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d007      	beq.n	8004ab0 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa8:	78fa      	ldrb	r2, [r7, #3]
 8004aaa:	4611      	mov	r1, r2
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3708      	adds	r7, #8
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}

08004aba <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8004aba:	b480      	push	{r7}
 8004abc:	b083      	sub	sp, #12
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004ac2:	2300      	movs	r3, #0
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	370c      	adds	r7, #12
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d009      	beq.n	8004afe <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	6852      	ldr	r2, [r2, #4]
 8004af6:	b2d2      	uxtb	r2, r2
 8004af8:	4611      	mov	r1, r2
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	4798      	blx	r3
  }

  return USBD_OK;
 8004afe:	2300      	movs	r3, #0
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3708      	adds	r7, #8
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b087      	sub	sp, #28
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	3301      	adds	r3, #1
 8004b1e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8004b26:	8a3b      	ldrh	r3, [r7, #16]
 8004b28:	021b      	lsls	r3, r3, #8
 8004b2a:	b21a      	sxth	r2, r3
 8004b2c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	b21b      	sxth	r3, r3
 8004b34:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8004b36:	89fb      	ldrh	r3, [r7, #14]
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	371c      	adds	r7, #28
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004b5a:	2b40      	cmp	r3, #64	; 0x40
 8004b5c:	d005      	beq.n	8004b6a <USBD_StdDevReq+0x26>
 8004b5e:	2b40      	cmp	r3, #64	; 0x40
 8004b60:	d853      	bhi.n	8004c0a <USBD_StdDevReq+0xc6>
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d00b      	beq.n	8004b7e <USBD_StdDevReq+0x3a>
 8004b66:	2b20      	cmp	r3, #32
 8004b68:	d14f      	bne.n	8004c0a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	6839      	ldr	r1, [r7, #0]
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	4798      	blx	r3
 8004b78:	4603      	mov	r3, r0
 8004b7a:	73fb      	strb	r3, [r7, #15]
      break;
 8004b7c:	e04a      	b.n	8004c14 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	785b      	ldrb	r3, [r3, #1]
 8004b82:	2b09      	cmp	r3, #9
 8004b84:	d83b      	bhi.n	8004bfe <USBD_StdDevReq+0xba>
 8004b86:	a201      	add	r2, pc, #4	; (adr r2, 8004b8c <USBD_StdDevReq+0x48>)
 8004b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b8c:	08004be1 	.word	0x08004be1
 8004b90:	08004bf5 	.word	0x08004bf5
 8004b94:	08004bff 	.word	0x08004bff
 8004b98:	08004beb 	.word	0x08004beb
 8004b9c:	08004bff 	.word	0x08004bff
 8004ba0:	08004bbf 	.word	0x08004bbf
 8004ba4:	08004bb5 	.word	0x08004bb5
 8004ba8:	08004bff 	.word	0x08004bff
 8004bac:	08004bd7 	.word	0x08004bd7
 8004bb0:	08004bc9 	.word	0x08004bc9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8004bb4:	6839      	ldr	r1, [r7, #0]
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 f9de 	bl	8004f78 <USBD_GetDescriptor>
          break;
 8004bbc:	e024      	b.n	8004c08 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8004bbe:	6839      	ldr	r1, [r7, #0]
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f000 fb43 	bl	800524c <USBD_SetAddress>
          break;
 8004bc6:	e01f      	b.n	8004c08 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8004bc8:	6839      	ldr	r1, [r7, #0]
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 fb82 	bl	80052d4 <USBD_SetConfig>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	73fb      	strb	r3, [r7, #15]
          break;
 8004bd4:	e018      	b.n	8004c08 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8004bd6:	6839      	ldr	r1, [r7, #0]
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f000 fc21 	bl	8005420 <USBD_GetConfig>
          break;
 8004bde:	e013      	b.n	8004c08 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8004be0:	6839      	ldr	r1, [r7, #0]
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 fc52 	bl	800548c <USBD_GetStatus>
          break;
 8004be8:	e00e      	b.n	8004c08 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8004bea:	6839      	ldr	r1, [r7, #0]
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f000 fc81 	bl	80054f4 <USBD_SetFeature>
          break;
 8004bf2:	e009      	b.n	8004c08 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8004bf4:	6839      	ldr	r1, [r7, #0]
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 fc90 	bl	800551c <USBD_ClrFeature>
          break;
 8004bfc:	e004      	b.n	8004c08 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8004bfe:	6839      	ldr	r1, [r7, #0]
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f000 fce7 	bl	80055d4 <USBD_CtlError>
          break;
 8004c06:	bf00      	nop
      }
      break;
 8004c08:	e004      	b.n	8004c14 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8004c0a:	6839      	ldr	r1, [r7, #0]
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f000 fce1 	bl	80055d4 <USBD_CtlError>
      break;
 8004c12:	bf00      	nop
  }

  return ret;
 8004c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3710      	adds	r7, #16
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop

08004c20 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004c36:	2b40      	cmp	r3, #64	; 0x40
 8004c38:	d005      	beq.n	8004c46 <USBD_StdItfReq+0x26>
 8004c3a:	2b40      	cmp	r3, #64	; 0x40
 8004c3c:	d82f      	bhi.n	8004c9e <USBD_StdItfReq+0x7e>
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d001      	beq.n	8004c46 <USBD_StdItfReq+0x26>
 8004c42:	2b20      	cmp	r3, #32
 8004c44:	d12b      	bne.n	8004c9e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	d81d      	bhi.n	8004c90 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	889b      	ldrh	r3, [r3, #4]
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d813      	bhi.n	8004c86 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	6839      	ldr	r1, [r7, #0]
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	4798      	blx	r3
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	88db      	ldrh	r3, [r3, #6]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d110      	bne.n	8004c9a <USBD_StdItfReq+0x7a>
 8004c78:	7bfb      	ldrb	r3, [r7, #15]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d10d      	bne.n	8004c9a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 fd73 	bl	800576a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8004c84:	e009      	b.n	8004c9a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8004c86:	6839      	ldr	r1, [r7, #0]
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f000 fca3 	bl	80055d4 <USBD_CtlError>
          break;
 8004c8e:	e004      	b.n	8004c9a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8004c90:	6839      	ldr	r1, [r7, #0]
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 fc9e 	bl	80055d4 <USBD_CtlError>
          break;
 8004c98:	e000      	b.n	8004c9c <USBD_StdItfReq+0x7c>
          break;
 8004c9a:	bf00      	nop
      }
      break;
 8004c9c:	e004      	b.n	8004ca8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8004c9e:	6839      	ldr	r1, [r7, #0]
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f000 fc97 	bl	80055d4 <USBD_CtlError>
      break;
 8004ca6:	bf00      	nop
  }

  return ret;
 8004ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3710      	adds	r7, #16
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}

08004cb2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004cb2:	b580      	push	{r7, lr}
 8004cb4:	b084      	sub	sp, #16
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
 8004cba:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	889b      	ldrh	r3, [r3, #4]
 8004cc4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004cce:	2b40      	cmp	r3, #64	; 0x40
 8004cd0:	d007      	beq.n	8004ce2 <USBD_StdEPReq+0x30>
 8004cd2:	2b40      	cmp	r3, #64	; 0x40
 8004cd4:	f200 8145 	bhi.w	8004f62 <USBD_StdEPReq+0x2b0>
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d00c      	beq.n	8004cf6 <USBD_StdEPReq+0x44>
 8004cdc:	2b20      	cmp	r3, #32
 8004cde:	f040 8140 	bne.w	8004f62 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	6839      	ldr	r1, [r7, #0]
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	4798      	blx	r3
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	73fb      	strb	r3, [r7, #15]
      break;
 8004cf4:	e13a      	b.n	8004f6c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	785b      	ldrb	r3, [r3, #1]
 8004cfa:	2b03      	cmp	r3, #3
 8004cfc:	d007      	beq.n	8004d0e <USBD_StdEPReq+0x5c>
 8004cfe:	2b03      	cmp	r3, #3
 8004d00:	f300 8129 	bgt.w	8004f56 <USBD_StdEPReq+0x2a4>
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d07f      	beq.n	8004e08 <USBD_StdEPReq+0x156>
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d03c      	beq.n	8004d86 <USBD_StdEPReq+0xd4>
 8004d0c:	e123      	b.n	8004f56 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d002      	beq.n	8004d20 <USBD_StdEPReq+0x6e>
 8004d1a:	2b03      	cmp	r3, #3
 8004d1c:	d016      	beq.n	8004d4c <USBD_StdEPReq+0x9a>
 8004d1e:	e02c      	b.n	8004d7a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004d20:	7bbb      	ldrb	r3, [r7, #14]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00d      	beq.n	8004d42 <USBD_StdEPReq+0x90>
 8004d26:	7bbb      	ldrb	r3, [r7, #14]
 8004d28:	2b80      	cmp	r3, #128	; 0x80
 8004d2a:	d00a      	beq.n	8004d42 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8004d2c:	7bbb      	ldrb	r3, [r7, #14]
 8004d2e:	4619      	mov	r1, r3
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f001 f889 	bl	8005e48 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8004d36:	2180      	movs	r1, #128	; 0x80
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f001 f885 	bl	8005e48 <USBD_LL_StallEP>
 8004d3e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8004d40:	e020      	b.n	8004d84 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8004d42:	6839      	ldr	r1, [r7, #0]
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f000 fc45 	bl	80055d4 <USBD_CtlError>
              break;
 8004d4a:	e01b      	b.n	8004d84 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	885b      	ldrh	r3, [r3, #2]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d10e      	bne.n	8004d72 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004d54:	7bbb      	ldrb	r3, [r7, #14]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d00b      	beq.n	8004d72 <USBD_StdEPReq+0xc0>
 8004d5a:	7bbb      	ldrb	r3, [r7, #14]
 8004d5c:	2b80      	cmp	r3, #128	; 0x80
 8004d5e:	d008      	beq.n	8004d72 <USBD_StdEPReq+0xc0>
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	88db      	ldrh	r3, [r3, #6]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d104      	bne.n	8004d72 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8004d68:	7bbb      	ldrb	r3, [r7, #14]
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f001 f86b 	bl	8005e48 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 fcf9 	bl	800576a <USBD_CtlSendStatus>

              break;
 8004d78:	e004      	b.n	8004d84 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8004d7a:	6839      	ldr	r1, [r7, #0]
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f000 fc29 	bl	80055d4 <USBD_CtlError>
              break;
 8004d82:	bf00      	nop
          }
          break;
 8004d84:	e0ec      	b.n	8004f60 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d002      	beq.n	8004d98 <USBD_StdEPReq+0xe6>
 8004d92:	2b03      	cmp	r3, #3
 8004d94:	d016      	beq.n	8004dc4 <USBD_StdEPReq+0x112>
 8004d96:	e030      	b.n	8004dfa <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004d98:	7bbb      	ldrb	r3, [r7, #14]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00d      	beq.n	8004dba <USBD_StdEPReq+0x108>
 8004d9e:	7bbb      	ldrb	r3, [r7, #14]
 8004da0:	2b80      	cmp	r3, #128	; 0x80
 8004da2:	d00a      	beq.n	8004dba <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8004da4:	7bbb      	ldrb	r3, [r7, #14]
 8004da6:	4619      	mov	r1, r3
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f001 f84d 	bl	8005e48 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8004dae:	2180      	movs	r1, #128	; 0x80
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f001 f849 	bl	8005e48 <USBD_LL_StallEP>
 8004db6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8004db8:	e025      	b.n	8004e06 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8004dba:	6839      	ldr	r1, [r7, #0]
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f000 fc09 	bl	80055d4 <USBD_CtlError>
              break;
 8004dc2:	e020      	b.n	8004e06 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	885b      	ldrh	r3, [r3, #2]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d11b      	bne.n	8004e04 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8004dcc:	7bbb      	ldrb	r3, [r7, #14]
 8004dce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d004      	beq.n	8004de0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8004dd6:	7bbb      	ldrb	r3, [r7, #14]
 8004dd8:	4619      	mov	r1, r3
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f001 f853 	bl	8005e86 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f000 fcc2 	bl	800576a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	6839      	ldr	r1, [r7, #0]
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	4798      	blx	r3
 8004df4:	4603      	mov	r3, r0
 8004df6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8004df8:	e004      	b.n	8004e04 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8004dfa:	6839      	ldr	r1, [r7, #0]
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f000 fbe9 	bl	80055d4 <USBD_CtlError>
              break;
 8004e02:	e000      	b.n	8004e06 <USBD_StdEPReq+0x154>
              break;
 8004e04:	bf00      	nop
          }
          break;
 8004e06:	e0ab      	b.n	8004f60 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d002      	beq.n	8004e1a <USBD_StdEPReq+0x168>
 8004e14:	2b03      	cmp	r3, #3
 8004e16:	d032      	beq.n	8004e7e <USBD_StdEPReq+0x1cc>
 8004e18:	e097      	b.n	8004f4a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004e1a:	7bbb      	ldrb	r3, [r7, #14]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d007      	beq.n	8004e30 <USBD_StdEPReq+0x17e>
 8004e20:	7bbb      	ldrb	r3, [r7, #14]
 8004e22:	2b80      	cmp	r3, #128	; 0x80
 8004e24:	d004      	beq.n	8004e30 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8004e26:	6839      	ldr	r1, [r7, #0]
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f000 fbd3 	bl	80055d4 <USBD_CtlError>
                break;
 8004e2e:	e091      	b.n	8004f54 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004e30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	da0b      	bge.n	8004e50 <USBD_StdEPReq+0x19e>
 8004e38:	7bbb      	ldrb	r3, [r7, #14]
 8004e3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004e3e:	4613      	mov	r3, r2
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	4413      	add	r3, r2
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	3310      	adds	r3, #16
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	4413      	add	r3, r2
 8004e4c:	3304      	adds	r3, #4
 8004e4e:	e00b      	b.n	8004e68 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004e50:	7bbb      	ldrb	r3, [r7, #14]
 8004e52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004e56:	4613      	mov	r3, r2
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	4413      	add	r3, r2
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	4413      	add	r3, r2
 8004e66:	3304      	adds	r3, #4
 8004e68:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	2202      	movs	r2, #2
 8004e74:	4619      	mov	r1, r3
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 fc1d 	bl	80056b6 <USBD_CtlSendData>
              break;
 8004e7c:	e06a      	b.n	8004f54 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8004e7e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	da11      	bge.n	8004eaa <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004e86:	7bbb      	ldrb	r3, [r7, #14]
 8004e88:	f003 020f 	and.w	r2, r3, #15
 8004e8c:	6879      	ldr	r1, [r7, #4]
 8004e8e:	4613      	mov	r3, r2
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	4413      	add	r3, r2
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	440b      	add	r3, r1
 8004e98:	3324      	adds	r3, #36	; 0x24
 8004e9a:	881b      	ldrh	r3, [r3, #0]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d117      	bne.n	8004ed0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8004ea0:	6839      	ldr	r1, [r7, #0]
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 fb96 	bl	80055d4 <USBD_CtlError>
                  break;
 8004ea8:	e054      	b.n	8004f54 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004eaa:	7bbb      	ldrb	r3, [r7, #14]
 8004eac:	f003 020f 	and.w	r2, r3, #15
 8004eb0:	6879      	ldr	r1, [r7, #4]
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	4413      	add	r3, r2
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	440b      	add	r3, r1
 8004ebc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004ec0:	881b      	ldrh	r3, [r3, #0]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d104      	bne.n	8004ed0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8004ec6:	6839      	ldr	r1, [r7, #0]
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f000 fb83 	bl	80055d4 <USBD_CtlError>
                  break;
 8004ece:	e041      	b.n	8004f54 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004ed0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	da0b      	bge.n	8004ef0 <USBD_StdEPReq+0x23e>
 8004ed8:	7bbb      	ldrb	r3, [r7, #14]
 8004eda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004ede:	4613      	mov	r3, r2
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	4413      	add	r3, r2
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	3310      	adds	r3, #16
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	4413      	add	r3, r2
 8004eec:	3304      	adds	r3, #4
 8004eee:	e00b      	b.n	8004f08 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004ef0:	7bbb      	ldrb	r3, [r7, #14]
 8004ef2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	4413      	add	r3, r2
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	4413      	add	r3, r2
 8004f06:	3304      	adds	r3, #4
 8004f08:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8004f0a:	7bbb      	ldrb	r3, [r7, #14]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d002      	beq.n	8004f16 <USBD_StdEPReq+0x264>
 8004f10:	7bbb      	ldrb	r3, [r7, #14]
 8004f12:	2b80      	cmp	r3, #128	; 0x80
 8004f14:	d103      	bne.n	8004f1e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	601a      	str	r2, [r3, #0]
 8004f1c:	e00e      	b.n	8004f3c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8004f1e:	7bbb      	ldrb	r3, [r7, #14]
 8004f20:	4619      	mov	r1, r3
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 ffce 	bl	8005ec4 <USBD_LL_IsStallEP>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d003      	beq.n	8004f36 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	2201      	movs	r2, #1
 8004f32:	601a      	str	r2, [r3, #0]
 8004f34:	e002      	b.n	8004f3c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	2202      	movs	r2, #2
 8004f40:	4619      	mov	r1, r3
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 fbb7 	bl	80056b6 <USBD_CtlSendData>
              break;
 8004f48:	e004      	b.n	8004f54 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8004f4a:	6839      	ldr	r1, [r7, #0]
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f000 fb41 	bl	80055d4 <USBD_CtlError>
              break;
 8004f52:	bf00      	nop
          }
          break;
 8004f54:	e004      	b.n	8004f60 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8004f56:	6839      	ldr	r1, [r7, #0]
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 fb3b 	bl	80055d4 <USBD_CtlError>
          break;
 8004f5e:	bf00      	nop
      }
      break;
 8004f60:	e004      	b.n	8004f6c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8004f62:	6839      	ldr	r1, [r7, #0]
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f000 fb35 	bl	80055d4 <USBD_CtlError>
      break;
 8004f6a:	bf00      	nop
  }

  return ret;
 8004f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3710      	adds	r7, #16
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
	...

08004f78 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b084      	sub	sp, #16
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004f82:	2300      	movs	r3, #0
 8004f84:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8004f86:	2300      	movs	r3, #0
 8004f88:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	885b      	ldrh	r3, [r3, #2]
 8004f92:	0a1b      	lsrs	r3, r3, #8
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	3b01      	subs	r3, #1
 8004f98:	2b06      	cmp	r3, #6
 8004f9a:	f200 8128 	bhi.w	80051ee <USBD_GetDescriptor+0x276>
 8004f9e:	a201      	add	r2, pc, #4	; (adr r2, 8004fa4 <USBD_GetDescriptor+0x2c>)
 8004fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa4:	08004fc1 	.word	0x08004fc1
 8004fa8:	08004fd9 	.word	0x08004fd9
 8004fac:	08005019 	.word	0x08005019
 8004fb0:	080051ef 	.word	0x080051ef
 8004fb4:	080051ef 	.word	0x080051ef
 8004fb8:	0800518f 	.word	0x0800518f
 8004fbc:	080051bb 	.word	0x080051bb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	7c12      	ldrb	r2, [r2, #16]
 8004fcc:	f107 0108 	add.w	r1, r7, #8
 8004fd0:	4610      	mov	r0, r2
 8004fd2:	4798      	blx	r3
 8004fd4:	60f8      	str	r0, [r7, #12]
      break;
 8004fd6:	e112      	b.n	80051fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	7c1b      	ldrb	r3, [r3, #16]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d10d      	bne.n	8004ffc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe8:	f107 0208 	add.w	r2, r7, #8
 8004fec:	4610      	mov	r0, r2
 8004fee:	4798      	blx	r3
 8004ff0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	3301      	adds	r3, #1
 8004ff6:	2202      	movs	r2, #2
 8004ff8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8004ffa:	e100      	b.n	80051fe <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005004:	f107 0208 	add.w	r2, r7, #8
 8005008:	4610      	mov	r0, r2
 800500a:	4798      	blx	r3
 800500c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	3301      	adds	r3, #1
 8005012:	2202      	movs	r2, #2
 8005014:	701a      	strb	r2, [r3, #0]
      break;
 8005016:	e0f2      	b.n	80051fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	885b      	ldrh	r3, [r3, #2]
 800501c:	b2db      	uxtb	r3, r3
 800501e:	2b05      	cmp	r3, #5
 8005020:	f200 80ac 	bhi.w	800517c <USBD_GetDescriptor+0x204>
 8005024:	a201      	add	r2, pc, #4	; (adr r2, 800502c <USBD_GetDescriptor+0xb4>)
 8005026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800502a:	bf00      	nop
 800502c:	08005045 	.word	0x08005045
 8005030:	08005079 	.word	0x08005079
 8005034:	080050ad 	.word	0x080050ad
 8005038:	080050e1 	.word	0x080050e1
 800503c:	08005115 	.word	0x08005115
 8005040:	08005149 	.word	0x08005149
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d00b      	beq.n	8005068 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	7c12      	ldrb	r2, [r2, #16]
 800505c:	f107 0108 	add.w	r1, r7, #8
 8005060:	4610      	mov	r0, r2
 8005062:	4798      	blx	r3
 8005064:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005066:	e091      	b.n	800518c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005068:	6839      	ldr	r1, [r7, #0]
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 fab2 	bl	80055d4 <USBD_CtlError>
            err++;
 8005070:	7afb      	ldrb	r3, [r7, #11]
 8005072:	3301      	adds	r3, #1
 8005074:	72fb      	strb	r3, [r7, #11]
          break;
 8005076:	e089      	b.n	800518c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d00b      	beq.n	800509c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	7c12      	ldrb	r2, [r2, #16]
 8005090:	f107 0108 	add.w	r1, r7, #8
 8005094:	4610      	mov	r0, r2
 8005096:	4798      	blx	r3
 8005098:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800509a:	e077      	b.n	800518c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800509c:	6839      	ldr	r1, [r7, #0]
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 fa98 	bl	80055d4 <USBD_CtlError>
            err++;
 80050a4:	7afb      	ldrb	r3, [r7, #11]
 80050a6:	3301      	adds	r3, #1
 80050a8:	72fb      	strb	r3, [r7, #11]
          break;
 80050aa:	e06f      	b.n	800518c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d00b      	beq.n	80050d0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	7c12      	ldrb	r2, [r2, #16]
 80050c4:	f107 0108 	add.w	r1, r7, #8
 80050c8:	4610      	mov	r0, r2
 80050ca:	4798      	blx	r3
 80050cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80050ce:	e05d      	b.n	800518c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80050d0:	6839      	ldr	r1, [r7, #0]
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 fa7e 	bl	80055d4 <USBD_CtlError>
            err++;
 80050d8:	7afb      	ldrb	r3, [r7, #11]
 80050da:	3301      	adds	r3, #1
 80050dc:	72fb      	strb	r3, [r7, #11]
          break;
 80050de:	e055      	b.n	800518c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d00b      	beq.n	8005104 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80050f2:	691b      	ldr	r3, [r3, #16]
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	7c12      	ldrb	r2, [r2, #16]
 80050f8:	f107 0108 	add.w	r1, r7, #8
 80050fc:	4610      	mov	r0, r2
 80050fe:	4798      	blx	r3
 8005100:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005102:	e043      	b.n	800518c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005104:	6839      	ldr	r1, [r7, #0]
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 fa64 	bl	80055d4 <USBD_CtlError>
            err++;
 800510c:	7afb      	ldrb	r3, [r7, #11]
 800510e:	3301      	adds	r3, #1
 8005110:	72fb      	strb	r3, [r7, #11]
          break;
 8005112:	e03b      	b.n	800518c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800511a:	695b      	ldr	r3, [r3, #20]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d00b      	beq.n	8005138 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005126:	695b      	ldr	r3, [r3, #20]
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	7c12      	ldrb	r2, [r2, #16]
 800512c:	f107 0108 	add.w	r1, r7, #8
 8005130:	4610      	mov	r0, r2
 8005132:	4798      	blx	r3
 8005134:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005136:	e029      	b.n	800518c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005138:	6839      	ldr	r1, [r7, #0]
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f000 fa4a 	bl	80055d4 <USBD_CtlError>
            err++;
 8005140:	7afb      	ldrb	r3, [r7, #11]
 8005142:	3301      	adds	r3, #1
 8005144:	72fb      	strb	r3, [r7, #11]
          break;
 8005146:	e021      	b.n	800518c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800514e:	699b      	ldr	r3, [r3, #24]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d00b      	beq.n	800516c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800515a:	699b      	ldr	r3, [r3, #24]
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	7c12      	ldrb	r2, [r2, #16]
 8005160:	f107 0108 	add.w	r1, r7, #8
 8005164:	4610      	mov	r0, r2
 8005166:	4798      	blx	r3
 8005168:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800516a:	e00f      	b.n	800518c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800516c:	6839      	ldr	r1, [r7, #0]
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f000 fa30 	bl	80055d4 <USBD_CtlError>
            err++;
 8005174:	7afb      	ldrb	r3, [r7, #11]
 8005176:	3301      	adds	r3, #1
 8005178:	72fb      	strb	r3, [r7, #11]
          break;
 800517a:	e007      	b.n	800518c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800517c:	6839      	ldr	r1, [r7, #0]
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 fa28 	bl	80055d4 <USBD_CtlError>
          err++;
 8005184:	7afb      	ldrb	r3, [r7, #11]
 8005186:	3301      	adds	r3, #1
 8005188:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800518a:	bf00      	nop
      }
      break;
 800518c:	e037      	b.n	80051fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	7c1b      	ldrb	r3, [r3, #16]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d109      	bne.n	80051aa <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800519c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800519e:	f107 0208 	add.w	r2, r7, #8
 80051a2:	4610      	mov	r0, r2
 80051a4:	4798      	blx	r3
 80051a6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80051a8:	e029      	b.n	80051fe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80051aa:	6839      	ldr	r1, [r7, #0]
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f000 fa11 	bl	80055d4 <USBD_CtlError>
        err++;
 80051b2:	7afb      	ldrb	r3, [r7, #11]
 80051b4:	3301      	adds	r3, #1
 80051b6:	72fb      	strb	r3, [r7, #11]
      break;
 80051b8:	e021      	b.n	80051fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	7c1b      	ldrb	r3, [r3, #16]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d10d      	bne.n	80051de <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ca:	f107 0208 	add.w	r2, r7, #8
 80051ce:	4610      	mov	r0, r2
 80051d0:	4798      	blx	r3
 80051d2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	3301      	adds	r3, #1
 80051d8:	2207      	movs	r2, #7
 80051da:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80051dc:	e00f      	b.n	80051fe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80051de:	6839      	ldr	r1, [r7, #0]
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f000 f9f7 	bl	80055d4 <USBD_CtlError>
        err++;
 80051e6:	7afb      	ldrb	r3, [r7, #11]
 80051e8:	3301      	adds	r3, #1
 80051ea:	72fb      	strb	r3, [r7, #11]
      break;
 80051ec:	e007      	b.n	80051fe <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80051ee:	6839      	ldr	r1, [r7, #0]
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f000 f9ef 	bl	80055d4 <USBD_CtlError>
      err++;
 80051f6:	7afb      	ldrb	r3, [r7, #11]
 80051f8:	3301      	adds	r3, #1
 80051fa:	72fb      	strb	r3, [r7, #11]
      break;
 80051fc:	bf00      	nop
  }

  if (err != 0U)
 80051fe:	7afb      	ldrb	r3, [r7, #11]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d11e      	bne.n	8005242 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	88db      	ldrh	r3, [r3, #6]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d016      	beq.n	800523a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800520c:	893b      	ldrh	r3, [r7, #8]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d00e      	beq.n	8005230 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	88da      	ldrh	r2, [r3, #6]
 8005216:	893b      	ldrh	r3, [r7, #8]
 8005218:	4293      	cmp	r3, r2
 800521a:	bf28      	it	cs
 800521c:	4613      	movcs	r3, r2
 800521e:	b29b      	uxth	r3, r3
 8005220:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005222:	893b      	ldrh	r3, [r7, #8]
 8005224:	461a      	mov	r2, r3
 8005226:	68f9      	ldr	r1, [r7, #12]
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f000 fa44 	bl	80056b6 <USBD_CtlSendData>
 800522e:	e009      	b.n	8005244 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005230:	6839      	ldr	r1, [r7, #0]
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 f9ce 	bl	80055d4 <USBD_CtlError>
 8005238:	e004      	b.n	8005244 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 fa95 	bl	800576a <USBD_CtlSendStatus>
 8005240:	e000      	b.n	8005244 <USBD_GetDescriptor+0x2cc>
    return;
 8005242:	bf00      	nop
  }
}
 8005244:	3710      	adds	r7, #16
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop

0800524c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b084      	sub	sp, #16
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	889b      	ldrh	r3, [r3, #4]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d131      	bne.n	80052c2 <USBD_SetAddress+0x76>
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	88db      	ldrh	r3, [r3, #6]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d12d      	bne.n	80052c2 <USBD_SetAddress+0x76>
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	885b      	ldrh	r3, [r3, #2]
 800526a:	2b7f      	cmp	r3, #127	; 0x7f
 800526c:	d829      	bhi.n	80052c2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	885b      	ldrh	r3, [r3, #2]
 8005272:	b2db      	uxtb	r3, r3
 8005274:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005278:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005280:	b2db      	uxtb	r3, r3
 8005282:	2b03      	cmp	r3, #3
 8005284:	d104      	bne.n	8005290 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005286:	6839      	ldr	r1, [r7, #0]
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f000 f9a3 	bl	80055d4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800528e:	e01d      	b.n	80052cc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	7bfa      	ldrb	r2, [r7, #15]
 8005294:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005298:	7bfb      	ldrb	r3, [r7, #15]
 800529a:	4619      	mov	r1, r3
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f000 fe3d 	bl	8005f1c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 fa61 	bl	800576a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80052a8:	7bfb      	ldrb	r3, [r7, #15]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d004      	beq.n	80052b8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2202      	movs	r2, #2
 80052b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052b6:	e009      	b.n	80052cc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052c0:	e004      	b.n	80052cc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80052c2:	6839      	ldr	r1, [r7, #0]
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f000 f985 	bl	80055d4 <USBD_CtlError>
  }
}
 80052ca:	bf00      	nop
 80052cc:	bf00      	nop
 80052ce:	3710      	adds	r7, #16
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80052de:	2300      	movs	r3, #0
 80052e0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	885b      	ldrh	r3, [r3, #2]
 80052e6:	b2da      	uxtb	r2, r3
 80052e8:	4b4c      	ldr	r3, [pc, #304]	; (800541c <USBD_SetConfig+0x148>)
 80052ea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80052ec:	4b4b      	ldr	r3, [pc, #300]	; (800541c <USBD_SetConfig+0x148>)
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d905      	bls.n	8005300 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80052f4:	6839      	ldr	r1, [r7, #0]
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 f96c 	bl	80055d4 <USBD_CtlError>
    return USBD_FAIL;
 80052fc:	2303      	movs	r3, #3
 80052fe:	e088      	b.n	8005412 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005306:	b2db      	uxtb	r3, r3
 8005308:	2b02      	cmp	r3, #2
 800530a:	d002      	beq.n	8005312 <USBD_SetConfig+0x3e>
 800530c:	2b03      	cmp	r3, #3
 800530e:	d025      	beq.n	800535c <USBD_SetConfig+0x88>
 8005310:	e071      	b.n	80053f6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005312:	4b42      	ldr	r3, [pc, #264]	; (800541c <USBD_SetConfig+0x148>)
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d01c      	beq.n	8005354 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800531a:	4b40      	ldr	r3, [pc, #256]	; (800541c <USBD_SetConfig+0x148>)
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	461a      	mov	r2, r3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005324:	4b3d      	ldr	r3, [pc, #244]	; (800541c <USBD_SetConfig+0x148>)
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	4619      	mov	r1, r3
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f7ff f949 	bl	80045c2 <USBD_SetClassConfig>
 8005330:	4603      	mov	r3, r0
 8005332:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005334:	7bfb      	ldrb	r3, [r7, #15]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d004      	beq.n	8005344 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800533a:	6839      	ldr	r1, [r7, #0]
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f000 f949 	bl	80055d4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005342:	e065      	b.n	8005410 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f000 fa10 	bl	800576a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2203      	movs	r2, #3
 800534e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005352:	e05d      	b.n	8005410 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f000 fa08 	bl	800576a <USBD_CtlSendStatus>
      break;
 800535a:	e059      	b.n	8005410 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800535c:	4b2f      	ldr	r3, [pc, #188]	; (800541c <USBD_SetConfig+0x148>)
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d112      	bne.n	800538a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2202      	movs	r2, #2
 8005368:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800536c:	4b2b      	ldr	r3, [pc, #172]	; (800541c <USBD_SetConfig+0x148>)
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	461a      	mov	r2, r3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005376:	4b29      	ldr	r3, [pc, #164]	; (800541c <USBD_SetConfig+0x148>)
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	4619      	mov	r1, r3
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f7ff f93c 	bl	80045fa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 f9f1 	bl	800576a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005388:	e042      	b.n	8005410 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800538a:	4b24      	ldr	r3, [pc, #144]	; (800541c <USBD_SetConfig+0x148>)
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	461a      	mov	r2, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	429a      	cmp	r2, r3
 8005396:	d02a      	beq.n	80053ee <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	b2db      	uxtb	r3, r3
 800539e:	4619      	mov	r1, r3
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f7ff f92a 	bl	80045fa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80053a6:	4b1d      	ldr	r3, [pc, #116]	; (800541c <USBD_SetConfig+0x148>)
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	461a      	mov	r2, r3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80053b0:	4b1a      	ldr	r3, [pc, #104]	; (800541c <USBD_SetConfig+0x148>)
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	4619      	mov	r1, r3
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f7ff f903 	bl	80045c2 <USBD_SetClassConfig>
 80053bc:	4603      	mov	r3, r0
 80053be:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80053c0:	7bfb      	ldrb	r3, [r7, #15]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00f      	beq.n	80053e6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80053c6:	6839      	ldr	r1, [r7, #0]
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f000 f903 	bl	80055d4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	4619      	mov	r1, r3
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f7ff f90f 	bl	80045fa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2202      	movs	r2, #2
 80053e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80053e4:	e014      	b.n	8005410 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 f9bf 	bl	800576a <USBD_CtlSendStatus>
      break;
 80053ec:	e010      	b.n	8005410 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 f9bb 	bl	800576a <USBD_CtlSendStatus>
      break;
 80053f4:	e00c      	b.n	8005410 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80053f6:	6839      	ldr	r1, [r7, #0]
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 f8eb 	bl	80055d4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80053fe:	4b07      	ldr	r3, [pc, #28]	; (800541c <USBD_SetConfig+0x148>)
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	4619      	mov	r1, r3
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f7ff f8f8 	bl	80045fa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800540a:	2303      	movs	r3, #3
 800540c:	73fb      	strb	r3, [r7, #15]
      break;
 800540e:	bf00      	nop
  }

  return ret;
 8005410:	7bfb      	ldrb	r3, [r7, #15]
}
 8005412:	4618      	mov	r0, r3
 8005414:	3710      	adds	r7, #16
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	200001d4 	.word	0x200001d4

08005420 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b082      	sub	sp, #8
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	88db      	ldrh	r3, [r3, #6]
 800542e:	2b01      	cmp	r3, #1
 8005430:	d004      	beq.n	800543c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005432:	6839      	ldr	r1, [r7, #0]
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 f8cd 	bl	80055d4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800543a:	e023      	b.n	8005484 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005442:	b2db      	uxtb	r3, r3
 8005444:	2b02      	cmp	r3, #2
 8005446:	dc02      	bgt.n	800544e <USBD_GetConfig+0x2e>
 8005448:	2b00      	cmp	r3, #0
 800544a:	dc03      	bgt.n	8005454 <USBD_GetConfig+0x34>
 800544c:	e015      	b.n	800547a <USBD_GetConfig+0x5a>
 800544e:	2b03      	cmp	r3, #3
 8005450:	d00b      	beq.n	800546a <USBD_GetConfig+0x4a>
 8005452:	e012      	b.n	800547a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	3308      	adds	r3, #8
 800545e:	2201      	movs	r2, #1
 8005460:	4619      	mov	r1, r3
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 f927 	bl	80056b6 <USBD_CtlSendData>
        break;
 8005468:	e00c      	b.n	8005484 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	3304      	adds	r3, #4
 800546e:	2201      	movs	r2, #1
 8005470:	4619      	mov	r1, r3
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 f91f 	bl	80056b6 <USBD_CtlSendData>
        break;
 8005478:	e004      	b.n	8005484 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800547a:	6839      	ldr	r1, [r7, #0]
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f000 f8a9 	bl	80055d4 <USBD_CtlError>
        break;
 8005482:	bf00      	nop
}
 8005484:	bf00      	nop
 8005486:	3708      	adds	r7, #8
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b082      	sub	sp, #8
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800549c:	b2db      	uxtb	r3, r3
 800549e:	3b01      	subs	r3, #1
 80054a0:	2b02      	cmp	r3, #2
 80054a2:	d81e      	bhi.n	80054e2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	88db      	ldrh	r3, [r3, #6]
 80054a8:	2b02      	cmp	r3, #2
 80054aa:	d004      	beq.n	80054b6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80054ac:	6839      	ldr	r1, [r7, #0]
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 f890 	bl	80055d4 <USBD_CtlError>
        break;
 80054b4:	e01a      	b.n	80054ec <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2201      	movs	r2, #1
 80054ba:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d005      	beq.n	80054d2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	f043 0202 	orr.w	r2, r3, #2
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	330c      	adds	r3, #12
 80054d6:	2202      	movs	r2, #2
 80054d8:	4619      	mov	r1, r3
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 f8eb 	bl	80056b6 <USBD_CtlSendData>
      break;
 80054e0:	e004      	b.n	80054ec <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80054e2:	6839      	ldr	r1, [r7, #0]
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f000 f875 	bl	80055d4 <USBD_CtlError>
      break;
 80054ea:	bf00      	nop
  }
}
 80054ec:	bf00      	nop
 80054ee:	3708      	adds	r7, #8
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}

080054f4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	885b      	ldrh	r3, [r3, #2]
 8005502:	2b01      	cmp	r3, #1
 8005504:	d106      	bne.n	8005514 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2201      	movs	r2, #1
 800550a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 f92b 	bl	800576a <USBD_CtlSendStatus>
  }
}
 8005514:	bf00      	nop
 8005516:	3708      	adds	r7, #8
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}

0800551c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b082      	sub	sp, #8
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800552c:	b2db      	uxtb	r3, r3
 800552e:	3b01      	subs	r3, #1
 8005530:	2b02      	cmp	r3, #2
 8005532:	d80b      	bhi.n	800554c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	885b      	ldrh	r3, [r3, #2]
 8005538:	2b01      	cmp	r3, #1
 800553a:	d10c      	bne.n	8005556 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f000 f910 	bl	800576a <USBD_CtlSendStatus>
      }
      break;
 800554a:	e004      	b.n	8005556 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800554c:	6839      	ldr	r1, [r7, #0]
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 f840 	bl	80055d4 <USBD_CtlError>
      break;
 8005554:	e000      	b.n	8005558 <USBD_ClrFeature+0x3c>
      break;
 8005556:	bf00      	nop
  }
}
 8005558:	bf00      	nop
 800555a:	3708      	adds	r7, #8
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	781a      	ldrb	r2, [r3, #0]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	3301      	adds	r3, #1
 800557a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	781a      	ldrb	r2, [r3, #0]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	3301      	adds	r3, #1
 8005588:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800558a:	68f8      	ldr	r0, [r7, #12]
 800558c:	f7ff fabc 	bl	8004b08 <SWAPBYTE>
 8005590:	4603      	mov	r3, r0
 8005592:	461a      	mov	r2, r3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	3301      	adds	r3, #1
 800559c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	3301      	adds	r3, #1
 80055a2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80055a4:	68f8      	ldr	r0, [r7, #12]
 80055a6:	f7ff faaf 	bl	8004b08 <SWAPBYTE>
 80055aa:	4603      	mov	r3, r0
 80055ac:	461a      	mov	r2, r3
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	3301      	adds	r3, #1
 80055b6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	3301      	adds	r3, #1
 80055bc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80055be:	68f8      	ldr	r0, [r7, #12]
 80055c0:	f7ff faa2 	bl	8004b08 <SWAPBYTE>
 80055c4:	4603      	mov	r3, r0
 80055c6:	461a      	mov	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	80da      	strh	r2, [r3, #6]
}
 80055cc:	bf00      	nop
 80055ce:	3710      	adds	r7, #16
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80055de:	2180      	movs	r1, #128	; 0x80
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f000 fc31 	bl	8005e48 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80055e6:	2100      	movs	r1, #0
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f000 fc2d 	bl	8005e48 <USBD_LL_StallEP>
}
 80055ee:	bf00      	nop
 80055f0:	3708      	adds	r7, #8
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}

080055f6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80055f6:	b580      	push	{r7, lr}
 80055f8:	b086      	sub	sp, #24
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	60f8      	str	r0, [r7, #12]
 80055fe:	60b9      	str	r1, [r7, #8]
 8005600:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005602:	2300      	movs	r3, #0
 8005604:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d036      	beq.n	800567a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8005610:	6938      	ldr	r0, [r7, #16]
 8005612:	f000 f836 	bl	8005682 <USBD_GetLen>
 8005616:	4603      	mov	r3, r0
 8005618:	3301      	adds	r3, #1
 800561a:	b29b      	uxth	r3, r3
 800561c:	005b      	lsls	r3, r3, #1
 800561e:	b29a      	uxth	r2, r3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8005624:	7dfb      	ldrb	r3, [r7, #23]
 8005626:	68ba      	ldr	r2, [r7, #8]
 8005628:	4413      	add	r3, r2
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	7812      	ldrb	r2, [r2, #0]
 800562e:	701a      	strb	r2, [r3, #0]
  idx++;
 8005630:	7dfb      	ldrb	r3, [r7, #23]
 8005632:	3301      	adds	r3, #1
 8005634:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8005636:	7dfb      	ldrb	r3, [r7, #23]
 8005638:	68ba      	ldr	r2, [r7, #8]
 800563a:	4413      	add	r3, r2
 800563c:	2203      	movs	r2, #3
 800563e:	701a      	strb	r2, [r3, #0]
  idx++;
 8005640:	7dfb      	ldrb	r3, [r7, #23]
 8005642:	3301      	adds	r3, #1
 8005644:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8005646:	e013      	b.n	8005670 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8005648:	7dfb      	ldrb	r3, [r7, #23]
 800564a:	68ba      	ldr	r2, [r7, #8]
 800564c:	4413      	add	r3, r2
 800564e:	693a      	ldr	r2, [r7, #16]
 8005650:	7812      	ldrb	r2, [r2, #0]
 8005652:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	3301      	adds	r3, #1
 8005658:	613b      	str	r3, [r7, #16]
    idx++;
 800565a:	7dfb      	ldrb	r3, [r7, #23]
 800565c:	3301      	adds	r3, #1
 800565e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8005660:	7dfb      	ldrb	r3, [r7, #23]
 8005662:	68ba      	ldr	r2, [r7, #8]
 8005664:	4413      	add	r3, r2
 8005666:	2200      	movs	r2, #0
 8005668:	701a      	strb	r2, [r3, #0]
    idx++;
 800566a:	7dfb      	ldrb	r3, [r7, #23]
 800566c:	3301      	adds	r3, #1
 800566e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d1e7      	bne.n	8005648 <USBD_GetString+0x52>
 8005678:	e000      	b.n	800567c <USBD_GetString+0x86>
    return;
 800567a:	bf00      	nop
  }
}
 800567c:	3718      	adds	r7, #24
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}

08005682 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005682:	b480      	push	{r7}
 8005684:	b085      	sub	sp, #20
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800568a:	2300      	movs	r3, #0
 800568c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8005692:	e005      	b.n	80056a0 <USBD_GetLen+0x1e>
  {
    len++;
 8005694:	7bfb      	ldrb	r3, [r7, #15]
 8005696:	3301      	adds	r3, #1
 8005698:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	3301      	adds	r3, #1
 800569e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d1f5      	bne.n	8005694 <USBD_GetLen+0x12>
  }

  return len;
 80056a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3714      	adds	r7, #20
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr

080056b6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80056b6:	b580      	push	{r7, lr}
 80056b8:	b084      	sub	sp, #16
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	60f8      	str	r0, [r7, #12]
 80056be:	60b9      	str	r1, [r7, #8]
 80056c0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2202      	movs	r2, #2
 80056c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	68ba      	ldr	r2, [r7, #8]
 80056da:	2100      	movs	r1, #0
 80056dc:	68f8      	ldr	r0, [r7, #12]
 80056de:	f000 fc3c 	bl	8005f5a <USBD_LL_Transmit>

  return USBD_OK;
 80056e2:	2300      	movs	r3, #0
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3710      	adds	r7, #16
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}

080056ec <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	60f8      	str	r0, [r7, #12]
 80056f4:	60b9      	str	r1, [r7, #8]
 80056f6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	68ba      	ldr	r2, [r7, #8]
 80056fc:	2100      	movs	r1, #0
 80056fe:	68f8      	ldr	r0, [r7, #12]
 8005700:	f000 fc2b 	bl	8005f5a <USBD_LL_Transmit>

  return USBD_OK;
 8005704:	2300      	movs	r3, #0
}
 8005706:	4618      	mov	r0, r3
 8005708:	3710      	adds	r7, #16
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}

0800570e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800570e:	b580      	push	{r7, lr}
 8005710:	b084      	sub	sp, #16
 8005712:	af00      	add	r7, sp, #0
 8005714:	60f8      	str	r0, [r7, #12]
 8005716:	60b9      	str	r1, [r7, #8]
 8005718:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2203      	movs	r2, #3
 800571e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	68ba      	ldr	r2, [r7, #8]
 8005736:	2100      	movs	r1, #0
 8005738:	68f8      	ldr	r0, [r7, #12]
 800573a:	f000 fc2f 	bl	8005f9c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800573e:	2300      	movs	r3, #0
}
 8005740:	4618      	mov	r0, r3
 8005742:	3710      	adds	r7, #16
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}

08005748 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af00      	add	r7, sp, #0
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	60b9      	str	r1, [r7, #8]
 8005752:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	68ba      	ldr	r2, [r7, #8]
 8005758:	2100      	movs	r1, #0
 800575a:	68f8      	ldr	r0, [r7, #12]
 800575c:	f000 fc1e 	bl	8005f9c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3710      	adds	r7, #16
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}

0800576a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800576a:	b580      	push	{r7, lr}
 800576c:	b082      	sub	sp, #8
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2204      	movs	r2, #4
 8005776:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800577a:	2300      	movs	r3, #0
 800577c:	2200      	movs	r2, #0
 800577e:	2100      	movs	r1, #0
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f000 fbea 	bl	8005f5a <USBD_LL_Transmit>

  return USBD_OK;
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	3708      	adds	r7, #8
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b082      	sub	sp, #8
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2205      	movs	r2, #5
 800579c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80057a0:	2300      	movs	r3, #0
 80057a2:	2200      	movs	r2, #0
 80057a4:	2100      	movs	r1, #0
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 fbf8 	bl	8005f9c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80057ac:	2300      	movs	r3, #0
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3708      	adds	r7, #8
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
	...

080057b8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80057bc:	2200      	movs	r2, #0
 80057be:	4912      	ldr	r1, [pc, #72]	; (8005808 <MX_USB_DEVICE_Init+0x50>)
 80057c0:	4812      	ldr	r0, [pc, #72]	; (800580c <MX_USB_DEVICE_Init+0x54>)
 80057c2:	f7fe fe90 	bl	80044e6 <USBD_Init>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d001      	beq.n	80057d0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80057cc:	f7fa ff78 	bl	80006c0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 80057d0:	490f      	ldr	r1, [pc, #60]	; (8005810 <MX_USB_DEVICE_Init+0x58>)
 80057d2:	480e      	ldr	r0, [pc, #56]	; (800580c <MX_USB_DEVICE_Init+0x54>)
 80057d4:	f7fe feb7 	bl	8004546 <USBD_RegisterClass>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d001      	beq.n	80057e2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80057de:	f7fa ff6f 	bl	80006c0 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 80057e2:	490c      	ldr	r1, [pc, #48]	; (8005814 <MX_USB_DEVICE_Init+0x5c>)
 80057e4:	4809      	ldr	r0, [pc, #36]	; (800580c <MX_USB_DEVICE_Init+0x54>)
 80057e6:	f7fe fe69 	bl	80044bc <USBD_CUSTOM_HID_RegisterInterface>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d001      	beq.n	80057f4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80057f0:	f7fa ff66 	bl	80006c0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80057f4:	4805      	ldr	r0, [pc, #20]	; (800580c <MX_USB_DEVICE_Init+0x54>)
 80057f6:	f7fe fecd 	bl	8004594 <USBD_Start>
 80057fa:	4603      	mov	r3, r0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d001      	beq.n	8005804 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8005800:	f7fa ff5e 	bl	80006c0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005804:	bf00      	nop
 8005806:	bd80      	pop	{r7, pc}
 8005808:	20000168 	.word	0x20000168
 800580c:	20000278 	.word	0x20000278
 8005810:	20000010 	.word	0x20000010
 8005814:	20000158 	.word	0x20000158

08005818 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8005818:	b480      	push	{r7}
 800581a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800581c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800581e:	4618      	mov	r0, r3
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8005828:	b480      	push	{r7}
 800582a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800582c:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800582e:	4618      	mov	r0, r3
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b082      	sub	sp, #8
 800583c:	af00      	add	r7, sp, #0
 800583e:	4603      	mov	r3, r0
 8005840:	460a      	mov	r2, r1
 8005842:	71fb      	strb	r3, [r7, #7]
 8005844:	4613      	mov	r3, r2
 8005846:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
	  USB_RX_Interrupt();
 8005848:	f7fa fe42 	bl	80004d0 <USB_RX_Interrupt>

  return (0);
 800584c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800584e:	4618      	mov	r0, r3
 8005850:	3708      	adds	r7, #8
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
	...

08005858 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005858:	b480      	push	{r7}
 800585a:	b083      	sub	sp, #12
 800585c:	af00      	add	r7, sp, #0
 800585e:	4603      	mov	r3, r0
 8005860:	6039      	str	r1, [r7, #0]
 8005862:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	2212      	movs	r2, #18
 8005868:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800586a:	4b03      	ldr	r3, [pc, #12]	; (8005878 <USBD_FS_DeviceDescriptor+0x20>)
}
 800586c:	4618      	mov	r0, r3
 800586e:	370c      	adds	r7, #12
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr
 8005878:	20000184 	.word	0x20000184

0800587c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	4603      	mov	r3, r0
 8005884:	6039      	str	r1, [r7, #0]
 8005886:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	2204      	movs	r2, #4
 800588c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800588e:	4b03      	ldr	r3, [pc, #12]	; (800589c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8005890:	4618      	mov	r0, r3
 8005892:	370c      	adds	r7, #12
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr
 800589c:	20000198 	.word	0x20000198

080058a0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b082      	sub	sp, #8
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	4603      	mov	r3, r0
 80058a8:	6039      	str	r1, [r7, #0]
 80058aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80058ac:	79fb      	ldrb	r3, [r7, #7]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d105      	bne.n	80058be <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80058b2:	683a      	ldr	r2, [r7, #0]
 80058b4:	4907      	ldr	r1, [pc, #28]	; (80058d4 <USBD_FS_ProductStrDescriptor+0x34>)
 80058b6:	4808      	ldr	r0, [pc, #32]	; (80058d8 <USBD_FS_ProductStrDescriptor+0x38>)
 80058b8:	f7ff fe9d 	bl	80055f6 <USBD_GetString>
 80058bc:	e004      	b.n	80058c8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80058be:	683a      	ldr	r2, [r7, #0]
 80058c0:	4904      	ldr	r1, [pc, #16]	; (80058d4 <USBD_FS_ProductStrDescriptor+0x34>)
 80058c2:	4805      	ldr	r0, [pc, #20]	; (80058d8 <USBD_FS_ProductStrDescriptor+0x38>)
 80058c4:	f7ff fe97 	bl	80055f6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80058c8:	4b02      	ldr	r3, [pc, #8]	; (80058d4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3708      	adds	r7, #8
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}
 80058d2:	bf00      	nop
 80058d4:	20000548 	.word	0x20000548
 80058d8:	080060d8 	.word	0x080060d8

080058dc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b082      	sub	sp, #8
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	4603      	mov	r3, r0
 80058e4:	6039      	str	r1, [r7, #0]
 80058e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80058e8:	683a      	ldr	r2, [r7, #0]
 80058ea:	4904      	ldr	r1, [pc, #16]	; (80058fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80058ec:	4804      	ldr	r0, [pc, #16]	; (8005900 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80058ee:	f7ff fe82 	bl	80055f6 <USBD_GetString>
  return USBD_StrDesc;
 80058f2:	4b02      	ldr	r3, [pc, #8]	; (80058fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3708      	adds	r7, #8
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	20000548 	.word	0x20000548
 8005900:	080060f8 	.word	0x080060f8

08005904 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b082      	sub	sp, #8
 8005908:	af00      	add	r7, sp, #0
 800590a:	4603      	mov	r3, r0
 800590c:	6039      	str	r1, [r7, #0]
 800590e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	221a      	movs	r2, #26
 8005914:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8005916:	f000 f843 	bl	80059a0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800591a:	4b02      	ldr	r3, [pc, #8]	; (8005924 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800591c:	4618      	mov	r0, r3
 800591e:	3708      	adds	r7, #8
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}
 8005924:	2000019c 	.word	0x2000019c

08005928 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b082      	sub	sp, #8
 800592c:	af00      	add	r7, sp, #0
 800592e:	4603      	mov	r3, r0
 8005930:	6039      	str	r1, [r7, #0]
 8005932:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8005934:	79fb      	ldrb	r3, [r7, #7]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d105      	bne.n	8005946 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800593a:	683a      	ldr	r2, [r7, #0]
 800593c:	4907      	ldr	r1, [pc, #28]	; (800595c <USBD_FS_ConfigStrDescriptor+0x34>)
 800593e:	4808      	ldr	r0, [pc, #32]	; (8005960 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005940:	f7ff fe59 	bl	80055f6 <USBD_GetString>
 8005944:	e004      	b.n	8005950 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005946:	683a      	ldr	r2, [r7, #0]
 8005948:	4904      	ldr	r1, [pc, #16]	; (800595c <USBD_FS_ConfigStrDescriptor+0x34>)
 800594a:	4805      	ldr	r0, [pc, #20]	; (8005960 <USBD_FS_ConfigStrDescriptor+0x38>)
 800594c:	f7ff fe53 	bl	80055f6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005950:	4b02      	ldr	r3, [pc, #8]	; (800595c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8005952:	4618      	mov	r0, r3
 8005954:	3708      	adds	r7, #8
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	20000548 	.word	0x20000548
 8005960:	0800610c 	.word	0x0800610c

08005964 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b082      	sub	sp, #8
 8005968:	af00      	add	r7, sp, #0
 800596a:	4603      	mov	r3, r0
 800596c:	6039      	str	r1, [r7, #0]
 800596e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005970:	79fb      	ldrb	r3, [r7, #7]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d105      	bne.n	8005982 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005976:	683a      	ldr	r2, [r7, #0]
 8005978:	4907      	ldr	r1, [pc, #28]	; (8005998 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800597a:	4808      	ldr	r0, [pc, #32]	; (800599c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800597c:	f7ff fe3b 	bl	80055f6 <USBD_GetString>
 8005980:	e004      	b.n	800598c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005982:	683a      	ldr	r2, [r7, #0]
 8005984:	4904      	ldr	r1, [pc, #16]	; (8005998 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005986:	4805      	ldr	r0, [pc, #20]	; (800599c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005988:	f7ff fe35 	bl	80055f6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800598c:	4b02      	ldr	r3, [pc, #8]	; (8005998 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800598e:	4618      	mov	r0, r3
 8005990:	3708      	adds	r7, #8
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	20000548 	.word	0x20000548
 800599c:	08006120 	.word	0x08006120

080059a0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80059a6:	4b0f      	ldr	r3, [pc, #60]	; (80059e4 <Get_SerialNum+0x44>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80059ac:	4b0e      	ldr	r3, [pc, #56]	; (80059e8 <Get_SerialNum+0x48>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80059b2:	4b0e      	ldr	r3, [pc, #56]	; (80059ec <Get_SerialNum+0x4c>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80059b8:	68fa      	ldr	r2, [r7, #12]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4413      	add	r3, r2
 80059be:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d009      	beq.n	80059da <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80059c6:	2208      	movs	r2, #8
 80059c8:	4909      	ldr	r1, [pc, #36]	; (80059f0 <Get_SerialNum+0x50>)
 80059ca:	68f8      	ldr	r0, [r7, #12]
 80059cc:	f000 f814 	bl	80059f8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80059d0:	2204      	movs	r2, #4
 80059d2:	4908      	ldr	r1, [pc, #32]	; (80059f4 <Get_SerialNum+0x54>)
 80059d4:	68b8      	ldr	r0, [r7, #8]
 80059d6:	f000 f80f 	bl	80059f8 <IntToUnicode>
  }
}
 80059da:	bf00      	nop
 80059dc:	3710      	adds	r7, #16
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	1fff7a10 	.word	0x1fff7a10
 80059e8:	1fff7a14 	.word	0x1fff7a14
 80059ec:	1fff7a18 	.word	0x1fff7a18
 80059f0:	2000019e 	.word	0x2000019e
 80059f4:	200001ae 	.word	0x200001ae

080059f8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b087      	sub	sp, #28
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	60f8      	str	r0, [r7, #12]
 8005a00:	60b9      	str	r1, [r7, #8]
 8005a02:	4613      	mov	r3, r2
 8005a04:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8005a06:	2300      	movs	r3, #0
 8005a08:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	75fb      	strb	r3, [r7, #23]
 8005a0e:	e027      	b.n	8005a60 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	0f1b      	lsrs	r3, r3, #28
 8005a14:	2b09      	cmp	r3, #9
 8005a16:	d80b      	bhi.n	8005a30 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	0f1b      	lsrs	r3, r3, #28
 8005a1c:	b2da      	uxtb	r2, r3
 8005a1e:	7dfb      	ldrb	r3, [r7, #23]
 8005a20:	005b      	lsls	r3, r3, #1
 8005a22:	4619      	mov	r1, r3
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	440b      	add	r3, r1
 8005a28:	3230      	adds	r2, #48	; 0x30
 8005a2a:	b2d2      	uxtb	r2, r2
 8005a2c:	701a      	strb	r2, [r3, #0]
 8005a2e:	e00a      	b.n	8005a46 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	0f1b      	lsrs	r3, r3, #28
 8005a34:	b2da      	uxtb	r2, r3
 8005a36:	7dfb      	ldrb	r3, [r7, #23]
 8005a38:	005b      	lsls	r3, r3, #1
 8005a3a:	4619      	mov	r1, r3
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	440b      	add	r3, r1
 8005a40:	3237      	adds	r2, #55	; 0x37
 8005a42:	b2d2      	uxtb	r2, r2
 8005a44:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	011b      	lsls	r3, r3, #4
 8005a4a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8005a4c:	7dfb      	ldrb	r3, [r7, #23]
 8005a4e:	005b      	lsls	r3, r3, #1
 8005a50:	3301      	adds	r3, #1
 8005a52:	68ba      	ldr	r2, [r7, #8]
 8005a54:	4413      	add	r3, r2
 8005a56:	2200      	movs	r2, #0
 8005a58:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8005a5a:	7dfb      	ldrb	r3, [r7, #23]
 8005a5c:	3301      	adds	r3, #1
 8005a5e:	75fb      	strb	r3, [r7, #23]
 8005a60:	7dfa      	ldrb	r2, [r7, #23]
 8005a62:	79fb      	ldrb	r3, [r7, #7]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d3d3      	bcc.n	8005a10 <IntToUnicode+0x18>
  }
}
 8005a68:	bf00      	nop
 8005a6a:	bf00      	nop
 8005a6c:	371c      	adds	r7, #28
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr
	...

08005a78 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b08a      	sub	sp, #40	; 0x28
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a80:	f107 0314 	add.w	r3, r7, #20
 8005a84:	2200      	movs	r2, #0
 8005a86:	601a      	str	r2, [r3, #0]
 8005a88:	605a      	str	r2, [r3, #4]
 8005a8a:	609a      	str	r2, [r3, #8]
 8005a8c:	60da      	str	r2, [r3, #12]
 8005a8e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005a98:	d13a      	bne.n	8005b10 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	613b      	str	r3, [r7, #16]
 8005a9e:	4b1e      	ldr	r3, [pc, #120]	; (8005b18 <HAL_PCD_MspInit+0xa0>)
 8005aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aa2:	4a1d      	ldr	r2, [pc, #116]	; (8005b18 <HAL_PCD_MspInit+0xa0>)
 8005aa4:	f043 0301 	orr.w	r3, r3, #1
 8005aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8005aaa:	4b1b      	ldr	r3, [pc, #108]	; (8005b18 <HAL_PCD_MspInit+0xa0>)
 8005aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aae:	f003 0301 	and.w	r3, r3, #1
 8005ab2:	613b      	str	r3, [r7, #16]
 8005ab4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005ab6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005aba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005abc:	2302      	movs	r3, #2
 8005abe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005ac8:	230a      	movs	r3, #10
 8005aca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005acc:	f107 0314 	add.w	r3, r7, #20
 8005ad0:	4619      	mov	r1, r3
 8005ad2:	4812      	ldr	r0, [pc, #72]	; (8005b1c <HAL_PCD_MspInit+0xa4>)
 8005ad4:	f7fb f83a 	bl	8000b4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005ad8:	4b0f      	ldr	r3, [pc, #60]	; (8005b18 <HAL_PCD_MspInit+0xa0>)
 8005ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005adc:	4a0e      	ldr	r2, [pc, #56]	; (8005b18 <HAL_PCD_MspInit+0xa0>)
 8005ade:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ae2:	6353      	str	r3, [r2, #52]	; 0x34
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	60fb      	str	r3, [r7, #12]
 8005ae8:	4b0b      	ldr	r3, [pc, #44]	; (8005b18 <HAL_PCD_MspInit+0xa0>)
 8005aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aec:	4a0a      	ldr	r2, [pc, #40]	; (8005b18 <HAL_PCD_MspInit+0xa0>)
 8005aee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005af2:	6453      	str	r3, [r2, #68]	; 0x44
 8005af4:	4b08      	ldr	r3, [pc, #32]	; (8005b18 <HAL_PCD_MspInit+0xa0>)
 8005af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005af8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005afc:	60fb      	str	r3, [r7, #12]
 8005afe:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8005b00:	2200      	movs	r2, #0
 8005b02:	2100      	movs	r1, #0
 8005b04:	2043      	movs	r0, #67	; 0x43
 8005b06:	f7fa ffea 	bl	8000ade <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8005b0a:	2043      	movs	r0, #67	; 0x43
 8005b0c:	f7fb f803 	bl	8000b16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8005b10:	bf00      	nop
 8005b12:	3728      	adds	r7, #40	; 0x28
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	40023800 	.word	0x40023800
 8005b1c:	40020000 	.word	0x40020000

08005b20 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b082      	sub	sp, #8
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005b34:	4619      	mov	r1, r3
 8005b36:	4610      	mov	r0, r2
 8005b38:	f7fe fd77 	bl	800462a <USBD_LL_SetupStage>
}
 8005b3c:	bf00      	nop
 8005b3e:	3708      	adds	r7, #8
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b082      	sub	sp, #8
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8005b56:	78fa      	ldrb	r2, [r7, #3]
 8005b58:	6879      	ldr	r1, [r7, #4]
 8005b5a:	4613      	mov	r3, r2
 8005b5c:	00db      	lsls	r3, r3, #3
 8005b5e:	1a9b      	subs	r3, r3, r2
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	440b      	add	r3, r1
 8005b64:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	78fb      	ldrb	r3, [r7, #3]
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	f7fe fdb1 	bl	80046d4 <USBD_LL_DataOutStage>
}
 8005b72:	bf00      	nop
 8005b74:	3708      	adds	r7, #8
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}

08005b7a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005b7a:	b580      	push	{r7, lr}
 8005b7c:	b082      	sub	sp, #8
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	6078      	str	r0, [r7, #4]
 8005b82:	460b      	mov	r3, r1
 8005b84:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8005b8c:	78fa      	ldrb	r2, [r7, #3]
 8005b8e:	6879      	ldr	r1, [r7, #4]
 8005b90:	4613      	mov	r3, r2
 8005b92:	00db      	lsls	r3, r3, #3
 8005b94:	1a9b      	subs	r3, r3, r2
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	440b      	add	r3, r1
 8005b9a:	3348      	adds	r3, #72	; 0x48
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	78fb      	ldrb	r3, [r7, #3]
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	f7fe fdfa 	bl	800479a <USBD_LL_DataInStage>
}
 8005ba6:	bf00      	nop
 8005ba8:	3708      	adds	r7, #8
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}

08005bae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005bae:	b580      	push	{r7, lr}
 8005bb0:	b082      	sub	sp, #8
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f7fe ff0e 	bl	80049de <USBD_LL_SOF>
}
 8005bc2:	bf00      	nop
 8005bc4:	3708      	adds	r7, #8
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}

08005bca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005bca:	b580      	push	{r7, lr}
 8005bcc:	b084      	sub	sp, #16
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	2b02      	cmp	r3, #2
 8005bdc:	d001      	beq.n	8005be2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8005bde:	f7fa fd6f 	bl	80006c0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005be8:	7bfa      	ldrb	r2, [r7, #15]
 8005bea:	4611      	mov	r1, r2
 8005bec:	4618      	mov	r0, r3
 8005bee:	f7fe feb8 	bl	8004962 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f7fe fe64 	bl	80048c6 <USBD_LL_Reset>
}
 8005bfe:	bf00      	nop
 8005c00:	3710      	adds	r7, #16
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
	...

08005c08 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b082      	sub	sp, #8
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005c16:	4618      	mov	r0, r3
 8005c18:	f7fe feb3 	bl	8004982 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	6812      	ldr	r2, [r2, #0]
 8005c2a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005c2e:	f043 0301 	orr.w	r3, r3, #1
 8005c32:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6a1b      	ldr	r3, [r3, #32]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d005      	beq.n	8005c48 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005c3c:	4b04      	ldr	r3, [pc, #16]	; (8005c50 <HAL_PCD_SuspendCallback+0x48>)
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	4a03      	ldr	r2, [pc, #12]	; (8005c50 <HAL_PCD_SuspendCallback+0x48>)
 8005c42:	f043 0306 	orr.w	r3, r3, #6
 8005c46:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8005c48:	bf00      	nop
 8005c4a:	3708      	adds	r7, #8
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}
 8005c50:	e000ed00 	.word	0xe000ed00

08005c54 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b082      	sub	sp, #8
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005c62:	4618      	mov	r0, r3
 8005c64:	f7fe fea3 	bl	80049ae <USBD_LL_Resume>
}
 8005c68:	bf00      	nop
 8005c6a:	3708      	adds	r7, #8
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}

08005c70 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b082      	sub	sp, #8
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	460b      	mov	r3, r1
 8005c7a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005c82:	78fa      	ldrb	r2, [r7, #3]
 8005c84:	4611      	mov	r1, r2
 8005c86:	4618      	mov	r0, r3
 8005c88:	f7fe fef1 	bl	8004a6e <USBD_LL_IsoOUTIncomplete>
}
 8005c8c:	bf00      	nop
 8005c8e:	3708      	adds	r7, #8
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b082      	sub	sp, #8
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	460b      	mov	r3, r1
 8005c9e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005ca6:	78fa      	ldrb	r2, [r7, #3]
 8005ca8:	4611      	mov	r1, r2
 8005caa:	4618      	mov	r0, r3
 8005cac:	f7fe feb9 	bl	8004a22 <USBD_LL_IsoINIncomplete>
}
 8005cb0:	bf00      	nop
 8005cb2:	3708      	adds	r7, #8
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}

08005cb8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b082      	sub	sp, #8
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f7fe fef7 	bl	8004aba <USBD_LL_DevConnected>
}
 8005ccc:	bf00      	nop
 8005cce:	3708      	adds	r7, #8
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}

08005cd4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b082      	sub	sp, #8
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f7fe fef4 	bl	8004ad0 <USBD_LL_DevDisconnected>
}
 8005ce8:	bf00      	nop
 8005cea:	3708      	adds	r7, #8
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b082      	sub	sp, #8
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d13c      	bne.n	8005d7a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8005d00:	4a20      	ldr	r2, [pc, #128]	; (8005d84 <USBD_LL_Init+0x94>)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4a1e      	ldr	r2, [pc, #120]	; (8005d84 <USBD_LL_Init+0x94>)
 8005d0c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8005d10:	4b1c      	ldr	r3, [pc, #112]	; (8005d84 <USBD_LL_Init+0x94>)
 8005d12:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005d16:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8005d18:	4b1a      	ldr	r3, [pc, #104]	; (8005d84 <USBD_LL_Init+0x94>)
 8005d1a:	2204      	movs	r2, #4
 8005d1c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8005d1e:	4b19      	ldr	r3, [pc, #100]	; (8005d84 <USBD_LL_Init+0x94>)
 8005d20:	2202      	movs	r2, #2
 8005d22:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8005d24:	4b17      	ldr	r3, [pc, #92]	; (8005d84 <USBD_LL_Init+0x94>)
 8005d26:	2200      	movs	r2, #0
 8005d28:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8005d2a:	4b16      	ldr	r3, [pc, #88]	; (8005d84 <USBD_LL_Init+0x94>)
 8005d2c:	2202      	movs	r2, #2
 8005d2e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8005d30:	4b14      	ldr	r3, [pc, #80]	; (8005d84 <USBD_LL_Init+0x94>)
 8005d32:	2200      	movs	r2, #0
 8005d34:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8005d36:	4b13      	ldr	r3, [pc, #76]	; (8005d84 <USBD_LL_Init+0x94>)
 8005d38:	2200      	movs	r2, #0
 8005d3a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8005d3c:	4b11      	ldr	r3, [pc, #68]	; (8005d84 <USBD_LL_Init+0x94>)
 8005d3e:	2200      	movs	r2, #0
 8005d40:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8005d42:	4b10      	ldr	r3, [pc, #64]	; (8005d84 <USBD_LL_Init+0x94>)
 8005d44:	2200      	movs	r2, #0
 8005d46:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8005d48:	4b0e      	ldr	r3, [pc, #56]	; (8005d84 <USBD_LL_Init+0x94>)
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8005d4e:	480d      	ldr	r0, [pc, #52]	; (8005d84 <USBD_LL_Init+0x94>)
 8005d50:	f7fb f880 	bl	8000e54 <HAL_PCD_Init>
 8005d54:	4603      	mov	r3, r0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d001      	beq.n	8005d5e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8005d5a:	f7fa fcb1 	bl	80006c0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8005d5e:	2180      	movs	r1, #128	; 0x80
 8005d60:	4808      	ldr	r0, [pc, #32]	; (8005d84 <USBD_LL_Init+0x94>)
 8005d62:	f7fc f9c6 	bl	80020f2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8005d66:	2240      	movs	r2, #64	; 0x40
 8005d68:	2100      	movs	r1, #0
 8005d6a:	4806      	ldr	r0, [pc, #24]	; (8005d84 <USBD_LL_Init+0x94>)
 8005d6c:	f7fc f97a 	bl	8002064 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8005d70:	2280      	movs	r2, #128	; 0x80
 8005d72:	2101      	movs	r1, #1
 8005d74:	4803      	ldr	r0, [pc, #12]	; (8005d84 <USBD_LL_Init+0x94>)
 8005d76:	f7fc f975 	bl	8002064 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8005d7a:	2300      	movs	r3, #0
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3708      	adds	r7, #8
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	20000748 	.word	0x20000748

08005d88 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005d90:	2300      	movs	r3, #0
 8005d92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005d94:	2300      	movs	r3, #0
 8005d96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f7fb f975 	bl	800108e <HAL_PCD_Start>
 8005da4:	4603      	mov	r3, r0
 8005da6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005da8:	7bfb      	ldrb	r3, [r7, #15]
 8005daa:	4618      	mov	r0, r3
 8005dac:	f000 f930 	bl	8006010 <USBD_Get_USB_Status>
 8005db0:	4603      	mov	r3, r0
 8005db2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005db4:	7bbb      	ldrb	r3, [r7, #14]
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3710      	adds	r7, #16
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}

08005dbe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8005dbe:	b580      	push	{r7, lr}
 8005dc0:	b084      	sub	sp, #16
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	6078      	str	r0, [r7, #4]
 8005dc6:	4608      	mov	r0, r1
 8005dc8:	4611      	mov	r1, r2
 8005dca:	461a      	mov	r2, r3
 8005dcc:	4603      	mov	r3, r0
 8005dce:	70fb      	strb	r3, [r7, #3]
 8005dd0:	460b      	mov	r3, r1
 8005dd2:	70bb      	strb	r3, [r7, #2]
 8005dd4:	4613      	mov	r3, r2
 8005dd6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8005de6:	78bb      	ldrb	r3, [r7, #2]
 8005de8:	883a      	ldrh	r2, [r7, #0]
 8005dea:	78f9      	ldrb	r1, [r7, #3]
 8005dec:	f7fb fd59 	bl	80018a2 <HAL_PCD_EP_Open>
 8005df0:	4603      	mov	r3, r0
 8005df2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005df4:	7bfb      	ldrb	r3, [r7, #15]
 8005df6:	4618      	mov	r0, r3
 8005df8:	f000 f90a 	bl	8006010 <USBD_Get_USB_Status>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005e00:	7bbb      	ldrb	r3, [r7, #14]
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3710      	adds	r7, #16
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}

08005e0a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005e0a:	b580      	push	{r7, lr}
 8005e0c:	b084      	sub	sp, #16
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	6078      	str	r0, [r7, #4]
 8005e12:	460b      	mov	r3, r1
 8005e14:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005e16:	2300      	movs	r3, #0
 8005e18:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005e24:	78fa      	ldrb	r2, [r7, #3]
 8005e26:	4611      	mov	r1, r2
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f7fb fda2 	bl	8001972 <HAL_PCD_EP_Close>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005e32:	7bfb      	ldrb	r3, [r7, #15]
 8005e34:	4618      	mov	r0, r3
 8005e36:	f000 f8eb 	bl	8006010 <USBD_Get_USB_Status>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005e3e:	7bbb      	ldrb	r3, [r7, #14]
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3710      	adds	r7, #16
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	460b      	mov	r3, r1
 8005e52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005e54:	2300      	movs	r3, #0
 8005e56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005e62:	78fa      	ldrb	r2, [r7, #3]
 8005e64:	4611      	mov	r1, r2
 8005e66:	4618      	mov	r0, r3
 8005e68:	f7fb fe62 	bl	8001b30 <HAL_PCD_EP_SetStall>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005e70:	7bfb      	ldrb	r3, [r7, #15]
 8005e72:	4618      	mov	r0, r3
 8005e74:	f000 f8cc 	bl	8006010 <USBD_Get_USB_Status>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005e7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3710      	adds	r7, #16
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}

08005e86 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005e86:	b580      	push	{r7, lr}
 8005e88:	b084      	sub	sp, #16
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
 8005e8e:	460b      	mov	r3, r1
 8005e90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005e92:	2300      	movs	r3, #0
 8005e94:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005e96:	2300      	movs	r3, #0
 8005e98:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005ea0:	78fa      	ldrb	r2, [r7, #3]
 8005ea2:	4611      	mov	r1, r2
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f7fb fea7 	bl	8001bf8 <HAL_PCD_EP_ClrStall>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005eae:	7bfb      	ldrb	r3, [r7, #15]
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f000 f8ad 	bl	8006010 <USBD_Get_USB_Status>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005eba:	7bbb      	ldrb	r3, [r7, #14]
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3710      	adds	r7, #16
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}

08005ec4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b085      	sub	sp, #20
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	460b      	mov	r3, r1
 8005ece:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005ed6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8005ed8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	da0b      	bge.n	8005ef8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8005ee0:	78fb      	ldrb	r3, [r7, #3]
 8005ee2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005ee6:	68f9      	ldr	r1, [r7, #12]
 8005ee8:	4613      	mov	r3, r2
 8005eea:	00db      	lsls	r3, r3, #3
 8005eec:	1a9b      	subs	r3, r3, r2
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	440b      	add	r3, r1
 8005ef2:	333e      	adds	r3, #62	; 0x3e
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	e00b      	b.n	8005f10 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8005ef8:	78fb      	ldrb	r3, [r7, #3]
 8005efa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005efe:	68f9      	ldr	r1, [r7, #12]
 8005f00:	4613      	mov	r3, r2
 8005f02:	00db      	lsls	r3, r3, #3
 8005f04:	1a9b      	subs	r3, r3, r2
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	440b      	add	r3, r1
 8005f0a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005f0e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3714      	adds	r7, #20
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b084      	sub	sp, #16
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	460b      	mov	r3, r1
 8005f26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005f36:	78fa      	ldrb	r2, [r7, #3]
 8005f38:	4611      	mov	r1, r2
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f7fb fc8c 	bl	8001858 <HAL_PCD_SetAddress>
 8005f40:	4603      	mov	r3, r0
 8005f42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005f44:	7bfb      	ldrb	r3, [r7, #15]
 8005f46:	4618      	mov	r0, r3
 8005f48:	f000 f862 	bl	8006010 <USBD_Get_USB_Status>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005f50:	7bbb      	ldrb	r3, [r7, #14]
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3710      	adds	r7, #16
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}

08005f5a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8005f5a:	b580      	push	{r7, lr}
 8005f5c:	b086      	sub	sp, #24
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	60f8      	str	r0, [r7, #12]
 8005f62:	607a      	str	r2, [r7, #4]
 8005f64:	603b      	str	r3, [r7, #0]
 8005f66:	460b      	mov	r3, r1
 8005f68:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8005f78:	7af9      	ldrb	r1, [r7, #11]
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	f7fb fd8d 	bl	8001a9c <HAL_PCD_EP_Transmit>
 8005f82:	4603      	mov	r3, r0
 8005f84:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005f86:	7dfb      	ldrb	r3, [r7, #23]
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f000 f841 	bl	8006010 <USBD_Get_USB_Status>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8005f92:	7dbb      	ldrb	r3, [r7, #22]
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3718      	adds	r7, #24
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b086      	sub	sp, #24
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	60f8      	str	r0, [r7, #12]
 8005fa4:	607a      	str	r2, [r7, #4]
 8005fa6:	603b      	str	r3, [r7, #0]
 8005fa8:	460b      	mov	r3, r1
 8005faa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005fac:	2300      	movs	r3, #0
 8005fae:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8005fba:	7af9      	ldrb	r1, [r7, #11]
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	f7fb fd21 	bl	8001a06 <HAL_PCD_EP_Receive>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005fc8:	7dfb      	ldrb	r3, [r7, #23]
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f000 f820 	bl	8006010 <USBD_Get_USB_Status>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8005fd4:	7dbb      	ldrb	r3, [r7, #22]
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3718      	adds	r7, #24
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}
	...

08005fe0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8005fe8:	4b03      	ldr	r3, [pc, #12]	; (8005ff8 <USBD_static_malloc+0x18>)
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	370c      	adds	r7, #12
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr
 8005ff6:	bf00      	nop
 8005ff8:	200001d8 	.word	0x200001d8

08005ffc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]

}
 8006004:	bf00      	nop
 8006006:	370c      	adds	r7, #12
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006010:	b480      	push	{r7}
 8006012:	b085      	sub	sp, #20
 8006014:	af00      	add	r7, sp, #0
 8006016:	4603      	mov	r3, r0
 8006018:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800601a:	2300      	movs	r3, #0
 800601c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800601e:	79fb      	ldrb	r3, [r7, #7]
 8006020:	2b03      	cmp	r3, #3
 8006022:	d817      	bhi.n	8006054 <USBD_Get_USB_Status+0x44>
 8006024:	a201      	add	r2, pc, #4	; (adr r2, 800602c <USBD_Get_USB_Status+0x1c>)
 8006026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800602a:	bf00      	nop
 800602c:	0800603d 	.word	0x0800603d
 8006030:	08006043 	.word	0x08006043
 8006034:	08006049 	.word	0x08006049
 8006038:	0800604f 	.word	0x0800604f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800603c:	2300      	movs	r3, #0
 800603e:	73fb      	strb	r3, [r7, #15]
    break;
 8006040:	e00b      	b.n	800605a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006042:	2303      	movs	r3, #3
 8006044:	73fb      	strb	r3, [r7, #15]
    break;
 8006046:	e008      	b.n	800605a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006048:	2301      	movs	r3, #1
 800604a:	73fb      	strb	r3, [r7, #15]
    break;
 800604c:	e005      	b.n	800605a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800604e:	2303      	movs	r3, #3
 8006050:	73fb      	strb	r3, [r7, #15]
    break;
 8006052:	e002      	b.n	800605a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006054:	2303      	movs	r3, #3
 8006056:	73fb      	strb	r3, [r7, #15]
    break;
 8006058:	bf00      	nop
  }
  return usb_status;
 800605a:	7bfb      	ldrb	r3, [r7, #15]
}
 800605c:	4618      	mov	r0, r3
 800605e:	3714      	adds	r7, #20
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr

08006068 <__libc_init_array>:
 8006068:	b570      	push	{r4, r5, r6, lr}
 800606a:	4d0d      	ldr	r5, [pc, #52]	; (80060a0 <__libc_init_array+0x38>)
 800606c:	4c0d      	ldr	r4, [pc, #52]	; (80060a4 <__libc_init_array+0x3c>)
 800606e:	1b64      	subs	r4, r4, r5
 8006070:	10a4      	asrs	r4, r4, #2
 8006072:	2600      	movs	r6, #0
 8006074:	42a6      	cmp	r6, r4
 8006076:	d109      	bne.n	800608c <__libc_init_array+0x24>
 8006078:	4d0b      	ldr	r5, [pc, #44]	; (80060a8 <__libc_init_array+0x40>)
 800607a:	4c0c      	ldr	r4, [pc, #48]	; (80060ac <__libc_init_array+0x44>)
 800607c:	f000 f820 	bl	80060c0 <_init>
 8006080:	1b64      	subs	r4, r4, r5
 8006082:	10a4      	asrs	r4, r4, #2
 8006084:	2600      	movs	r6, #0
 8006086:	42a6      	cmp	r6, r4
 8006088:	d105      	bne.n	8006096 <__libc_init_array+0x2e>
 800608a:	bd70      	pop	{r4, r5, r6, pc}
 800608c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006090:	4798      	blx	r3
 8006092:	3601      	adds	r6, #1
 8006094:	e7ee      	b.n	8006074 <__libc_init_array+0xc>
 8006096:	f855 3b04 	ldr.w	r3, [r5], #4
 800609a:	4798      	blx	r3
 800609c:	3601      	adds	r6, #1
 800609e:	e7f2      	b.n	8006086 <__libc_init_array+0x1e>
 80060a0:	08006150 	.word	0x08006150
 80060a4:	08006150 	.word	0x08006150
 80060a8:	08006150 	.word	0x08006150
 80060ac:	08006154 	.word	0x08006154

080060b0 <memset>:
 80060b0:	4402      	add	r2, r0
 80060b2:	4603      	mov	r3, r0
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d100      	bne.n	80060ba <memset+0xa>
 80060b8:	4770      	bx	lr
 80060ba:	f803 1b01 	strb.w	r1, [r3], #1
 80060be:	e7f9      	b.n	80060b4 <memset+0x4>

080060c0 <_init>:
 80060c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060c2:	bf00      	nop
 80060c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060c6:	bc08      	pop	{r3}
 80060c8:	469e      	mov	lr, r3
 80060ca:	4770      	bx	lr

080060cc <_fini>:
 80060cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ce:	bf00      	nop
 80060d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060d2:	bc08      	pop	{r3}
 80060d4:	469e      	mov	lr, r3
 80060d6:	4770      	bx	lr
