
3_Force_Sensing_Register.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004280  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08004420  08004420  00014420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004504  08004504  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004504  08004504  00014504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800450c  0800450c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800450c  0800450c  0001450c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004510  08004510  00014510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004514  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  20000070  08004584  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000214  08004584  00020214  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b3e6  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001db1  00000000  00000000  0002b486  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008b8  00000000  00000000  0002d238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000800  00000000  00000000  0002daf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017172  00000000  00000000  0002e2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a90d  00000000  00000000  00045462  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091a09  00000000  00000000  0004fd6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e1778  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000280c  00000000  00000000  000e17cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004408 	.word	0x08004408

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08004408 	.word	0x08004408

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__gedf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpdf2+0x4>
 800060e:	bf00      	nop

08000610 <__ledf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpdf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpdf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000624:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000628:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800062c:	bf18      	it	ne
 800062e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000632:	d01b      	beq.n	800066c <__cmpdf2+0x54>
 8000634:	b001      	add	sp, #4
 8000636:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800063a:	bf0c      	ite	eq
 800063c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000640:	ea91 0f03 	teqne	r1, r3
 8000644:	bf02      	ittt	eq
 8000646:	ea90 0f02 	teqeq	r0, r2
 800064a:	2000      	moveq	r0, #0
 800064c:	4770      	bxeq	lr
 800064e:	f110 0f00 	cmn.w	r0, #0
 8000652:	ea91 0f03 	teq	r1, r3
 8000656:	bf58      	it	pl
 8000658:	4299      	cmppl	r1, r3
 800065a:	bf08      	it	eq
 800065c:	4290      	cmpeq	r0, r2
 800065e:	bf2c      	ite	cs
 8000660:	17d8      	asrcs	r0, r3, #31
 8000662:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000666:	f040 0001 	orr.w	r0, r0, #1
 800066a:	4770      	bx	lr
 800066c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000670:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000674:	d102      	bne.n	800067c <__cmpdf2+0x64>
 8000676:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800067a:	d107      	bne.n	800068c <__cmpdf2+0x74>
 800067c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000680:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000684:	d1d6      	bne.n	8000634 <__cmpdf2+0x1c>
 8000686:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800068a:	d0d3      	beq.n	8000634 <__cmpdf2+0x1c>
 800068c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <__aeabi_cdrcmple>:
 8000694:	4684      	mov	ip, r0
 8000696:	4610      	mov	r0, r2
 8000698:	4662      	mov	r2, ip
 800069a:	468c      	mov	ip, r1
 800069c:	4619      	mov	r1, r3
 800069e:	4663      	mov	r3, ip
 80006a0:	e000      	b.n	80006a4 <__aeabi_cdcmpeq>
 80006a2:	bf00      	nop

080006a4 <__aeabi_cdcmpeq>:
 80006a4:	b501      	push	{r0, lr}
 80006a6:	f7ff ffb7 	bl	8000618 <__cmpdf2>
 80006aa:	2800      	cmp	r0, #0
 80006ac:	bf48      	it	mi
 80006ae:	f110 0f00 	cmnmi.w	r0, #0
 80006b2:	bd01      	pop	{r0, pc}

080006b4 <__aeabi_dcmpeq>:
 80006b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006b8:	f7ff fff4 	bl	80006a4 <__aeabi_cdcmpeq>
 80006bc:	bf0c      	ite	eq
 80006be:	2001      	moveq	r0, #1
 80006c0:	2000      	movne	r0, #0
 80006c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006c6:	bf00      	nop

080006c8 <__aeabi_dcmplt>:
 80006c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006cc:	f7ff ffea 	bl	80006a4 <__aeabi_cdcmpeq>
 80006d0:	bf34      	ite	cc
 80006d2:	2001      	movcc	r0, #1
 80006d4:	2000      	movcs	r0, #0
 80006d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006da:	bf00      	nop

080006dc <__aeabi_dcmple>:
 80006dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e0:	f7ff ffe0 	bl	80006a4 <__aeabi_cdcmpeq>
 80006e4:	bf94      	ite	ls
 80006e6:	2001      	movls	r0, #1
 80006e8:	2000      	movhi	r0, #0
 80006ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ee:	bf00      	nop

080006f0 <__aeabi_dcmpge>:
 80006f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f4:	f7ff ffce 	bl	8000694 <__aeabi_cdrcmple>
 80006f8:	bf94      	ite	ls
 80006fa:	2001      	movls	r0, #1
 80006fc:	2000      	movhi	r0, #0
 80006fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000702:	bf00      	nop

08000704 <__aeabi_dcmpgt>:
 8000704:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000708:	f7ff ffc4 	bl	8000694 <__aeabi_cdrcmple>
 800070c:	bf34      	ite	cc
 800070e:	2001      	movcc	r0, #1
 8000710:	2000      	movcs	r0, #0
 8000712:	f85d fb08 	ldr.w	pc, [sp], #8
 8000716:	bf00      	nop

08000718 <__aeabi_uldivmod>:
 8000718:	b953      	cbnz	r3, 8000730 <__aeabi_uldivmod+0x18>
 800071a:	b94a      	cbnz	r2, 8000730 <__aeabi_uldivmod+0x18>
 800071c:	2900      	cmp	r1, #0
 800071e:	bf08      	it	eq
 8000720:	2800      	cmpeq	r0, #0
 8000722:	bf1c      	itt	ne
 8000724:	f04f 31ff 	movne.w	r1, #4294967295
 8000728:	f04f 30ff 	movne.w	r0, #4294967295
 800072c:	f000 b96e 	b.w	8000a0c <__aeabi_idiv0>
 8000730:	f1ad 0c08 	sub.w	ip, sp, #8
 8000734:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000738:	f000 f806 	bl	8000748 <__udivmoddi4>
 800073c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000740:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000744:	b004      	add	sp, #16
 8000746:	4770      	bx	lr

08000748 <__udivmoddi4>:
 8000748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800074c:	9d08      	ldr	r5, [sp, #32]
 800074e:	4604      	mov	r4, r0
 8000750:	468c      	mov	ip, r1
 8000752:	2b00      	cmp	r3, #0
 8000754:	f040 8083 	bne.w	800085e <__udivmoddi4+0x116>
 8000758:	428a      	cmp	r2, r1
 800075a:	4617      	mov	r7, r2
 800075c:	d947      	bls.n	80007ee <__udivmoddi4+0xa6>
 800075e:	fab2 f282 	clz	r2, r2
 8000762:	b142      	cbz	r2, 8000776 <__udivmoddi4+0x2e>
 8000764:	f1c2 0020 	rsb	r0, r2, #32
 8000768:	fa24 f000 	lsr.w	r0, r4, r0
 800076c:	4091      	lsls	r1, r2
 800076e:	4097      	lsls	r7, r2
 8000770:	ea40 0c01 	orr.w	ip, r0, r1
 8000774:	4094      	lsls	r4, r2
 8000776:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800077a:	0c23      	lsrs	r3, r4, #16
 800077c:	fbbc f6f8 	udiv	r6, ip, r8
 8000780:	fa1f fe87 	uxth.w	lr, r7
 8000784:	fb08 c116 	mls	r1, r8, r6, ip
 8000788:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800078c:	fb06 f10e 	mul.w	r1, r6, lr
 8000790:	4299      	cmp	r1, r3
 8000792:	d909      	bls.n	80007a8 <__udivmoddi4+0x60>
 8000794:	18fb      	adds	r3, r7, r3
 8000796:	f106 30ff 	add.w	r0, r6, #4294967295
 800079a:	f080 8119 	bcs.w	80009d0 <__udivmoddi4+0x288>
 800079e:	4299      	cmp	r1, r3
 80007a0:	f240 8116 	bls.w	80009d0 <__udivmoddi4+0x288>
 80007a4:	3e02      	subs	r6, #2
 80007a6:	443b      	add	r3, r7
 80007a8:	1a5b      	subs	r3, r3, r1
 80007aa:	b2a4      	uxth	r4, r4
 80007ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80007b0:	fb08 3310 	mls	r3, r8, r0, r3
 80007b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80007b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80007bc:	45a6      	cmp	lr, r4
 80007be:	d909      	bls.n	80007d4 <__udivmoddi4+0x8c>
 80007c0:	193c      	adds	r4, r7, r4
 80007c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80007c6:	f080 8105 	bcs.w	80009d4 <__udivmoddi4+0x28c>
 80007ca:	45a6      	cmp	lr, r4
 80007cc:	f240 8102 	bls.w	80009d4 <__udivmoddi4+0x28c>
 80007d0:	3802      	subs	r0, #2
 80007d2:	443c      	add	r4, r7
 80007d4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007d8:	eba4 040e 	sub.w	r4, r4, lr
 80007dc:	2600      	movs	r6, #0
 80007de:	b11d      	cbz	r5, 80007e8 <__udivmoddi4+0xa0>
 80007e0:	40d4      	lsrs	r4, r2
 80007e2:	2300      	movs	r3, #0
 80007e4:	e9c5 4300 	strd	r4, r3, [r5]
 80007e8:	4631      	mov	r1, r6
 80007ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ee:	b902      	cbnz	r2, 80007f2 <__udivmoddi4+0xaa>
 80007f0:	deff      	udf	#255	; 0xff
 80007f2:	fab2 f282 	clz	r2, r2
 80007f6:	2a00      	cmp	r2, #0
 80007f8:	d150      	bne.n	800089c <__udivmoddi4+0x154>
 80007fa:	1bcb      	subs	r3, r1, r7
 80007fc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000800:	fa1f f887 	uxth.w	r8, r7
 8000804:	2601      	movs	r6, #1
 8000806:	fbb3 fcfe 	udiv	ip, r3, lr
 800080a:	0c21      	lsrs	r1, r4, #16
 800080c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000810:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000814:	fb08 f30c 	mul.w	r3, r8, ip
 8000818:	428b      	cmp	r3, r1
 800081a:	d907      	bls.n	800082c <__udivmoddi4+0xe4>
 800081c:	1879      	adds	r1, r7, r1
 800081e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000822:	d202      	bcs.n	800082a <__udivmoddi4+0xe2>
 8000824:	428b      	cmp	r3, r1
 8000826:	f200 80e9 	bhi.w	80009fc <__udivmoddi4+0x2b4>
 800082a:	4684      	mov	ip, r0
 800082c:	1ac9      	subs	r1, r1, r3
 800082e:	b2a3      	uxth	r3, r4
 8000830:	fbb1 f0fe 	udiv	r0, r1, lr
 8000834:	fb0e 1110 	mls	r1, lr, r0, r1
 8000838:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800083c:	fb08 f800 	mul.w	r8, r8, r0
 8000840:	45a0      	cmp	r8, r4
 8000842:	d907      	bls.n	8000854 <__udivmoddi4+0x10c>
 8000844:	193c      	adds	r4, r7, r4
 8000846:	f100 33ff 	add.w	r3, r0, #4294967295
 800084a:	d202      	bcs.n	8000852 <__udivmoddi4+0x10a>
 800084c:	45a0      	cmp	r8, r4
 800084e:	f200 80d9 	bhi.w	8000a04 <__udivmoddi4+0x2bc>
 8000852:	4618      	mov	r0, r3
 8000854:	eba4 0408 	sub.w	r4, r4, r8
 8000858:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800085c:	e7bf      	b.n	80007de <__udivmoddi4+0x96>
 800085e:	428b      	cmp	r3, r1
 8000860:	d909      	bls.n	8000876 <__udivmoddi4+0x12e>
 8000862:	2d00      	cmp	r5, #0
 8000864:	f000 80b1 	beq.w	80009ca <__udivmoddi4+0x282>
 8000868:	2600      	movs	r6, #0
 800086a:	e9c5 0100 	strd	r0, r1, [r5]
 800086e:	4630      	mov	r0, r6
 8000870:	4631      	mov	r1, r6
 8000872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000876:	fab3 f683 	clz	r6, r3
 800087a:	2e00      	cmp	r6, #0
 800087c:	d14a      	bne.n	8000914 <__udivmoddi4+0x1cc>
 800087e:	428b      	cmp	r3, r1
 8000880:	d302      	bcc.n	8000888 <__udivmoddi4+0x140>
 8000882:	4282      	cmp	r2, r0
 8000884:	f200 80b8 	bhi.w	80009f8 <__udivmoddi4+0x2b0>
 8000888:	1a84      	subs	r4, r0, r2
 800088a:	eb61 0103 	sbc.w	r1, r1, r3
 800088e:	2001      	movs	r0, #1
 8000890:	468c      	mov	ip, r1
 8000892:	2d00      	cmp	r5, #0
 8000894:	d0a8      	beq.n	80007e8 <__udivmoddi4+0xa0>
 8000896:	e9c5 4c00 	strd	r4, ip, [r5]
 800089a:	e7a5      	b.n	80007e8 <__udivmoddi4+0xa0>
 800089c:	f1c2 0320 	rsb	r3, r2, #32
 80008a0:	fa20 f603 	lsr.w	r6, r0, r3
 80008a4:	4097      	lsls	r7, r2
 80008a6:	fa01 f002 	lsl.w	r0, r1, r2
 80008aa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008ae:	40d9      	lsrs	r1, r3
 80008b0:	4330      	orrs	r0, r6
 80008b2:	0c03      	lsrs	r3, r0, #16
 80008b4:	fbb1 f6fe 	udiv	r6, r1, lr
 80008b8:	fa1f f887 	uxth.w	r8, r7
 80008bc:	fb0e 1116 	mls	r1, lr, r6, r1
 80008c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008c4:	fb06 f108 	mul.w	r1, r6, r8
 80008c8:	4299      	cmp	r1, r3
 80008ca:	fa04 f402 	lsl.w	r4, r4, r2
 80008ce:	d909      	bls.n	80008e4 <__udivmoddi4+0x19c>
 80008d0:	18fb      	adds	r3, r7, r3
 80008d2:	f106 3cff 	add.w	ip, r6, #4294967295
 80008d6:	f080 808d 	bcs.w	80009f4 <__udivmoddi4+0x2ac>
 80008da:	4299      	cmp	r1, r3
 80008dc:	f240 808a 	bls.w	80009f4 <__udivmoddi4+0x2ac>
 80008e0:	3e02      	subs	r6, #2
 80008e2:	443b      	add	r3, r7
 80008e4:	1a5b      	subs	r3, r3, r1
 80008e6:	b281      	uxth	r1, r0
 80008e8:	fbb3 f0fe 	udiv	r0, r3, lr
 80008ec:	fb0e 3310 	mls	r3, lr, r0, r3
 80008f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008f4:	fb00 f308 	mul.w	r3, r0, r8
 80008f8:	428b      	cmp	r3, r1
 80008fa:	d907      	bls.n	800090c <__udivmoddi4+0x1c4>
 80008fc:	1879      	adds	r1, r7, r1
 80008fe:	f100 3cff 	add.w	ip, r0, #4294967295
 8000902:	d273      	bcs.n	80009ec <__udivmoddi4+0x2a4>
 8000904:	428b      	cmp	r3, r1
 8000906:	d971      	bls.n	80009ec <__udivmoddi4+0x2a4>
 8000908:	3802      	subs	r0, #2
 800090a:	4439      	add	r1, r7
 800090c:	1acb      	subs	r3, r1, r3
 800090e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000912:	e778      	b.n	8000806 <__udivmoddi4+0xbe>
 8000914:	f1c6 0c20 	rsb	ip, r6, #32
 8000918:	fa03 f406 	lsl.w	r4, r3, r6
 800091c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000920:	431c      	orrs	r4, r3
 8000922:	fa20 f70c 	lsr.w	r7, r0, ip
 8000926:	fa01 f306 	lsl.w	r3, r1, r6
 800092a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800092e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000932:	431f      	orrs	r7, r3
 8000934:	0c3b      	lsrs	r3, r7, #16
 8000936:	fbb1 f9fe 	udiv	r9, r1, lr
 800093a:	fa1f f884 	uxth.w	r8, r4
 800093e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000942:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000946:	fb09 fa08 	mul.w	sl, r9, r8
 800094a:	458a      	cmp	sl, r1
 800094c:	fa02 f206 	lsl.w	r2, r2, r6
 8000950:	fa00 f306 	lsl.w	r3, r0, r6
 8000954:	d908      	bls.n	8000968 <__udivmoddi4+0x220>
 8000956:	1861      	adds	r1, r4, r1
 8000958:	f109 30ff 	add.w	r0, r9, #4294967295
 800095c:	d248      	bcs.n	80009f0 <__udivmoddi4+0x2a8>
 800095e:	458a      	cmp	sl, r1
 8000960:	d946      	bls.n	80009f0 <__udivmoddi4+0x2a8>
 8000962:	f1a9 0902 	sub.w	r9, r9, #2
 8000966:	4421      	add	r1, r4
 8000968:	eba1 010a 	sub.w	r1, r1, sl
 800096c:	b2bf      	uxth	r7, r7
 800096e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000972:	fb0e 1110 	mls	r1, lr, r0, r1
 8000976:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800097a:	fb00 f808 	mul.w	r8, r0, r8
 800097e:	45b8      	cmp	r8, r7
 8000980:	d907      	bls.n	8000992 <__udivmoddi4+0x24a>
 8000982:	19e7      	adds	r7, r4, r7
 8000984:	f100 31ff 	add.w	r1, r0, #4294967295
 8000988:	d22e      	bcs.n	80009e8 <__udivmoddi4+0x2a0>
 800098a:	45b8      	cmp	r8, r7
 800098c:	d92c      	bls.n	80009e8 <__udivmoddi4+0x2a0>
 800098e:	3802      	subs	r0, #2
 8000990:	4427      	add	r7, r4
 8000992:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000996:	eba7 0708 	sub.w	r7, r7, r8
 800099a:	fba0 8902 	umull	r8, r9, r0, r2
 800099e:	454f      	cmp	r7, r9
 80009a0:	46c6      	mov	lr, r8
 80009a2:	4649      	mov	r1, r9
 80009a4:	d31a      	bcc.n	80009dc <__udivmoddi4+0x294>
 80009a6:	d017      	beq.n	80009d8 <__udivmoddi4+0x290>
 80009a8:	b15d      	cbz	r5, 80009c2 <__udivmoddi4+0x27a>
 80009aa:	ebb3 020e 	subs.w	r2, r3, lr
 80009ae:	eb67 0701 	sbc.w	r7, r7, r1
 80009b2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80009b6:	40f2      	lsrs	r2, r6
 80009b8:	ea4c 0202 	orr.w	r2, ip, r2
 80009bc:	40f7      	lsrs	r7, r6
 80009be:	e9c5 2700 	strd	r2, r7, [r5]
 80009c2:	2600      	movs	r6, #0
 80009c4:	4631      	mov	r1, r6
 80009c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009ca:	462e      	mov	r6, r5
 80009cc:	4628      	mov	r0, r5
 80009ce:	e70b      	b.n	80007e8 <__udivmoddi4+0xa0>
 80009d0:	4606      	mov	r6, r0
 80009d2:	e6e9      	b.n	80007a8 <__udivmoddi4+0x60>
 80009d4:	4618      	mov	r0, r3
 80009d6:	e6fd      	b.n	80007d4 <__udivmoddi4+0x8c>
 80009d8:	4543      	cmp	r3, r8
 80009da:	d2e5      	bcs.n	80009a8 <__udivmoddi4+0x260>
 80009dc:	ebb8 0e02 	subs.w	lr, r8, r2
 80009e0:	eb69 0104 	sbc.w	r1, r9, r4
 80009e4:	3801      	subs	r0, #1
 80009e6:	e7df      	b.n	80009a8 <__udivmoddi4+0x260>
 80009e8:	4608      	mov	r0, r1
 80009ea:	e7d2      	b.n	8000992 <__udivmoddi4+0x24a>
 80009ec:	4660      	mov	r0, ip
 80009ee:	e78d      	b.n	800090c <__udivmoddi4+0x1c4>
 80009f0:	4681      	mov	r9, r0
 80009f2:	e7b9      	b.n	8000968 <__udivmoddi4+0x220>
 80009f4:	4666      	mov	r6, ip
 80009f6:	e775      	b.n	80008e4 <__udivmoddi4+0x19c>
 80009f8:	4630      	mov	r0, r6
 80009fa:	e74a      	b.n	8000892 <__udivmoddi4+0x14a>
 80009fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a00:	4439      	add	r1, r7
 8000a02:	e713      	b.n	800082c <__udivmoddi4+0xe4>
 8000a04:	3802      	subs	r0, #2
 8000a06:	443c      	add	r4, r7
 8000a08:	e724      	b.n	8000854 <__udivmoddi4+0x10c>
 8000a0a:	bf00      	nop

08000a0c <__aeabi_idiv0>:
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <SendUnsignedNumber>:
#include "Uart.h"
void SendUnsignedNumber(uint32_t number,UART_HandleTypeDef _huart)
{
 8000a10:	b084      	sub	sp, #16
 8000a12:	b580      	push	{r7, lr}
 8000a14:	b084      	sub	sp, #16
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	6078      	str	r0, [r7, #4]
 8000a1a:	f107 001c 	add.w	r0, r7, #28
 8000a1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	memset(uartBuffer,0,50);
 8000a22:	2232      	movs	r2, #50	; 0x32
 8000a24:	2100      	movs	r1, #0
 8000a26:	480d      	ldr	r0, [pc, #52]	; (8000a5c <SendUnsignedNumber+0x4c>)
 8000a28:	f003 f8b8 	bl	8003b9c <memset>
	uint8_t l = sprintf(uartBuffer,"%lu",number);
 8000a2c:	687a      	ldr	r2, [r7, #4]
 8000a2e:	490c      	ldr	r1, [pc, #48]	; (8000a60 <SendUnsignedNumber+0x50>)
 8000a30:	480a      	ldr	r0, [pc, #40]	; (8000a5c <SendUnsignedNumber+0x4c>)
 8000a32:	f003 f8bb 	bl	8003bac <siprintf>
 8000a36:	4603      	mov	r3, r0
 8000a38:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&_huart, (uint8_t *)uartBuffer, l, 500);
 8000a3a:	7bfb      	ldrb	r3, [r7, #15]
 8000a3c:	b29a      	uxth	r2, r3
 8000a3e:	f107 001c 	add.w	r0, r7, #28
 8000a42:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000a46:	4905      	ldr	r1, [pc, #20]	; (8000a5c <SendUnsignedNumber+0x4c>)
 8000a48:	f002 fdd9 	bl	80035fe <HAL_UART_Transmit>
}
 8000a4c:	bf00      	nop
 8000a4e:	3710      	adds	r7, #16
 8000a50:	46bd      	mov	sp, r7
 8000a52:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a56:	b004      	add	sp, #16
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	20000120 	.word	0x20000120
 8000a60:	08004420 	.word	0x08004420

08000a64 <SendConstChar>:
void SendConstChar(const char* constChar,UART_HandleTypeDef _huart)
{
 8000a64:	b084      	sub	sp, #16
 8000a66:	b580      	push	{r7, lr}
 8000a68:	b082      	sub	sp, #8
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	6078      	str	r0, [r7, #4]
 8000a6e:	f107 0014 	add.w	r0, r7, #20
 8000a72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	memset(uartBuffer,0,50);
 8000a76:	2232      	movs	r2, #50	; 0x32
 8000a78:	2100      	movs	r1, #0
 8000a7a:	480a      	ldr	r0, [pc, #40]	; (8000aa4 <SendConstChar+0x40>)
 8000a7c:	f003 f88e 	bl	8003b9c <memset>
	HAL_UART_Transmit(&_huart,(uint8_t *)constChar,strlen((const char*)constChar),200);
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f7ff fbad 	bl	80001e0 <strlen>
 8000a86:	4603      	mov	r3, r0
 8000a88:	b29a      	uxth	r2, r3
 8000a8a:	f107 0014 	add.w	r0, r7, #20
 8000a8e:	23c8      	movs	r3, #200	; 0xc8
 8000a90:	6879      	ldr	r1, [r7, #4]
 8000a92:	f002 fdb4 	bl	80035fe <HAL_UART_Transmit>
}
 8000a96:	bf00      	nop
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000aa0:	b004      	add	sp, #16
 8000aa2:	4770      	bx	lr
 8000aa4:	20000120 	.word	0x20000120

08000aa8 <SendFloat>:
void SendFloat(float num,UART_HandleTypeDef _huart)
{
 8000aa8:	b084      	sub	sp, #16
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b086      	sub	sp, #24
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	ed87 0a01 	vstr	s0, [r7, #4]
 8000ab4:	f107 0c20 	add.w	ip, r7, #32
 8000ab8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memset(uartBuffer,0,50);
 8000abc:	2232      	movs	r2, #50	; 0x32
 8000abe:	2100      	movs	r1, #0
 8000ac0:	481f      	ldr	r0, [pc, #124]	; (8000b40 <SendFloat+0x98>)
 8000ac2:	f003 f86b 	bl	8003b9c <memset>
	uint16_t intPart = (uint16_t)num;
 8000ac6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000aca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ace:	ee17 3a90 	vmov	r3, s15
 8000ad2:	82fb      	strh	r3, [r7, #22]
	float  decPart  = (float )num - intPart;//0,123
 8000ad4:	8afb      	ldrh	r3, [r7, #22]
 8000ad6:	ee07 3a90 	vmov	s15, r3
 8000ada:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ade:	ed97 7a01 	vldr	s14, [r7, #4]
 8000ae2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ae6:	edc7 7a04 	vstr	s15, [r7, #16]
	uint16_t decPart2 = (decPart*1000)/10;
 8000aea:	edd7 7a04 	vldr	s15, [r7, #16]
 8000aee:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000b44 <SendFloat+0x9c>
 8000af2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000af6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000afa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000afe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b02:	ee17 3a90 	vmov	r3, s15
 8000b06:	81fb      	strh	r3, [r7, #14]
	sprintf(uartBuffer,"%d.%d",intPart,decPart2);
 8000b08:	8afa      	ldrh	r2, [r7, #22]
 8000b0a:	89fb      	ldrh	r3, [r7, #14]
 8000b0c:	490e      	ldr	r1, [pc, #56]	; (8000b48 <SendFloat+0xa0>)
 8000b0e:	480c      	ldr	r0, [pc, #48]	; (8000b40 <SendFloat+0x98>)
 8000b10:	f003 f84c 	bl	8003bac <siprintf>
	HAL_UART_Transmit(&_huart, (uint8_t *)uartBuffer, sprintf(uartBuffer,"%d.%d",intPart,decPart2), 400);
 8000b14:	8afa      	ldrh	r2, [r7, #22]
 8000b16:	89fb      	ldrh	r3, [r7, #14]
 8000b18:	490b      	ldr	r1, [pc, #44]	; (8000b48 <SendFloat+0xa0>)
 8000b1a:	4809      	ldr	r0, [pc, #36]	; (8000b40 <SendFloat+0x98>)
 8000b1c:	f003 f846 	bl	8003bac <siprintf>
 8000b20:	4603      	mov	r3, r0
 8000b22:	b29a      	uxth	r2, r3
 8000b24:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000b28:	4905      	ldr	r1, [pc, #20]	; (8000b40 <SendFloat+0x98>)
 8000b2a:	f107 0020 	add.w	r0, r7, #32
 8000b2e:	f002 fd66 	bl	80035fe <HAL_UART_Transmit>
}
 8000b32:	bf00      	nop
 8000b34:	3718      	adds	r7, #24
 8000b36:	46bd      	mov	sp, r7
 8000b38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b3c:	b004      	add	sp, #16
 8000b3e:	4770      	bx	lr
 8000b40:	20000120 	.word	0x20000120
 8000b44:	447a0000 	.word	0x447a0000
 8000b48:	08004424 	.word	0x08004424

08000b4c <voltageAccrossR>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
float voltageAccrossR(uint16_t _adc) {
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	80fb      	strh	r3, [r7, #6]
	return _adc * VREF_ADC_PERIPHERAL / 4095;
 8000b56:	88fb      	ldrh	r3, [r7, #6]
 8000b58:	ee07 3a90 	vmov	s15, r3
 8000b5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b60:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8000b84 <voltageAccrossR+0x38>
 8000b64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b68:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000b88 <voltageAccrossR+0x3c>
 8000b6c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000b70:	eef0 7a66 	vmov.f32	s15, s13
}
 8000b74:	eeb0 0a67 	vmov.f32	s0, s15
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	403ccccd 	.word	0x403ccccd
 8000b88:	457ff000 	.word	0x457ff000

08000b8c <ResistanceFSR>:
float ResistanceFSR(uint16_t _adc) {
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	80fb      	strh	r3, [r7, #6]
	/*
	 * Vref = (Rref*VREF_ADC_PERIPHERAL)/( Rref+Rhsr)
	 *
	 * */
	if (_adc)
 8000b96:	88fb      	ldrh	r3, [r7, #6]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d00e      	beq.n	8000bba <ResistanceFSR+0x2e>
		return (VREF_ADC_PERIPHERAL * Rref) / voltageAccrossR(_adc) - Rref;
 8000b9c:	88fb      	ldrh	r3, [r7, #6]
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff ffd4 	bl	8000b4c <voltageAccrossR>
 8000ba4:	eeb0 7a40 	vmov.f32	s14, s0
 8000ba8:	eddf 6a07 	vldr	s13, [pc, #28]	; 8000bc8 <ResistanceFSR+0x3c>
 8000bac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bb0:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000bcc <ResistanceFSR+0x40>
 8000bb4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000bb8:	e001      	b.n	8000bbe <ResistanceFSR+0x32>
	else
		return infinite;
 8000bba:	eddf 7a05 	vldr	s15, [pc, #20]	; 8000bd0 <ResistanceFSR+0x44>
}
 8000bbe:	eeb0 0a67 	vmov.f32	s0, s15
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	46e67800 	.word	0x46e67800
 8000bcc:	461c4000 	.word	0x461c4000
 8000bd0:	49742400 	.word	0x49742400

08000bd4 <force>:
const char* force(float _fsrResistance)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	ed87 0a01 	vstr	s0, [r7, #4]
	if(_fsrResistance>=30000)
 8000bde:	edd7 7a01 	vldr	s15, [r7, #4]
 8000be2:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8000c30 <force+0x5c>
 8000be6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bee:	db01      	blt.n	8000bf4 <force+0x20>
		return "No pressure\n";
 8000bf0:	4b10      	ldr	r3, [pc, #64]	; (8000c34 <force+0x60>)
 8000bf2:	e016      	b.n	8000c22 <force+0x4e>
	else if(_fsrResistance>=6000)
 8000bf4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000bf8:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000c38 <force+0x64>
 8000bfc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c04:	db01      	blt.n	8000c0a <force+0x36>
		return "Light touch\n";
 8000c06:	4b0d      	ldr	r3, [pc, #52]	; (8000c3c <force+0x68>)
 8000c08:	e00b      	b.n	8000c22 <force+0x4e>
	else if(_fsrResistance>=1000)
 8000c0a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c0e:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8000c40 <force+0x6c>
 8000c12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c1a:	db01      	blt.n	8000c20 <force+0x4c>
		return "Light squeeze\n";
 8000c1c:	4b09      	ldr	r3, [pc, #36]	; (8000c44 <force+0x70>)
 8000c1e:	e000      	b.n	8000c22 <force+0x4e>
	else
		return "Big squeeze\n";
 8000c20:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <force+0x74>)
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	46ea6000 	.word	0x46ea6000
 8000c34:	08004430 	.word	0x08004430
 8000c38:	45bb8000 	.word	0x45bb8000
 8000c3c:	08004440 	.word	0x08004440
 8000c40:	447a0000 	.word	0x447a0000
 8000c44:	08004450 	.word	0x08004450
 8000c48:	08004460 	.word	0x08004460
 8000c4c:	00000000 	.word	0x00000000

08000c50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c52:	b093      	sub	sp, #76	; 0x4c
 8000c54:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c56:	f000 fc4b 	bl	80014f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c5a:	f000 f919 	bl	8000e90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c5e:	f000 fa45 	bl	80010ec <MX_GPIO_Init>
  MX_DMA_Init();
 8000c62:	f000 fa23 	bl	80010ac <MX_DMA_Init>
  MX_ADC1_Init();
 8000c66:	f000 f97b 	bl	8000f60 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000c6a:	f000 f9cb 	bl	8001004 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000c6e:	f000 f9f3 	bl	8001058 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) FSR_adc_value, 1);
 8000c72:	2201      	movs	r2, #1
 8000c74:	497e      	ldr	r1, [pc, #504]	; (8000e70 <main+0x220>)
 8000c76:	487f      	ldr	r0, [pc, #508]	; (8000e74 <main+0x224>)
 8000c78:	f000 fe54 	bl	8001924 <HAL_ADC_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SendConstChar("Ref ADC: ", huart2);
 8000c7c:	4e7e      	ldr	r6, [pc, #504]	; (8000e78 <main+0x228>)
 8000c7e:	466d      	mov	r5, sp
 8000c80:	f106 040c 	add.w	r4, r6, #12
 8000c84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c90:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000c94:	e885 0003 	stmia.w	r5, {r0, r1}
 8000c98:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000c9c:	4877      	ldr	r0, [pc, #476]	; (8000e7c <main+0x22c>)
 8000c9e:	f7ff fee1 	bl	8000a64 <SendConstChar>
	  	  	uint16_t FSR_val = FSR_adc_value[0];
 8000ca2:	4b73      	ldr	r3, [pc, #460]	; (8000e70 <main+0x220>)
 8000ca4:	881b      	ldrh	r3, [r3, #0]
 8000ca6:	81fb      	strh	r3, [r7, #14]
	  		float Vol_R = voltageAccrossR( FSR_val);
 8000ca8:	89fb      	ldrh	r3, [r7, #14]
 8000caa:	4618      	mov	r0, r3
 8000cac:	f7ff ff4e 	bl	8000b4c <voltageAccrossR>
 8000cb0:	ed87 0a02 	vstr	s0, [r7, #8]
	  		float Fsr_resistance = ResistanceFSR(FSR_val);
 8000cb4:	89fb      	ldrh	r3, [r7, #14]
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff ff68 	bl	8000b8c <ResistanceFSR>
 8000cbc:	ed87 0a01 	vstr	s0, [r7, #4]

	  		SendUnsignedNumber((uint32_t) FSR_val, huart2);
 8000cc0:	f8b7 c00e 	ldrh.w	ip, [r7, #14]
 8000cc4:	4e6c      	ldr	r6, [pc, #432]	; (8000e78 <main+0x228>)
 8000cc6:	466d      	mov	r5, sp
 8000cc8:	f106 040c 	add.w	r4, r6, #12
 8000ccc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cd8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000cdc:	e885 0003 	stmia.w	r5, {r0, r1}
 8000ce0:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000ce4:	4660      	mov	r0, ip
 8000ce6:	f7ff fe93 	bl	8000a10 <SendUnsignedNumber>
	  		SendConstChar("\n", huart2);
 8000cea:	4e63      	ldr	r6, [pc, #396]	; (8000e78 <main+0x228>)
 8000cec:	466d      	mov	r5, sp
 8000cee:	f106 040c 	add.w	r4, r6, #12
 8000cf2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cf4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cf6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cf8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cfc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cfe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000d02:	e885 0003 	stmia.w	r5, {r0, r1}
 8000d06:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000d0a:	485d      	ldr	r0, [pc, #372]	; (8000e80 <main+0x230>)
 8000d0c:	f7ff feaa 	bl	8000a64 <SendConstChar>
	  		SendConstChar("Vref : ", huart2);
 8000d10:	4e59      	ldr	r6, [pc, #356]	; (8000e78 <main+0x228>)
 8000d12:	466d      	mov	r5, sp
 8000d14:	f106 040c 	add.w	r4, r6, #12
 8000d18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d24:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000d28:	e885 0003 	stmia.w	r5, {r0, r1}
 8000d2c:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000d30:	4854      	ldr	r0, [pc, #336]	; (8000e84 <main+0x234>)
 8000d32:	f7ff fe97 	bl	8000a64 <SendConstChar>
	  		SendFloat(Vol_R,huart2);
 8000d36:	4e50      	ldr	r6, [pc, #320]	; (8000e78 <main+0x228>)
 8000d38:	466d      	mov	r5, sp
 8000d3a:	f106 0410 	add.w	r4, r6, #16
 8000d3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d4a:	6823      	ldr	r3, [r4, #0]
 8000d4c:	602b      	str	r3, [r5, #0]
 8000d4e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000d52:	ed97 0a02 	vldr	s0, [r7, #8]
 8000d56:	f7ff fea7 	bl	8000aa8 <SendFloat>
	  		SendConstChar("\n", huart2);
 8000d5a:	4e47      	ldr	r6, [pc, #284]	; (8000e78 <main+0x228>)
 8000d5c:	466d      	mov	r5, sp
 8000d5e:	f106 040c 	add.w	r4, r6, #12
 8000d62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d6e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000d72:	e885 0003 	stmia.w	r5, {r0, r1}
 8000d76:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000d7a:	4841      	ldr	r0, [pc, #260]	; (8000e80 <main+0x230>)
 8000d7c:	f7ff fe72 	bl	8000a64 <SendConstChar>
	  		SendConstChar("FSR Resistance value: ", huart2);
 8000d80:	4e3d      	ldr	r6, [pc, #244]	; (8000e78 <main+0x228>)
 8000d82:	466d      	mov	r5, sp
 8000d84:	f106 040c 	add.w	r4, r6, #12
 8000d88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d94:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000d98:	e885 0003 	stmia.w	r5, {r0, r1}
 8000d9c:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000da0:	4839      	ldr	r0, [pc, #228]	; (8000e88 <main+0x238>)
 8000da2:	f7ff fe5f 	bl	8000a64 <SendConstChar>
	  		if (Vol_R>0.1)
 8000da6:	68b8      	ldr	r0, [r7, #8]
 8000da8:	f7ff fbd6 	bl	8000558 <__aeabi_f2d>
 8000dac:	a32e      	add	r3, pc, #184	; (adr r3, 8000e68 <main+0x218>)
 8000dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000db2:	f7ff fca7 	bl	8000704 <__aeabi_dcmpgt>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d012      	beq.n	8000de2 <main+0x192>
	  			SendFloat(Fsr_resistance,huart2);
 8000dbc:	4e2e      	ldr	r6, [pc, #184]	; (8000e78 <main+0x228>)
 8000dbe:	466d      	mov	r5, sp
 8000dc0:	f106 0410 	add.w	r4, r6, #16
 8000dc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dcc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dd0:	6823      	ldr	r3, [r4, #0]
 8000dd2:	602b      	str	r3, [r5, #0]
 8000dd4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000dd8:	ed97 0a01 	vldr	s0, [r7, #4]
 8000ddc:	f7ff fe64 	bl	8000aa8 <SendFloat>
 8000de0:	e012      	b.n	8000e08 <main+0x1b8>
	  		else
	  			SendConstChar(" Infinite value", huart2);
 8000de2:	4e25      	ldr	r6, [pc, #148]	; (8000e78 <main+0x228>)
 8000de4:	466d      	mov	r5, sp
 8000de6:	f106 040c 	add.w	r4, r6, #12
 8000dea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000df0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000df2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000df4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000df6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000dfa:	e885 0003 	stmia.w	r5, {r0, r1}
 8000dfe:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000e02:	4822      	ldr	r0, [pc, #136]	; (8000e8c <main+0x23c>)
 8000e04:	f7ff fe2e 	bl	8000a64 <SendConstChar>
	  		SendConstChar("\n", huart2);
 8000e08:	4e1b      	ldr	r6, [pc, #108]	; (8000e78 <main+0x228>)
 8000e0a:	466d      	mov	r5, sp
 8000e0c:	f106 040c 	add.w	r4, r6, #12
 8000e10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e1c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e20:	e885 0003 	stmia.w	r5, {r0, r1}
 8000e24:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000e28:	4815      	ldr	r0, [pc, #84]	; (8000e80 <main+0x230>)
 8000e2a:	f7ff fe1b 	bl	8000a64 <SendConstChar>
	  		SendConstChar( force(Fsr_resistance),huart2);
 8000e2e:	ed97 0a01 	vldr	s0, [r7, #4]
 8000e32:	f7ff fecf 	bl	8000bd4 <force>
 8000e36:	4684      	mov	ip, r0
 8000e38:	4e0f      	ldr	r6, [pc, #60]	; (8000e78 <main+0x228>)
 8000e3a:	466d      	mov	r5, sp
 8000e3c:	f106 040c 	add.w	r4, r6, #12
 8000e40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e4c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e50:	e885 0003 	stmia.w	r5, {r0, r1}
 8000e54:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000e58:	4660      	mov	r0, ip
 8000e5a:	f7ff fe03 	bl	8000a64 <SendConstChar>
	  		HAL_Delay(1000);
 8000e5e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e62:	f000 fbb7 	bl	80015d4 <HAL_Delay>
  {
 8000e66:	e709      	b.n	8000c7c <main+0x2c>
 8000e68:	9999999a 	.word	0x9999999a
 8000e6c:	3fb99999 	.word	0x3fb99999
 8000e70:	20000154 	.word	0x20000154
 8000e74:	20000158 	.word	0x20000158
 8000e78:	200000dc 	.word	0x200000dc
 8000e7c:	08004470 	.word	0x08004470
 8000e80:	0800447c 	.word	0x0800447c
 8000e84:	08004480 	.word	0x08004480
 8000e88:	08004488 	.word	0x08004488
 8000e8c:	080044a0 	.word	0x080044a0

08000e90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b094      	sub	sp, #80	; 0x50
 8000e94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e96:	f107 0320 	add.w	r3, r7, #32
 8000e9a:	2230      	movs	r2, #48	; 0x30
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f002 fe7c 	bl	8003b9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ea4:	f107 030c 	add.w	r3, r7, #12
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
 8000eb2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	60bb      	str	r3, [r7, #8]
 8000eb8:	4b27      	ldr	r3, [pc, #156]	; (8000f58 <SystemClock_Config+0xc8>)
 8000eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebc:	4a26      	ldr	r2, [pc, #152]	; (8000f58 <SystemClock_Config+0xc8>)
 8000ebe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ec2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ec4:	4b24      	ldr	r3, [pc, #144]	; (8000f58 <SystemClock_Config+0xc8>)
 8000ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ecc:	60bb      	str	r3, [r7, #8]
 8000ece:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	607b      	str	r3, [r7, #4]
 8000ed4:	4b21      	ldr	r3, [pc, #132]	; (8000f5c <SystemClock_Config+0xcc>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a20      	ldr	r2, [pc, #128]	; (8000f5c <SystemClock_Config+0xcc>)
 8000eda:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ede:	6013      	str	r3, [r2, #0]
 8000ee0:	4b1e      	ldr	r3, [pc, #120]	; (8000f5c <SystemClock_Config+0xcc>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ee8:	607b      	str	r3, [r7, #4]
 8000eea:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000eec:	2302      	movs	r3, #2
 8000eee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ef4:	2310      	movs	r3, #16
 8000ef6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000efc:	2300      	movs	r3, #0
 8000efe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f00:	2308      	movs	r3, #8
 8000f02:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000f04:	2364      	movs	r3, #100	; 0x64
 8000f06:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f0c:	2304      	movs	r3, #4
 8000f0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f10:	f107 0320 	add.w	r3, r7, #32
 8000f14:	4618      	mov	r0, r3
 8000f16:	f001 fedd 	bl	8002cd4 <HAL_RCC_OscConfig>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f20:	f000 f90c 	bl	800113c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f24:	230f      	movs	r3, #15
 8000f26:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f34:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f36:	2300      	movs	r3, #0
 8000f38:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000f3a:	f107 030c 	add.w	r3, r7, #12
 8000f3e:	2103      	movs	r1, #3
 8000f40:	4618      	mov	r0, r3
 8000f42:	f002 f93f 	bl	80031c4 <HAL_RCC_ClockConfig>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000f4c:	f000 f8f6 	bl	800113c <Error_Handler>
  }
}
 8000f50:	bf00      	nop
 8000f52:	3750      	adds	r7, #80	; 0x50
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	40023800 	.word	0x40023800
 8000f5c:	40007000 	.word	0x40007000

08000f60 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f66:	463b      	mov	r3, r7
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f72:	4b21      	ldr	r3, [pc, #132]	; (8000ff8 <MX_ADC1_Init+0x98>)
 8000f74:	4a21      	ldr	r2, [pc, #132]	; (8000ffc <MX_ADC1_Init+0x9c>)
 8000f76:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f78:	4b1f      	ldr	r3, [pc, #124]	; (8000ff8 <MX_ADC1_Init+0x98>)
 8000f7a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f7e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f80:	4b1d      	ldr	r3, [pc, #116]	; (8000ff8 <MX_ADC1_Init+0x98>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000f86:	4b1c      	ldr	r3, [pc, #112]	; (8000ff8 <MX_ADC1_Init+0x98>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f8c:	4b1a      	ldr	r3, [pc, #104]	; (8000ff8 <MX_ADC1_Init+0x98>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f92:	4b19      	ldr	r3, [pc, #100]	; (8000ff8 <MX_ADC1_Init+0x98>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f9a:	4b17      	ldr	r3, [pc, #92]	; (8000ff8 <MX_ADC1_Init+0x98>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fa0:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <MX_ADC1_Init+0x98>)
 8000fa2:	4a17      	ldr	r2, [pc, #92]	; (8001000 <MX_ADC1_Init+0xa0>)
 8000fa4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fa6:	4b14      	ldr	r3, [pc, #80]	; (8000ff8 <MX_ADC1_Init+0x98>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000fac:	4b12      	ldr	r3, [pc, #72]	; (8000ff8 <MX_ADC1_Init+0x98>)
 8000fae:	2201      	movs	r2, #1
 8000fb0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000fb2:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <MX_ADC1_Init+0x98>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fba:	4b0f      	ldr	r3, [pc, #60]	; (8000ff8 <MX_ADC1_Init+0x98>)
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fc0:	480d      	ldr	r0, [pc, #52]	; (8000ff8 <MX_ADC1_Init+0x98>)
 8000fc2:	f000 fb2b 	bl	800161c <HAL_ADC_Init>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000fcc:	f000 f8b6 	bl	800113c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8000fd8:	2306      	movs	r3, #6
 8000fda:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fdc:	463b      	mov	r3, r7
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4805      	ldr	r0, [pc, #20]	; (8000ff8 <MX_ADC1_Init+0x98>)
 8000fe2:	f000 fdb7 	bl	8001b54 <HAL_ADC_ConfigChannel>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000fec:	f000 f8a6 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ff0:	bf00      	nop
 8000ff2:	3710      	adds	r7, #16
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	20000158 	.word	0x20000158
 8000ffc:	40012000 	.word	0x40012000
 8001000:	0f000001 	.word	0x0f000001

08001004 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001008:	4b11      	ldr	r3, [pc, #68]	; (8001050 <MX_USART1_UART_Init+0x4c>)
 800100a:	4a12      	ldr	r2, [pc, #72]	; (8001054 <MX_USART1_UART_Init+0x50>)
 800100c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800100e:	4b10      	ldr	r3, [pc, #64]	; (8001050 <MX_USART1_UART_Init+0x4c>)
 8001010:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001014:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001016:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <MX_USART1_UART_Init+0x4c>)
 8001018:	2200      	movs	r2, #0
 800101a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800101c:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <MX_USART1_UART_Init+0x4c>)
 800101e:	2200      	movs	r2, #0
 8001020:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001022:	4b0b      	ldr	r3, [pc, #44]	; (8001050 <MX_USART1_UART_Init+0x4c>)
 8001024:	2200      	movs	r2, #0
 8001026:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001028:	4b09      	ldr	r3, [pc, #36]	; (8001050 <MX_USART1_UART_Init+0x4c>)
 800102a:	220c      	movs	r2, #12
 800102c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800102e:	4b08      	ldr	r3, [pc, #32]	; (8001050 <MX_USART1_UART_Init+0x4c>)
 8001030:	2200      	movs	r2, #0
 8001032:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001034:	4b06      	ldr	r3, [pc, #24]	; (8001050 <MX_USART1_UART_Init+0x4c>)
 8001036:	2200      	movs	r2, #0
 8001038:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800103a:	4805      	ldr	r0, [pc, #20]	; (8001050 <MX_USART1_UART_Init+0x4c>)
 800103c:	f002 fa92 	bl	8003564 <HAL_UART_Init>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001046:	f000 f879 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000098 	.word	0x20000098
 8001054:	40011000 	.word	0x40011000

08001058 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800105c:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <MX_USART2_UART_Init+0x4c>)
 800105e:	4a12      	ldr	r2, [pc, #72]	; (80010a8 <MX_USART2_UART_Init+0x50>)
 8001060:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001062:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <MX_USART2_UART_Init+0x4c>)
 8001064:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001068:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800106a:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <MX_USART2_UART_Init+0x4c>)
 800106c:	2200      	movs	r2, #0
 800106e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001070:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <MX_USART2_UART_Init+0x4c>)
 8001072:	2200      	movs	r2, #0
 8001074:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001076:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <MX_USART2_UART_Init+0x4c>)
 8001078:	2200      	movs	r2, #0
 800107a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800107c:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <MX_USART2_UART_Init+0x4c>)
 800107e:	220c      	movs	r2, #12
 8001080:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001082:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <MX_USART2_UART_Init+0x4c>)
 8001084:	2200      	movs	r2, #0
 8001086:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001088:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <MX_USART2_UART_Init+0x4c>)
 800108a:	2200      	movs	r2, #0
 800108c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800108e:	4805      	ldr	r0, [pc, #20]	; (80010a4 <MX_USART2_UART_Init+0x4c>)
 8001090:	f002 fa68 	bl	8003564 <HAL_UART_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800109a:	f000 f84f 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	200000dc 	.word	0x200000dc
 80010a8:	40004400 	.word	0x40004400

080010ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	607b      	str	r3, [r7, #4]
 80010b6:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <MX_DMA_Init+0x3c>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	4a0b      	ldr	r2, [pc, #44]	; (80010e8 <MX_DMA_Init+0x3c>)
 80010bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010c0:	6313      	str	r3, [r2, #48]	; 0x30
 80010c2:	4b09      	ldr	r3, [pc, #36]	; (80010e8 <MX_DMA_Init+0x3c>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2100      	movs	r1, #0
 80010d2:	2038      	movs	r0, #56	; 0x38
 80010d4:	f001 f8d3 	bl	800227e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80010d8:	2038      	movs	r0, #56	; 0x38
 80010da:	f001 f8ec 	bl	80022b6 <HAL_NVIC_EnableIRQ>

}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40023800 	.word	0x40023800

080010ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	607b      	str	r3, [r7, #4]
 80010f6:	4b10      	ldr	r3, [pc, #64]	; (8001138 <MX_GPIO_Init+0x4c>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	4a0f      	ldr	r2, [pc, #60]	; (8001138 <MX_GPIO_Init+0x4c>)
 80010fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001100:	6313      	str	r3, [r2, #48]	; 0x30
 8001102:	4b0d      	ldr	r3, [pc, #52]	; (8001138 <MX_GPIO_Init+0x4c>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	603b      	str	r3, [r7, #0]
 8001112:	4b09      	ldr	r3, [pc, #36]	; (8001138 <MX_GPIO_Init+0x4c>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	4a08      	ldr	r2, [pc, #32]	; (8001138 <MX_GPIO_Init+0x4c>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	6313      	str	r3, [r2, #48]	; 0x30
 800111e:	4b06      	ldr	r3, [pc, #24]	; (8001138 <MX_GPIO_Init+0x4c>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	603b      	str	r3, [r7, #0]
 8001128:	683b      	ldr	r3, [r7, #0]

}
 800112a:	bf00      	nop
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	40023800 	.word	0x40023800

0800113c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001140:	b672      	cpsid	i
}
 8001142:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001144:	e7fe      	b.n	8001144 <Error_Handler+0x8>
	...

08001148 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	607b      	str	r3, [r7, #4]
 8001152:	4b10      	ldr	r3, [pc, #64]	; (8001194 <HAL_MspInit+0x4c>)
 8001154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001156:	4a0f      	ldr	r2, [pc, #60]	; (8001194 <HAL_MspInit+0x4c>)
 8001158:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800115c:	6453      	str	r3, [r2, #68]	; 0x44
 800115e:	4b0d      	ldr	r3, [pc, #52]	; (8001194 <HAL_MspInit+0x4c>)
 8001160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001162:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001166:	607b      	str	r3, [r7, #4]
 8001168:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	603b      	str	r3, [r7, #0]
 800116e:	4b09      	ldr	r3, [pc, #36]	; (8001194 <HAL_MspInit+0x4c>)
 8001170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001172:	4a08      	ldr	r2, [pc, #32]	; (8001194 <HAL_MspInit+0x4c>)
 8001174:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001178:	6413      	str	r3, [r2, #64]	; 0x40
 800117a:	4b06      	ldr	r3, [pc, #24]	; (8001194 <HAL_MspInit+0x4c>)
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001182:	603b      	str	r3, [r7, #0]
 8001184:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001186:	bf00      	nop
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	40023800 	.word	0x40023800

08001198 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08a      	sub	sp, #40	; 0x28
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a33      	ldr	r2, [pc, #204]	; (8001284 <HAL_ADC_MspInit+0xec>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d15f      	bne.n	800127a <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	613b      	str	r3, [r7, #16]
 80011be:	4b32      	ldr	r3, [pc, #200]	; (8001288 <HAL_ADC_MspInit+0xf0>)
 80011c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c2:	4a31      	ldr	r2, [pc, #196]	; (8001288 <HAL_ADC_MspInit+0xf0>)
 80011c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011c8:	6453      	str	r3, [r2, #68]	; 0x44
 80011ca:	4b2f      	ldr	r3, [pc, #188]	; (8001288 <HAL_ADC_MspInit+0xf0>)
 80011cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011d2:	613b      	str	r3, [r7, #16]
 80011d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	60fb      	str	r3, [r7, #12]
 80011da:	4b2b      	ldr	r3, [pc, #172]	; (8001288 <HAL_ADC_MspInit+0xf0>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	4a2a      	ldr	r2, [pc, #168]	; (8001288 <HAL_ADC_MspInit+0xf0>)
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	6313      	str	r3, [r2, #48]	; 0x30
 80011e6:	4b28      	ldr	r3, [pc, #160]	; (8001288 <HAL_ADC_MspInit+0xf0>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011f2:	2301      	movs	r3, #1
 80011f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011f6:	2303      	movs	r3, #3
 80011f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fe:	f107 0314 	add.w	r3, r7, #20
 8001202:	4619      	mov	r1, r3
 8001204:	4821      	ldr	r0, [pc, #132]	; (800128c <HAL_ADC_MspInit+0xf4>)
 8001206:	f001 fbe1 	bl	80029cc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800120a:	4b21      	ldr	r3, [pc, #132]	; (8001290 <HAL_ADC_MspInit+0xf8>)
 800120c:	4a21      	ldr	r2, [pc, #132]	; (8001294 <HAL_ADC_MspInit+0xfc>)
 800120e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001210:	4b1f      	ldr	r3, [pc, #124]	; (8001290 <HAL_ADC_MspInit+0xf8>)
 8001212:	2200      	movs	r2, #0
 8001214:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001216:	4b1e      	ldr	r3, [pc, #120]	; (8001290 <HAL_ADC_MspInit+0xf8>)
 8001218:	2200      	movs	r2, #0
 800121a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800121c:	4b1c      	ldr	r3, [pc, #112]	; (8001290 <HAL_ADC_MspInit+0xf8>)
 800121e:	2200      	movs	r2, #0
 8001220:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001222:	4b1b      	ldr	r3, [pc, #108]	; (8001290 <HAL_ADC_MspInit+0xf8>)
 8001224:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001228:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800122a:	4b19      	ldr	r3, [pc, #100]	; (8001290 <HAL_ADC_MspInit+0xf8>)
 800122c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001230:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001232:	4b17      	ldr	r3, [pc, #92]	; (8001290 <HAL_ADC_MspInit+0xf8>)
 8001234:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001238:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800123a:	4b15      	ldr	r3, [pc, #84]	; (8001290 <HAL_ADC_MspInit+0xf8>)
 800123c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001240:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001242:	4b13      	ldr	r3, [pc, #76]	; (8001290 <HAL_ADC_MspInit+0xf8>)
 8001244:	2200      	movs	r2, #0
 8001246:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001248:	4b11      	ldr	r3, [pc, #68]	; (8001290 <HAL_ADC_MspInit+0xf8>)
 800124a:	2200      	movs	r2, #0
 800124c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800124e:	4810      	ldr	r0, [pc, #64]	; (8001290 <HAL_ADC_MspInit+0xf8>)
 8001250:	f001 f84c 	bl	80022ec <HAL_DMA_Init>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800125a:	f7ff ff6f 	bl	800113c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a0b      	ldr	r2, [pc, #44]	; (8001290 <HAL_ADC_MspInit+0xf8>)
 8001262:	639a      	str	r2, [r3, #56]	; 0x38
 8001264:	4a0a      	ldr	r2, [pc, #40]	; (8001290 <HAL_ADC_MspInit+0xf8>)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800126a:	2200      	movs	r2, #0
 800126c:	2100      	movs	r1, #0
 800126e:	2012      	movs	r0, #18
 8001270:	f001 f805 	bl	800227e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001274:	2012      	movs	r0, #18
 8001276:	f001 f81e 	bl	80022b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800127a:	bf00      	nop
 800127c:	3728      	adds	r7, #40	; 0x28
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40012000 	.word	0x40012000
 8001288:	40023800 	.word	0x40023800
 800128c:	40020000 	.word	0x40020000
 8001290:	200001a0 	.word	0x200001a0
 8001294:	40026410 	.word	0x40026410

08001298 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08c      	sub	sp, #48	; 0x30
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a0:	f107 031c 	add.w	r3, r7, #28
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a32      	ldr	r2, [pc, #200]	; (8001380 <HAL_UART_MspInit+0xe8>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d12d      	bne.n	8001316 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	61bb      	str	r3, [r7, #24]
 80012be:	4b31      	ldr	r3, [pc, #196]	; (8001384 <HAL_UART_MspInit+0xec>)
 80012c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c2:	4a30      	ldr	r2, [pc, #192]	; (8001384 <HAL_UART_MspInit+0xec>)
 80012c4:	f043 0310 	orr.w	r3, r3, #16
 80012c8:	6453      	str	r3, [r2, #68]	; 0x44
 80012ca:	4b2e      	ldr	r3, [pc, #184]	; (8001384 <HAL_UART_MspInit+0xec>)
 80012cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ce:	f003 0310 	and.w	r3, r3, #16
 80012d2:	61bb      	str	r3, [r7, #24]
 80012d4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	617b      	str	r3, [r7, #20]
 80012da:	4b2a      	ldr	r3, [pc, #168]	; (8001384 <HAL_UART_MspInit+0xec>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	4a29      	ldr	r2, [pc, #164]	; (8001384 <HAL_UART_MspInit+0xec>)
 80012e0:	f043 0301 	orr.w	r3, r3, #1
 80012e4:	6313      	str	r3, [r2, #48]	; 0x30
 80012e6:	4b27      	ldr	r3, [pc, #156]	; (8001384 <HAL_UART_MspInit+0xec>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	617b      	str	r3, [r7, #20]
 80012f0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80012f2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80012f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f8:	2302      	movs	r3, #2
 80012fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001300:	2303      	movs	r3, #3
 8001302:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001304:	2307      	movs	r3, #7
 8001306:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001308:	f107 031c 	add.w	r3, r7, #28
 800130c:	4619      	mov	r1, r3
 800130e:	481e      	ldr	r0, [pc, #120]	; (8001388 <HAL_UART_MspInit+0xf0>)
 8001310:	f001 fb5c 	bl	80029cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001314:	e030      	b.n	8001378 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a1c      	ldr	r2, [pc, #112]	; (800138c <HAL_UART_MspInit+0xf4>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d12b      	bne.n	8001378 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001320:	2300      	movs	r3, #0
 8001322:	613b      	str	r3, [r7, #16]
 8001324:	4b17      	ldr	r3, [pc, #92]	; (8001384 <HAL_UART_MspInit+0xec>)
 8001326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001328:	4a16      	ldr	r2, [pc, #88]	; (8001384 <HAL_UART_MspInit+0xec>)
 800132a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800132e:	6413      	str	r3, [r2, #64]	; 0x40
 8001330:	4b14      	ldr	r3, [pc, #80]	; (8001384 <HAL_UART_MspInit+0xec>)
 8001332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001338:	613b      	str	r3, [r7, #16]
 800133a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800133c:	2300      	movs	r3, #0
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	4b10      	ldr	r3, [pc, #64]	; (8001384 <HAL_UART_MspInit+0xec>)
 8001342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001344:	4a0f      	ldr	r2, [pc, #60]	; (8001384 <HAL_UART_MspInit+0xec>)
 8001346:	f043 0301 	orr.w	r3, r3, #1
 800134a:	6313      	str	r3, [r2, #48]	; 0x30
 800134c:	4b0d      	ldr	r3, [pc, #52]	; (8001384 <HAL_UART_MspInit+0xec>)
 800134e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001350:	f003 0301 	and.w	r3, r3, #1
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001358:	230c      	movs	r3, #12
 800135a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135c:	2302      	movs	r3, #2
 800135e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001364:	2303      	movs	r3, #3
 8001366:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001368:	2307      	movs	r3, #7
 800136a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136c:	f107 031c 	add.w	r3, r7, #28
 8001370:	4619      	mov	r1, r3
 8001372:	4805      	ldr	r0, [pc, #20]	; (8001388 <HAL_UART_MspInit+0xf0>)
 8001374:	f001 fb2a 	bl	80029cc <HAL_GPIO_Init>
}
 8001378:	bf00      	nop
 800137a:	3730      	adds	r7, #48	; 0x30
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	40011000 	.word	0x40011000
 8001384:	40023800 	.word	0x40023800
 8001388:	40020000 	.word	0x40020000
 800138c:	40004400 	.word	0x40004400

08001390 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001394:	e7fe      	b.n	8001394 <NMI_Handler+0x4>

08001396 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001396:	b480      	push	{r7}
 8001398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800139a:	e7fe      	b.n	800139a <HardFault_Handler+0x4>

0800139c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013a0:	e7fe      	b.n	80013a0 <MemManage_Handler+0x4>

080013a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013a2:	b480      	push	{r7}
 80013a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013a6:	e7fe      	b.n	80013a6 <BusFault_Handler+0x4>

080013a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013ac:	e7fe      	b.n	80013ac <UsageFault_Handler+0x4>

080013ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr

080013ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ca:	b480      	push	{r7}
 80013cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013dc:	f000 f8da 	bl	8001594 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013e0:	bf00      	nop
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80013e8:	4802      	ldr	r0, [pc, #8]	; (80013f4 <ADC_IRQHandler+0x10>)
 80013ea:	f000 f95a 	bl	80016a2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000158 	.word	0x20000158

080013f8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80013fc:	4802      	ldr	r0, [pc, #8]	; (8001408 <DMA2_Stream0_IRQHandler+0x10>)
 80013fe:	f001 f87b 	bl	80024f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	200001a0 	.word	0x200001a0

0800140c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b086      	sub	sp, #24
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001414:	4a14      	ldr	r2, [pc, #80]	; (8001468 <_sbrk+0x5c>)
 8001416:	4b15      	ldr	r3, [pc, #84]	; (800146c <_sbrk+0x60>)
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001420:	4b13      	ldr	r3, [pc, #76]	; (8001470 <_sbrk+0x64>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d102      	bne.n	800142e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001428:	4b11      	ldr	r3, [pc, #68]	; (8001470 <_sbrk+0x64>)
 800142a:	4a12      	ldr	r2, [pc, #72]	; (8001474 <_sbrk+0x68>)
 800142c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800142e:	4b10      	ldr	r3, [pc, #64]	; (8001470 <_sbrk+0x64>)
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4413      	add	r3, r2
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	429a      	cmp	r2, r3
 800143a:	d207      	bcs.n	800144c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800143c:	f002 fb84 	bl	8003b48 <__errno>
 8001440:	4603      	mov	r3, r0
 8001442:	220c      	movs	r2, #12
 8001444:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001446:	f04f 33ff 	mov.w	r3, #4294967295
 800144a:	e009      	b.n	8001460 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800144c:	4b08      	ldr	r3, [pc, #32]	; (8001470 <_sbrk+0x64>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001452:	4b07      	ldr	r3, [pc, #28]	; (8001470 <_sbrk+0x64>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4413      	add	r3, r2
 800145a:	4a05      	ldr	r2, [pc, #20]	; (8001470 <_sbrk+0x64>)
 800145c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800145e:	68fb      	ldr	r3, [r7, #12]
}
 8001460:	4618      	mov	r0, r3
 8001462:	3718      	adds	r7, #24
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	20020000 	.word	0x20020000
 800146c:	00000400 	.word	0x00000400
 8001470:	2000008c 	.word	0x2000008c
 8001474:	20000218 	.word	0x20000218

08001478 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800147c:	4b06      	ldr	r3, [pc, #24]	; (8001498 <SystemInit+0x20>)
 800147e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001482:	4a05      	ldr	r2, [pc, #20]	; (8001498 <SystemInit+0x20>)
 8001484:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001488:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	e000ed00 	.word	0xe000ed00

0800149c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800149c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014a0:	480d      	ldr	r0, [pc, #52]	; (80014d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014a2:	490e      	ldr	r1, [pc, #56]	; (80014dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014a4:	4a0e      	ldr	r2, [pc, #56]	; (80014e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014a8:	e002      	b.n	80014b0 <LoopCopyDataInit>

080014aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ae:	3304      	adds	r3, #4

080014b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014b4:	d3f9      	bcc.n	80014aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014b6:	4a0b      	ldr	r2, [pc, #44]	; (80014e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014b8:	4c0b      	ldr	r4, [pc, #44]	; (80014e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80014ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014bc:	e001      	b.n	80014c2 <LoopFillZerobss>

080014be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014c0:	3204      	adds	r2, #4

080014c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014c4:	d3fb      	bcc.n	80014be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80014c6:	f7ff ffd7 	bl	8001478 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014ca:	f002 fb43 	bl	8003b54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014ce:	f7ff fbbf 	bl	8000c50 <main>
  bx  lr    
 80014d2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80014d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014dc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80014e0:	08004514 	.word	0x08004514
  ldr r2, =_sbss
 80014e4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80014e8:	20000214 	.word	0x20000214

080014ec <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014ec:	e7fe      	b.n	80014ec <DMA1_Stream0_IRQHandler>
	...

080014f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014f4:	4b0e      	ldr	r3, [pc, #56]	; (8001530 <HAL_Init+0x40>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a0d      	ldr	r2, [pc, #52]	; (8001530 <HAL_Init+0x40>)
 80014fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001500:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <HAL_Init+0x40>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a0a      	ldr	r2, [pc, #40]	; (8001530 <HAL_Init+0x40>)
 8001506:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800150a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800150c:	4b08      	ldr	r3, [pc, #32]	; (8001530 <HAL_Init+0x40>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a07      	ldr	r2, [pc, #28]	; (8001530 <HAL_Init+0x40>)
 8001512:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001516:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001518:	2003      	movs	r0, #3
 800151a:	f000 fea5 	bl	8002268 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800151e:	2000      	movs	r0, #0
 8001520:	f000 f808 	bl	8001534 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001524:	f7ff fe10 	bl	8001148 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40023c00 	.word	0x40023c00

08001534 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800153c:	4b12      	ldr	r3, [pc, #72]	; (8001588 <HAL_InitTick+0x54>)
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	4b12      	ldr	r3, [pc, #72]	; (800158c <HAL_InitTick+0x58>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	4619      	mov	r1, r3
 8001546:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800154a:	fbb3 f3f1 	udiv	r3, r3, r1
 800154e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001552:	4618      	mov	r0, r3
 8001554:	f000 febd 	bl	80022d2 <HAL_SYSTICK_Config>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e00e      	b.n	8001580 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2b0f      	cmp	r3, #15
 8001566:	d80a      	bhi.n	800157e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001568:	2200      	movs	r2, #0
 800156a:	6879      	ldr	r1, [r7, #4]
 800156c:	f04f 30ff 	mov.w	r0, #4294967295
 8001570:	f000 fe85 	bl	800227e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001574:	4a06      	ldr	r2, [pc, #24]	; (8001590 <HAL_InitTick+0x5c>)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800157a:	2300      	movs	r3, #0
 800157c:	e000      	b.n	8001580 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
}
 8001580:	4618      	mov	r0, r3
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	20000000 	.word	0x20000000
 800158c:	20000008 	.word	0x20000008
 8001590:	20000004 	.word	0x20000004

08001594 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001598:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <HAL_IncTick+0x20>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	461a      	mov	r2, r3
 800159e:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <HAL_IncTick+0x24>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4413      	add	r3, r2
 80015a4:	4a04      	ldr	r2, [pc, #16]	; (80015b8 <HAL_IncTick+0x24>)
 80015a6:	6013      	str	r3, [r2, #0]
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	20000008 	.word	0x20000008
 80015b8:	20000200 	.word	0x20000200

080015bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  return uwTick;
 80015c0:	4b03      	ldr	r3, [pc, #12]	; (80015d0 <HAL_GetTick+0x14>)
 80015c2:	681b      	ldr	r3, [r3, #0]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	20000200 	.word	0x20000200

080015d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015dc:	f7ff ffee 	bl	80015bc <HAL_GetTick>
 80015e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015ec:	d005      	beq.n	80015fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015ee:	4b0a      	ldr	r3, [pc, #40]	; (8001618 <HAL_Delay+0x44>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	461a      	mov	r2, r3
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	4413      	add	r3, r2
 80015f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015fa:	bf00      	nop
 80015fc:	f7ff ffde 	bl	80015bc <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	68fa      	ldr	r2, [r7, #12]
 8001608:	429a      	cmp	r2, r3
 800160a:	d8f7      	bhi.n	80015fc <HAL_Delay+0x28>
  {
  }
}
 800160c:	bf00      	nop
 800160e:	bf00      	nop
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	20000008 	.word	0x20000008

0800161c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001624:	2300      	movs	r3, #0
 8001626:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d101      	bne.n	8001632 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e033      	b.n	800169a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001636:	2b00      	cmp	r3, #0
 8001638:	d109      	bne.n	800164e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f7ff fdac 	bl	8001198 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2200      	movs	r2, #0
 800164a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001652:	f003 0310 	and.w	r3, r3, #16
 8001656:	2b00      	cmp	r3, #0
 8001658:	d118      	bne.n	800168c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001662:	f023 0302 	bic.w	r3, r3, #2
 8001666:	f043 0202 	orr.w	r2, r3, #2
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f000 fba2 	bl	8001db8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2200      	movs	r2, #0
 8001678:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	f023 0303 	bic.w	r3, r3, #3
 8001682:	f043 0201 	orr.w	r2, r3, #1
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	641a      	str	r2, [r3, #64]	; 0x40
 800168a:	e001      	b.n	8001690 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2200      	movs	r2, #0
 8001694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001698:	7bfb      	ldrb	r3, [r7, #15]
}
 800169a:	4618      	mov	r0, r3
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b084      	sub	sp, #16
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80016aa:	2300      	movs	r3, #0
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	2300      	movs	r3, #0
 80016b0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0302 	and.w	r3, r3, #2
 80016bc:	2b02      	cmp	r3, #2
 80016be:	bf0c      	ite	eq
 80016c0:	2301      	moveq	r3, #1
 80016c2:	2300      	movne	r3, #0
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f003 0320 	and.w	r3, r3, #32
 80016d2:	2b20      	cmp	r3, #32
 80016d4:	bf0c      	ite	eq
 80016d6:	2301      	moveq	r3, #1
 80016d8:	2300      	movne	r3, #0
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d049      	beq.n	8001778 <HAL_ADC_IRQHandler+0xd6>
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d046      	beq.n	8001778 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	f003 0310 	and.w	r3, r3, #16
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d105      	bne.n	8001702 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d12b      	bne.n	8001768 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001714:	2b00      	cmp	r3, #0
 8001716:	d127      	bne.n	8001768 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001722:	2b00      	cmp	r3, #0
 8001724:	d006      	beq.n	8001734 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001730:	2b00      	cmp	r3, #0
 8001732:	d119      	bne.n	8001768 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	685a      	ldr	r2, [r3, #4]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f022 0220 	bic.w	r2, r2, #32
 8001742:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001748:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001754:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d105      	bne.n	8001768 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001760:	f043 0201 	orr.w	r2, r3, #1
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f000 f9cb 	bl	8001b04 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f06f 0212 	mvn.w	r2, #18
 8001776:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0304 	and.w	r3, r3, #4
 8001782:	2b04      	cmp	r3, #4
 8001784:	bf0c      	ite	eq
 8001786:	2301      	moveq	r3, #1
 8001788:	2300      	movne	r3, #0
 800178a:	b2db      	uxtb	r3, r3
 800178c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001798:	2b80      	cmp	r3, #128	; 0x80
 800179a:	bf0c      	ite	eq
 800179c:	2301      	moveq	r3, #1
 800179e:	2300      	movne	r3, #0
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d057      	beq.n	800185a <HAL_ADC_IRQHandler+0x1b8>
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d054      	beq.n	800185a <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b4:	f003 0310 	and.w	r3, r3, #16
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d105      	bne.n	80017c8 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d139      	bne.n	800184a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017dc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d006      	beq.n	80017f2 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d12b      	bne.n	800184a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d124      	bne.n	800184a <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800180a:	2b00      	cmp	r3, #0
 800180c:	d11d      	bne.n	800184a <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001812:	2b00      	cmp	r3, #0
 8001814:	d119      	bne.n	800184a <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	685a      	ldr	r2, [r3, #4]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001824:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800183a:	2b00      	cmp	r3, #0
 800183c:	d105      	bne.n	800184a <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001842:	f043 0201 	orr.w	r2, r3, #1
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f000 fc32 	bl	80020b4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f06f 020c 	mvn.w	r2, #12
 8001858:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0301 	and.w	r3, r3, #1
 8001864:	2b01      	cmp	r3, #1
 8001866:	bf0c      	ite	eq
 8001868:	2301      	moveq	r3, #1
 800186a:	2300      	movne	r3, #0
 800186c:	b2db      	uxtb	r3, r3
 800186e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800187a:	2b40      	cmp	r3, #64	; 0x40
 800187c:	bf0c      	ite	eq
 800187e:	2301      	moveq	r3, #1
 8001880:	2300      	movne	r3, #0
 8001882:	b2db      	uxtb	r3, r3
 8001884:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d017      	beq.n	80018bc <HAL_ADC_IRQHandler+0x21a>
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d014      	beq.n	80018bc <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0301 	and.w	r3, r3, #1
 800189c:	2b01      	cmp	r3, #1
 800189e:	d10d      	bne.n	80018bc <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f000 f93d 	bl	8001b2c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f06f 0201 	mvn.w	r2, #1
 80018ba:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0320 	and.w	r3, r3, #32
 80018c6:	2b20      	cmp	r3, #32
 80018c8:	bf0c      	ite	eq
 80018ca:	2301      	moveq	r3, #1
 80018cc:	2300      	movne	r3, #0
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80018e0:	bf0c      	ite	eq
 80018e2:	2301      	moveq	r3, #1
 80018e4:	2300      	movne	r3, #0
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d015      	beq.n	800191c <HAL_ADC_IRQHandler+0x27a>
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d012      	beq.n	800191c <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fa:	f043 0202 	orr.w	r2, r3, #2
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f06f 0220 	mvn.w	r2, #32
 800190a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f000 f917 	bl	8001b40 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f06f 0220 	mvn.w	r2, #32
 800191a:	601a      	str	r2, [r3, #0]
  }
}
 800191c:	bf00      	nop
 800191e:	3710      	adds	r7, #16
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001930:	2300      	movs	r3, #0
 8001932:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800193a:	2b01      	cmp	r3, #1
 800193c:	d101      	bne.n	8001942 <HAL_ADC_Start_DMA+0x1e>
 800193e:	2302      	movs	r3, #2
 8001940:	e0ce      	b.n	8001ae0 <HAL_ADC_Start_DMA+0x1bc>
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2201      	movs	r2, #1
 8001946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	2b01      	cmp	r3, #1
 8001956:	d018      	beq.n	800198a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	689a      	ldr	r2, [r3, #8]
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f042 0201 	orr.w	r2, r2, #1
 8001966:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001968:	4b5f      	ldr	r3, [pc, #380]	; (8001ae8 <HAL_ADC_Start_DMA+0x1c4>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a5f      	ldr	r2, [pc, #380]	; (8001aec <HAL_ADC_Start_DMA+0x1c8>)
 800196e:	fba2 2303 	umull	r2, r3, r2, r3
 8001972:	0c9a      	lsrs	r2, r3, #18
 8001974:	4613      	mov	r3, r2
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	4413      	add	r3, r2
 800197a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800197c:	e002      	b.n	8001984 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	3b01      	subs	r3, #1
 8001982:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d1f9      	bne.n	800197e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001994:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001998:	d107      	bne.n	80019aa <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	689a      	ldr	r2, [r3, #8]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019a8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f003 0301 	and.w	r3, r3, #1
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	f040 8086 	bne.w	8001ac6 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80019c2:	f023 0301 	bic.w	r3, r3, #1
 80019c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d007      	beq.n	80019ec <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80019e4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019f8:	d106      	bne.n	8001a08 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fe:	f023 0206 	bic.w	r2, r3, #6
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	645a      	str	r2, [r3, #68]	; 0x44
 8001a06:	e002      	b.n	8001a0e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2200      	movs	r2, #0
 8001a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a16:	4b36      	ldr	r3, [pc, #216]	; (8001af0 <HAL_ADC_Start_DMA+0x1cc>)
 8001a18:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a1e:	4a35      	ldr	r2, [pc, #212]	; (8001af4 <HAL_ADC_Start_DMA+0x1d0>)
 8001a20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a26:	4a34      	ldr	r2, [pc, #208]	; (8001af8 <HAL_ADC_Start_DMA+0x1d4>)
 8001a28:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a2e:	4a33      	ldr	r2, [pc, #204]	; (8001afc <HAL_ADC_Start_DMA+0x1d8>)
 8001a30:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001a3a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	685a      	ldr	r2, [r3, #4]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001a4a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	689a      	ldr	r2, [r3, #8]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a5a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	334c      	adds	r3, #76	; 0x4c
 8001a66:	4619      	mov	r1, r3
 8001a68:	68ba      	ldr	r2, [r7, #8]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f000 fcec 	bl	8002448 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f003 031f 	and.w	r3, r3, #31
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d10f      	bne.n	8001a9c <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d129      	bne.n	8001ade <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	689a      	ldr	r2, [r3, #8]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a98:	609a      	str	r2, [r3, #8]
 8001a9a:	e020      	b.n	8001ade <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a17      	ldr	r2, [pc, #92]	; (8001b00 <HAL_ADC_Start_DMA+0x1dc>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d11b      	bne.n	8001ade <HAL_ADC_Start_DMA+0x1ba>
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d114      	bne.n	8001ade <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	689a      	ldr	r2, [r3, #8]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ac2:	609a      	str	r2, [r3, #8]
 8001ac4:	e00b      	b.n	8001ade <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aca:	f043 0210 	orr.w	r2, r3, #16
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad6:	f043 0201 	orr.w	r2, r3, #1
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001ade:	2300      	movs	r3, #0
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3718      	adds	r7, #24
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	20000000 	.word	0x20000000
 8001aec:	431bde83 	.word	0x431bde83
 8001af0:	40012300 	.word	0x40012300
 8001af4:	08001fb1 	.word	0x08001fb1
 8001af8:	0800206b 	.word	0x0800206b
 8001afc:	08002087 	.word	0x08002087
 8001b00:	40012000 	.word	0x40012000

08001b04 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001b34:	bf00      	nop
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d101      	bne.n	8001b70 <HAL_ADC_ConfigChannel+0x1c>
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	e113      	b.n	8001d98 <HAL_ADC_ConfigChannel+0x244>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2b09      	cmp	r3, #9
 8001b7e:	d925      	bls.n	8001bcc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	68d9      	ldr	r1, [r3, #12]
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	4613      	mov	r3, r2
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	4413      	add	r3, r2
 8001b94:	3b1e      	subs	r3, #30
 8001b96:	2207      	movs	r2, #7
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	43da      	mvns	r2, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	400a      	ands	r2, r1
 8001ba4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	68d9      	ldr	r1, [r3, #12]
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	689a      	ldr	r2, [r3, #8]
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	4603      	mov	r3, r0
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	4403      	add	r3, r0
 8001bbe:	3b1e      	subs	r3, #30
 8001bc0:	409a      	lsls	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	430a      	orrs	r2, r1
 8001bc8:	60da      	str	r2, [r3, #12]
 8001bca:	e022      	b.n	8001c12 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	6919      	ldr	r1, [r3, #16]
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	461a      	mov	r2, r3
 8001bda:	4613      	mov	r3, r2
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	4413      	add	r3, r2
 8001be0:	2207      	movs	r2, #7
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	43da      	mvns	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	400a      	ands	r2, r1
 8001bee:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	6919      	ldr	r1, [r3, #16]
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	689a      	ldr	r2, [r3, #8]
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	4618      	mov	r0, r3
 8001c02:	4603      	mov	r3, r0
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	4403      	add	r3, r0
 8001c08:	409a      	lsls	r2, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	2b06      	cmp	r3, #6
 8001c18:	d824      	bhi.n	8001c64 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685a      	ldr	r2, [r3, #4]
 8001c24:	4613      	mov	r3, r2
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	4413      	add	r3, r2
 8001c2a:	3b05      	subs	r3, #5
 8001c2c:	221f      	movs	r2, #31
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	43da      	mvns	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	400a      	ands	r2, r1
 8001c3a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	4618      	mov	r0, r3
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685a      	ldr	r2, [r3, #4]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	4413      	add	r3, r2
 8001c54:	3b05      	subs	r3, #5
 8001c56:	fa00 f203 	lsl.w	r2, r0, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	635a      	str	r2, [r3, #52]	; 0x34
 8001c62:	e04c      	b.n	8001cfe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	2b0c      	cmp	r3, #12
 8001c6a:	d824      	bhi.n	8001cb6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685a      	ldr	r2, [r3, #4]
 8001c76:	4613      	mov	r3, r2
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	4413      	add	r3, r2
 8001c7c:	3b23      	subs	r3, #35	; 0x23
 8001c7e:	221f      	movs	r2, #31
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	43da      	mvns	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	400a      	ands	r2, r1
 8001c8c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685a      	ldr	r2, [r3, #4]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	4413      	add	r3, r2
 8001ca6:	3b23      	subs	r3, #35	; 0x23
 8001ca8:	fa00 f203 	lsl.w	r2, r0, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	631a      	str	r2, [r3, #48]	; 0x30
 8001cb4:	e023      	b.n	8001cfe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685a      	ldr	r2, [r3, #4]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	4413      	add	r3, r2
 8001cc6:	3b41      	subs	r3, #65	; 0x41
 8001cc8:	221f      	movs	r2, #31
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	43da      	mvns	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	400a      	ands	r2, r1
 8001cd6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685a      	ldr	r2, [r3, #4]
 8001cea:	4613      	mov	r3, r2
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	4413      	add	r3, r2
 8001cf0:	3b41      	subs	r3, #65	; 0x41
 8001cf2:	fa00 f203 	lsl.w	r2, r0, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cfe:	4b29      	ldr	r3, [pc, #164]	; (8001da4 <HAL_ADC_ConfigChannel+0x250>)
 8001d00:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a28      	ldr	r2, [pc, #160]	; (8001da8 <HAL_ADC_ConfigChannel+0x254>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d10f      	bne.n	8001d2c <HAL_ADC_ConfigChannel+0x1d8>
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2b12      	cmp	r3, #18
 8001d12:	d10b      	bne.n	8001d2c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a1d      	ldr	r2, [pc, #116]	; (8001da8 <HAL_ADC_ConfigChannel+0x254>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d12b      	bne.n	8001d8e <HAL_ADC_ConfigChannel+0x23a>
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a1c      	ldr	r2, [pc, #112]	; (8001dac <HAL_ADC_ConfigChannel+0x258>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d003      	beq.n	8001d48 <HAL_ADC_ConfigChannel+0x1f4>
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2b11      	cmp	r3, #17
 8001d46:	d122      	bne.n	8001d8e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a11      	ldr	r2, [pc, #68]	; (8001dac <HAL_ADC_ConfigChannel+0x258>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d111      	bne.n	8001d8e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d6a:	4b11      	ldr	r3, [pc, #68]	; (8001db0 <HAL_ADC_ConfigChannel+0x25c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a11      	ldr	r2, [pc, #68]	; (8001db4 <HAL_ADC_ConfigChannel+0x260>)
 8001d70:	fba2 2303 	umull	r2, r3, r2, r3
 8001d74:	0c9a      	lsrs	r2, r3, #18
 8001d76:	4613      	mov	r3, r2
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	4413      	add	r3, r2
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d80:	e002      	b.n	8001d88 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	3b01      	subs	r3, #1
 8001d86:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1f9      	bne.n	8001d82 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001d96:	2300      	movs	r3, #0
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3714      	adds	r7, #20
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr
 8001da4:	40012300 	.word	0x40012300
 8001da8:	40012000 	.word	0x40012000
 8001dac:	10000012 	.word	0x10000012
 8001db0:	20000000 	.word	0x20000000
 8001db4:	431bde83 	.word	0x431bde83

08001db8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001dc0:	4b79      	ldr	r3, [pc, #484]	; (8001fa8 <ADC_Init+0x1f0>)
 8001dc2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	685a      	ldr	r2, [r3, #4]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	431a      	orrs	r2, r3
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	685a      	ldr	r2, [r3, #4]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001dec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	6859      	ldr	r1, [r3, #4]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	691b      	ldr	r3, [r3, #16]
 8001df8:	021a      	lsls	r2, r3, #8
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	685a      	ldr	r2, [r3, #4]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001e10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	6859      	ldr	r1, [r3, #4]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689a      	ldr	r2, [r3, #8]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	430a      	orrs	r2, r1
 8001e22:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	689a      	ldr	r2, [r3, #8]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6899      	ldr	r1, [r3, #8]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	68da      	ldr	r2, [r3, #12]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	430a      	orrs	r2, r1
 8001e44:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e4a:	4a58      	ldr	r2, [pc, #352]	; (8001fac <ADC_Init+0x1f4>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d022      	beq.n	8001e96 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	689a      	ldr	r2, [r3, #8]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e5e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	6899      	ldr	r1, [r3, #8]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	689a      	ldr	r2, [r3, #8]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	6899      	ldr	r1, [r3, #8]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	430a      	orrs	r2, r1
 8001e92:	609a      	str	r2, [r3, #8]
 8001e94:	e00f      	b.n	8001eb6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	689a      	ldr	r2, [r3, #8]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ea4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	689a      	ldr	r2, [r3, #8]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001eb4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	689a      	ldr	r2, [r3, #8]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f022 0202 	bic.w	r2, r2, #2
 8001ec4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	6899      	ldr	r1, [r3, #8]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	7e1b      	ldrb	r3, [r3, #24]
 8001ed0:	005a      	lsls	r2, r3, #1
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d01b      	beq.n	8001f1c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	685a      	ldr	r2, [r3, #4]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ef2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	685a      	ldr	r2, [r3, #4]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001f02:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6859      	ldr	r1, [r3, #4]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	035a      	lsls	r2, r3, #13
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	430a      	orrs	r2, r1
 8001f18:	605a      	str	r2, [r3, #4]
 8001f1a:	e007      	b.n	8001f2c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	685a      	ldr	r2, [r3, #4]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f2a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001f3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	69db      	ldr	r3, [r3, #28]
 8001f46:	3b01      	subs	r3, #1
 8001f48:	051a      	lsls	r2, r3, #20
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	689a      	ldr	r2, [r3, #8]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f60:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	6899      	ldr	r1, [r3, #8]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f6e:	025a      	lsls	r2, r3, #9
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	430a      	orrs	r2, r1
 8001f76:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	689a      	ldr	r2, [r3, #8]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	6899      	ldr	r1, [r3, #8]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	695b      	ldr	r3, [r3, #20]
 8001f92:	029a      	lsls	r2, r3, #10
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	609a      	str	r2, [r3, #8]
}
 8001f9c:	bf00      	nop
 8001f9e:	3714      	adds	r7, #20
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr
 8001fa8:	40012300 	.word	0x40012300
 8001fac:	0f000001 	.word	0x0f000001

08001fb0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fbc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d13c      	bne.n	8002044 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fce:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d12b      	bne.n	800203c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d127      	bne.n	800203c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d006      	beq.n	8002008 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002004:	2b00      	cmp	r3, #0
 8002006:	d119      	bne.n	800203c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	685a      	ldr	r2, [r3, #4]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f022 0220 	bic.w	r2, r2, #32
 8002016:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002028:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d105      	bne.n	800203c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002034:	f043 0201 	orr.w	r2, r3, #1
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800203c:	68f8      	ldr	r0, [r7, #12]
 800203e:	f7ff fd61 	bl	8001b04 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002042:	e00e      	b.n	8002062 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002048:	f003 0310 	and.w	r3, r3, #16
 800204c:	2b00      	cmp	r3, #0
 800204e:	d003      	beq.n	8002058 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002050:	68f8      	ldr	r0, [r7, #12]
 8002052:	f7ff fd75 	bl	8001b40 <HAL_ADC_ErrorCallback>
}
 8002056:	e004      	b.n	8002062 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800205c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	4798      	blx	r3
}
 8002062:	bf00      	nop
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b084      	sub	sp, #16
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002076:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002078:	68f8      	ldr	r0, [r7, #12]
 800207a:	f7ff fd4d 	bl	8001b18 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800207e:	bf00      	nop
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b084      	sub	sp, #16
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002092:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2240      	movs	r2, #64	; 0x40
 8002098:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209e:	f043 0204 	orr.w	r2, r3, #4
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80020a6:	68f8      	ldr	r0, [r7, #12]
 80020a8:	f7ff fd4a 	bl	8001b40 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80020ac:	bf00      	nop
 80020ae:	3710      	adds	r7, #16
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80020bc:	bf00      	nop
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f003 0307 	and.w	r3, r3, #7
 80020d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020d8:	4b0c      	ldr	r3, [pc, #48]	; (800210c <__NVIC_SetPriorityGrouping+0x44>)
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020de:	68ba      	ldr	r2, [r7, #8]
 80020e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020e4:	4013      	ands	r3, r2
 80020e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020fa:	4a04      	ldr	r2, [pc, #16]	; (800210c <__NVIC_SetPriorityGrouping+0x44>)
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	60d3      	str	r3, [r2, #12]
}
 8002100:	bf00      	nop
 8002102:	3714      	adds	r7, #20
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	e000ed00 	.word	0xe000ed00

08002110 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002114:	4b04      	ldr	r3, [pc, #16]	; (8002128 <__NVIC_GetPriorityGrouping+0x18>)
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	0a1b      	lsrs	r3, r3, #8
 800211a:	f003 0307 	and.w	r3, r3, #7
}
 800211e:	4618      	mov	r0, r3
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr
 8002128:	e000ed00 	.word	0xe000ed00

0800212c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	4603      	mov	r3, r0
 8002134:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213a:	2b00      	cmp	r3, #0
 800213c:	db0b      	blt.n	8002156 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800213e:	79fb      	ldrb	r3, [r7, #7]
 8002140:	f003 021f 	and.w	r2, r3, #31
 8002144:	4907      	ldr	r1, [pc, #28]	; (8002164 <__NVIC_EnableIRQ+0x38>)
 8002146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214a:	095b      	lsrs	r3, r3, #5
 800214c:	2001      	movs	r0, #1
 800214e:	fa00 f202 	lsl.w	r2, r0, r2
 8002152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002156:	bf00      	nop
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	e000e100 	.word	0xe000e100

08002168 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	4603      	mov	r3, r0
 8002170:	6039      	str	r1, [r7, #0]
 8002172:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002178:	2b00      	cmp	r3, #0
 800217a:	db0a      	blt.n	8002192 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	b2da      	uxtb	r2, r3
 8002180:	490c      	ldr	r1, [pc, #48]	; (80021b4 <__NVIC_SetPriority+0x4c>)
 8002182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002186:	0112      	lsls	r2, r2, #4
 8002188:	b2d2      	uxtb	r2, r2
 800218a:	440b      	add	r3, r1
 800218c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002190:	e00a      	b.n	80021a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	b2da      	uxtb	r2, r3
 8002196:	4908      	ldr	r1, [pc, #32]	; (80021b8 <__NVIC_SetPriority+0x50>)
 8002198:	79fb      	ldrb	r3, [r7, #7]
 800219a:	f003 030f 	and.w	r3, r3, #15
 800219e:	3b04      	subs	r3, #4
 80021a0:	0112      	lsls	r2, r2, #4
 80021a2:	b2d2      	uxtb	r2, r2
 80021a4:	440b      	add	r3, r1
 80021a6:	761a      	strb	r2, [r3, #24]
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr
 80021b4:	e000e100 	.word	0xe000e100
 80021b8:	e000ed00 	.word	0xe000ed00

080021bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021bc:	b480      	push	{r7}
 80021be:	b089      	sub	sp, #36	; 0x24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f003 0307 	and.w	r3, r3, #7
 80021ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	f1c3 0307 	rsb	r3, r3, #7
 80021d6:	2b04      	cmp	r3, #4
 80021d8:	bf28      	it	cs
 80021da:	2304      	movcs	r3, #4
 80021dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	3304      	adds	r3, #4
 80021e2:	2b06      	cmp	r3, #6
 80021e4:	d902      	bls.n	80021ec <NVIC_EncodePriority+0x30>
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	3b03      	subs	r3, #3
 80021ea:	e000      	b.n	80021ee <NVIC_EncodePriority+0x32>
 80021ec:	2300      	movs	r3, #0
 80021ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021f0:	f04f 32ff 	mov.w	r2, #4294967295
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
 80021fa:	43da      	mvns	r2, r3
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	401a      	ands	r2, r3
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002204:	f04f 31ff 	mov.w	r1, #4294967295
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	fa01 f303 	lsl.w	r3, r1, r3
 800220e:	43d9      	mvns	r1, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002214:	4313      	orrs	r3, r2
         );
}
 8002216:	4618      	mov	r0, r3
 8002218:	3724      	adds	r7, #36	; 0x24
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
	...

08002224 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	3b01      	subs	r3, #1
 8002230:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002234:	d301      	bcc.n	800223a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002236:	2301      	movs	r3, #1
 8002238:	e00f      	b.n	800225a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800223a:	4a0a      	ldr	r2, [pc, #40]	; (8002264 <SysTick_Config+0x40>)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	3b01      	subs	r3, #1
 8002240:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002242:	210f      	movs	r1, #15
 8002244:	f04f 30ff 	mov.w	r0, #4294967295
 8002248:	f7ff ff8e 	bl	8002168 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800224c:	4b05      	ldr	r3, [pc, #20]	; (8002264 <SysTick_Config+0x40>)
 800224e:	2200      	movs	r2, #0
 8002250:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002252:	4b04      	ldr	r3, [pc, #16]	; (8002264 <SysTick_Config+0x40>)
 8002254:	2207      	movs	r2, #7
 8002256:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	e000e010 	.word	0xe000e010

08002268 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f7ff ff29 	bl	80020c8 <__NVIC_SetPriorityGrouping>
}
 8002276:	bf00      	nop
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800227e:	b580      	push	{r7, lr}
 8002280:	b086      	sub	sp, #24
 8002282:	af00      	add	r7, sp, #0
 8002284:	4603      	mov	r3, r0
 8002286:	60b9      	str	r1, [r7, #8]
 8002288:	607a      	str	r2, [r7, #4]
 800228a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800228c:	2300      	movs	r3, #0
 800228e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002290:	f7ff ff3e 	bl	8002110 <__NVIC_GetPriorityGrouping>
 8002294:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	68b9      	ldr	r1, [r7, #8]
 800229a:	6978      	ldr	r0, [r7, #20]
 800229c:	f7ff ff8e 	bl	80021bc <NVIC_EncodePriority>
 80022a0:	4602      	mov	r2, r0
 80022a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022a6:	4611      	mov	r1, r2
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff ff5d 	bl	8002168 <__NVIC_SetPriority>
}
 80022ae:	bf00      	nop
 80022b0:	3718      	adds	r7, #24
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b082      	sub	sp, #8
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	4603      	mov	r3, r0
 80022be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff ff31 	bl	800212c <__NVIC_EnableIRQ>
}
 80022ca:	bf00      	nop
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b082      	sub	sp, #8
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f7ff ffa2 	bl	8002224 <SysTick_Config>
 80022e0:	4603      	mov	r3, r0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
	...

080022ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80022f4:	2300      	movs	r3, #0
 80022f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80022f8:	f7ff f960 	bl	80015bc <HAL_GetTick>
 80022fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d101      	bne.n	8002308 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e099      	b.n	800243c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2202      	movs	r2, #2
 8002314:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f022 0201 	bic.w	r2, r2, #1
 8002326:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002328:	e00f      	b.n	800234a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800232a:	f7ff f947 	bl	80015bc <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	2b05      	cmp	r3, #5
 8002336:	d908      	bls.n	800234a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2220      	movs	r2, #32
 800233c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2203      	movs	r2, #3
 8002342:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e078      	b.n	800243c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0301 	and.w	r3, r3, #1
 8002354:	2b00      	cmp	r3, #0
 8002356:	d1e8      	bne.n	800232a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002360:	697a      	ldr	r2, [r7, #20]
 8002362:	4b38      	ldr	r3, [pc, #224]	; (8002444 <HAL_DMA_Init+0x158>)
 8002364:	4013      	ands	r3, r2
 8002366:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685a      	ldr	r2, [r3, #4]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002376:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002382:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800238e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a1b      	ldr	r3, [r3, #32]
 8002394:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002396:	697a      	ldr	r2, [r7, #20]
 8002398:	4313      	orrs	r3, r2
 800239a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a0:	2b04      	cmp	r3, #4
 80023a2:	d107      	bne.n	80023b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ac:	4313      	orrs	r3, r2
 80023ae:	697a      	ldr	r2, [r7, #20]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	697a      	ldr	r2, [r7, #20]
 80023ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	695b      	ldr	r3, [r3, #20]
 80023c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	f023 0307 	bic.w	r3, r3, #7
 80023ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d0:	697a      	ldr	r2, [r7, #20]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023da:	2b04      	cmp	r3, #4
 80023dc:	d117      	bne.n	800240e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e2:	697a      	ldr	r2, [r7, #20]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d00e      	beq.n	800240e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f000 fa6f 	bl	80028d4 <DMA_CheckFifoParam>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d008      	beq.n	800240e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2240      	movs	r2, #64	; 0x40
 8002400:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2201      	movs	r2, #1
 8002406:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800240a:	2301      	movs	r3, #1
 800240c:	e016      	b.n	800243c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	697a      	ldr	r2, [r7, #20]
 8002414:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 fa26 	bl	8002868 <DMA_CalcBaseAndBitshift>
 800241c:	4603      	mov	r3, r0
 800241e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002424:	223f      	movs	r2, #63	; 0x3f
 8002426:	409a      	lsls	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2201      	movs	r2, #1
 8002436:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3718      	adds	r7, #24
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	f010803f 	.word	0xf010803f

08002448 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
 8002454:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002456:	2300      	movs	r3, #0
 8002458:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800245e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002466:	2b01      	cmp	r3, #1
 8002468:	d101      	bne.n	800246e <HAL_DMA_Start_IT+0x26>
 800246a:	2302      	movs	r3, #2
 800246c:	e040      	b.n	80024f0 <HAL_DMA_Start_IT+0xa8>
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2201      	movs	r2, #1
 8002472:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b01      	cmp	r3, #1
 8002480:	d12f      	bne.n	80024e2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2202      	movs	r2, #2
 8002486:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2200      	movs	r2, #0
 800248e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	68b9      	ldr	r1, [r7, #8]
 8002496:	68f8      	ldr	r0, [r7, #12]
 8002498:	f000 f9b8 	bl	800280c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a0:	223f      	movs	r2, #63	; 0x3f
 80024a2:	409a      	lsls	r2, r3
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f042 0216 	orr.w	r2, r2, #22
 80024b6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d007      	beq.n	80024d0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f042 0208 	orr.w	r2, r2, #8
 80024ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f042 0201 	orr.w	r2, r2, #1
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	e005      	b.n	80024ee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80024ea:	2302      	movs	r3, #2
 80024ec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80024ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3718      	adds	r7, #24
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002500:	2300      	movs	r3, #0
 8002502:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002504:	4b92      	ldr	r3, [pc, #584]	; (8002750 <HAL_DMA_IRQHandler+0x258>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a92      	ldr	r2, [pc, #584]	; (8002754 <HAL_DMA_IRQHandler+0x25c>)
 800250a:	fba2 2303 	umull	r2, r3, r2, r3
 800250e:	0a9b      	lsrs	r3, r3, #10
 8002510:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002516:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002522:	2208      	movs	r2, #8
 8002524:	409a      	lsls	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	4013      	ands	r3, r2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d01a      	beq.n	8002564 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0304 	and.w	r3, r3, #4
 8002538:	2b00      	cmp	r3, #0
 800253a:	d013      	beq.n	8002564 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f022 0204 	bic.w	r2, r2, #4
 800254a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002550:	2208      	movs	r2, #8
 8002552:	409a      	lsls	r2, r3
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800255c:	f043 0201 	orr.w	r2, r3, #1
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002568:	2201      	movs	r2, #1
 800256a:	409a      	lsls	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	4013      	ands	r3, r2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d012      	beq.n	800259a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	695b      	ldr	r3, [r3, #20]
 800257a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800257e:	2b00      	cmp	r3, #0
 8002580:	d00b      	beq.n	800259a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002586:	2201      	movs	r2, #1
 8002588:	409a      	lsls	r2, r3
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002592:	f043 0202 	orr.w	r2, r3, #2
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800259e:	2204      	movs	r2, #4
 80025a0:	409a      	lsls	r2, r3
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	4013      	ands	r3, r2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d012      	beq.n	80025d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0302 	and.w	r3, r3, #2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00b      	beq.n	80025d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025bc:	2204      	movs	r2, #4
 80025be:	409a      	lsls	r2, r3
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c8:	f043 0204 	orr.w	r2, r3, #4
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d4:	2210      	movs	r2, #16
 80025d6:	409a      	lsls	r2, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	4013      	ands	r3, r2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d043      	beq.n	8002668 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0308 	and.w	r3, r3, #8
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d03c      	beq.n	8002668 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f2:	2210      	movs	r2, #16
 80025f4:	409a      	lsls	r2, r3
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d018      	beq.n	800263a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d108      	bne.n	8002628 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261a:	2b00      	cmp	r3, #0
 800261c:	d024      	beq.n	8002668 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	4798      	blx	r3
 8002626:	e01f      	b.n	8002668 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800262c:	2b00      	cmp	r3, #0
 800262e:	d01b      	beq.n	8002668 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	4798      	blx	r3
 8002638:	e016      	b.n	8002668 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002644:	2b00      	cmp	r3, #0
 8002646:	d107      	bne.n	8002658 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f022 0208 	bic.w	r2, r2, #8
 8002656:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265c:	2b00      	cmp	r3, #0
 800265e:	d003      	beq.n	8002668 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800266c:	2220      	movs	r2, #32
 800266e:	409a      	lsls	r2, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	4013      	ands	r3, r2
 8002674:	2b00      	cmp	r3, #0
 8002676:	f000 808e 	beq.w	8002796 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0310 	and.w	r3, r3, #16
 8002684:	2b00      	cmp	r3, #0
 8002686:	f000 8086 	beq.w	8002796 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800268e:	2220      	movs	r2, #32
 8002690:	409a      	lsls	r2, r3
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b05      	cmp	r3, #5
 80026a0:	d136      	bne.n	8002710 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f022 0216 	bic.w	r2, r2, #22
 80026b0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	695a      	ldr	r2, [r3, #20]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026c0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d103      	bne.n	80026d2 <HAL_DMA_IRQHandler+0x1da>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d007      	beq.n	80026e2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 0208 	bic.w	r2, r2, #8
 80026e0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e6:	223f      	movs	r2, #63	; 0x3f
 80026e8:	409a      	lsls	r2, r3
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2201      	movs	r2, #1
 80026fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002702:	2b00      	cmp	r3, #0
 8002704:	d07d      	beq.n	8002802 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	4798      	blx	r3
        }
        return;
 800270e:	e078      	b.n	8002802 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d01c      	beq.n	8002758 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d108      	bne.n	800273e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002730:	2b00      	cmp	r3, #0
 8002732:	d030      	beq.n	8002796 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	4798      	blx	r3
 800273c:	e02b      	b.n	8002796 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002742:	2b00      	cmp	r3, #0
 8002744:	d027      	beq.n	8002796 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	4798      	blx	r3
 800274e:	e022      	b.n	8002796 <HAL_DMA_IRQHandler+0x29e>
 8002750:	20000000 	.word	0x20000000
 8002754:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002762:	2b00      	cmp	r3, #0
 8002764:	d10f      	bne.n	8002786 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f022 0210 	bic.w	r2, r2, #16
 8002774:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2201      	movs	r2, #1
 8002782:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800278a:	2b00      	cmp	r3, #0
 800278c:	d003      	beq.n	8002796 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800279a:	2b00      	cmp	r3, #0
 800279c:	d032      	beq.n	8002804 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d022      	beq.n	80027f0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2205      	movs	r2, #5
 80027ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f022 0201 	bic.w	r2, r2, #1
 80027c0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	3301      	adds	r3, #1
 80027c6:	60bb      	str	r3, [r7, #8]
 80027c8:	697a      	ldr	r2, [r7, #20]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d307      	bcc.n	80027de <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0301 	and.w	r3, r3, #1
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d1f2      	bne.n	80027c2 <HAL_DMA_IRQHandler+0x2ca>
 80027dc:	e000      	b.n	80027e0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80027de:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d005      	beq.n	8002804 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	4798      	blx	r3
 8002800:	e000      	b.n	8002804 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002802:	bf00      	nop
    }
  }
}
 8002804:	3718      	adds	r7, #24
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop

0800280c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]
 8002818:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002828:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	2b40      	cmp	r3, #64	; 0x40
 8002838:	d108      	bne.n	800284c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68ba      	ldr	r2, [r7, #8]
 8002848:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800284a:	e007      	b.n	800285c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	68ba      	ldr	r2, [r7, #8]
 8002852:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	60da      	str	r2, [r3, #12]
}
 800285c:	bf00      	nop
 800285e:	3714      	adds	r7, #20
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002868:	b480      	push	{r7}
 800286a:	b085      	sub	sp, #20
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	b2db      	uxtb	r3, r3
 8002876:	3b10      	subs	r3, #16
 8002878:	4a14      	ldr	r2, [pc, #80]	; (80028cc <DMA_CalcBaseAndBitshift+0x64>)
 800287a:	fba2 2303 	umull	r2, r3, r2, r3
 800287e:	091b      	lsrs	r3, r3, #4
 8002880:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002882:	4a13      	ldr	r2, [pc, #76]	; (80028d0 <DMA_CalcBaseAndBitshift+0x68>)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	4413      	add	r3, r2
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	461a      	mov	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2b03      	cmp	r3, #3
 8002894:	d909      	bls.n	80028aa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800289e:	f023 0303 	bic.w	r3, r3, #3
 80028a2:	1d1a      	adds	r2, r3, #4
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	659a      	str	r2, [r3, #88]	; 0x58
 80028a8:	e007      	b.n	80028ba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80028b2:	f023 0303 	bic.w	r3, r3, #3
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3714      	adds	r7, #20
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	aaaaaaab 	.word	0xaaaaaaab
 80028d0:	080044c8 	.word	0x080044c8

080028d4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028dc:	2300      	movs	r3, #0
 80028de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d11f      	bne.n	800292e <DMA_CheckFifoParam+0x5a>
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	2b03      	cmp	r3, #3
 80028f2:	d856      	bhi.n	80029a2 <DMA_CheckFifoParam+0xce>
 80028f4:	a201      	add	r2, pc, #4	; (adr r2, 80028fc <DMA_CheckFifoParam+0x28>)
 80028f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028fa:	bf00      	nop
 80028fc:	0800290d 	.word	0x0800290d
 8002900:	0800291f 	.word	0x0800291f
 8002904:	0800290d 	.word	0x0800290d
 8002908:	080029a3 	.word	0x080029a3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002910:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d046      	beq.n	80029a6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800291c:	e043      	b.n	80029a6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002922:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002926:	d140      	bne.n	80029aa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800292c:	e03d      	b.n	80029aa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002936:	d121      	bne.n	800297c <DMA_CheckFifoParam+0xa8>
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	2b03      	cmp	r3, #3
 800293c:	d837      	bhi.n	80029ae <DMA_CheckFifoParam+0xda>
 800293e:	a201      	add	r2, pc, #4	; (adr r2, 8002944 <DMA_CheckFifoParam+0x70>)
 8002940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002944:	08002955 	.word	0x08002955
 8002948:	0800295b 	.word	0x0800295b
 800294c:	08002955 	.word	0x08002955
 8002950:	0800296d 	.word	0x0800296d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	73fb      	strb	r3, [r7, #15]
      break;
 8002958:	e030      	b.n	80029bc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800295e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d025      	beq.n	80029b2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800296a:	e022      	b.n	80029b2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002970:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002974:	d11f      	bne.n	80029b6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800297a:	e01c      	b.n	80029b6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	2b02      	cmp	r3, #2
 8002980:	d903      	bls.n	800298a <DMA_CheckFifoParam+0xb6>
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	2b03      	cmp	r3, #3
 8002986:	d003      	beq.n	8002990 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002988:	e018      	b.n	80029bc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	73fb      	strb	r3, [r7, #15]
      break;
 800298e:	e015      	b.n	80029bc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002994:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d00e      	beq.n	80029ba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	73fb      	strb	r3, [r7, #15]
      break;
 80029a0:	e00b      	b.n	80029ba <DMA_CheckFifoParam+0xe6>
      break;
 80029a2:	bf00      	nop
 80029a4:	e00a      	b.n	80029bc <DMA_CheckFifoParam+0xe8>
      break;
 80029a6:	bf00      	nop
 80029a8:	e008      	b.n	80029bc <DMA_CheckFifoParam+0xe8>
      break;
 80029aa:	bf00      	nop
 80029ac:	e006      	b.n	80029bc <DMA_CheckFifoParam+0xe8>
      break;
 80029ae:	bf00      	nop
 80029b0:	e004      	b.n	80029bc <DMA_CheckFifoParam+0xe8>
      break;
 80029b2:	bf00      	nop
 80029b4:	e002      	b.n	80029bc <DMA_CheckFifoParam+0xe8>
      break;   
 80029b6:	bf00      	nop
 80029b8:	e000      	b.n	80029bc <DMA_CheckFifoParam+0xe8>
      break;
 80029ba:	bf00      	nop
    }
  } 
  
  return status; 
 80029bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3714      	adds	r7, #20
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop

080029cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b089      	sub	sp, #36	; 0x24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029d6:	2300      	movs	r3, #0
 80029d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029da:	2300      	movs	r3, #0
 80029dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029de:	2300      	movs	r3, #0
 80029e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029e2:	2300      	movs	r3, #0
 80029e4:	61fb      	str	r3, [r7, #28]
 80029e6:	e159      	b.n	8002c9c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029e8:	2201      	movs	r2, #1
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	697a      	ldr	r2, [r7, #20]
 80029f8:	4013      	ands	r3, r2
 80029fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	f040 8148 	bne.w	8002c96 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f003 0303 	and.w	r3, r3, #3
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d005      	beq.n	8002a1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d130      	bne.n	8002a80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	2203      	movs	r2, #3
 8002a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2e:	43db      	mvns	r3, r3
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	4013      	ands	r3, r2
 8002a34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	68da      	ldr	r2, [r3, #12]
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a54:	2201      	movs	r2, #1
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5c:	43db      	mvns	r3, r3
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	4013      	ands	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	091b      	lsrs	r3, r3, #4
 8002a6a:	f003 0201 	and.w	r2, r3, #1
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f003 0303 	and.w	r3, r3, #3
 8002a88:	2b03      	cmp	r3, #3
 8002a8a:	d017      	beq.n	8002abc <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	2203      	movs	r2, #3
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	43db      	mvns	r3, r3
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	689a      	ldr	r2, [r3, #8]
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f003 0303 	and.w	r3, r3, #3
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d123      	bne.n	8002b10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	08da      	lsrs	r2, r3, #3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	3208      	adds	r2, #8
 8002ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	f003 0307 	and.w	r3, r3, #7
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	220f      	movs	r2, #15
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	43db      	mvns	r3, r3
 8002ae6:	69ba      	ldr	r2, [r7, #24]
 8002ae8:	4013      	ands	r3, r2
 8002aea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	691a      	ldr	r2, [r3, #16]
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	f003 0307 	and.w	r3, r3, #7
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	08da      	lsrs	r2, r3, #3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	3208      	adds	r2, #8
 8002b0a:	69b9      	ldr	r1, [r7, #24]
 8002b0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	2203      	movs	r2, #3
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	43db      	mvns	r3, r3
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	4013      	ands	r3, r2
 8002b26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f003 0203 	and.w	r2, r3, #3
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	f000 80a2 	beq.w	8002c96 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b52:	2300      	movs	r3, #0
 8002b54:	60fb      	str	r3, [r7, #12]
 8002b56:	4b57      	ldr	r3, [pc, #348]	; (8002cb4 <HAL_GPIO_Init+0x2e8>)
 8002b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5a:	4a56      	ldr	r2, [pc, #344]	; (8002cb4 <HAL_GPIO_Init+0x2e8>)
 8002b5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b60:	6453      	str	r3, [r2, #68]	; 0x44
 8002b62:	4b54      	ldr	r3, [pc, #336]	; (8002cb4 <HAL_GPIO_Init+0x2e8>)
 8002b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b6a:	60fb      	str	r3, [r7, #12]
 8002b6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b6e:	4a52      	ldr	r2, [pc, #328]	; (8002cb8 <HAL_GPIO_Init+0x2ec>)
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	089b      	lsrs	r3, r3, #2
 8002b74:	3302      	adds	r3, #2
 8002b76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	f003 0303 	and.w	r3, r3, #3
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	220f      	movs	r2, #15
 8002b86:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8a:	43db      	mvns	r3, r3
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	4013      	ands	r3, r2
 8002b90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a49      	ldr	r2, [pc, #292]	; (8002cbc <HAL_GPIO_Init+0x2f0>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d019      	beq.n	8002bce <HAL_GPIO_Init+0x202>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a48      	ldr	r2, [pc, #288]	; (8002cc0 <HAL_GPIO_Init+0x2f4>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d013      	beq.n	8002bca <HAL_GPIO_Init+0x1fe>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a47      	ldr	r2, [pc, #284]	; (8002cc4 <HAL_GPIO_Init+0x2f8>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d00d      	beq.n	8002bc6 <HAL_GPIO_Init+0x1fa>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a46      	ldr	r2, [pc, #280]	; (8002cc8 <HAL_GPIO_Init+0x2fc>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d007      	beq.n	8002bc2 <HAL_GPIO_Init+0x1f6>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a45      	ldr	r2, [pc, #276]	; (8002ccc <HAL_GPIO_Init+0x300>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d101      	bne.n	8002bbe <HAL_GPIO_Init+0x1f2>
 8002bba:	2304      	movs	r3, #4
 8002bbc:	e008      	b.n	8002bd0 <HAL_GPIO_Init+0x204>
 8002bbe:	2307      	movs	r3, #7
 8002bc0:	e006      	b.n	8002bd0 <HAL_GPIO_Init+0x204>
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e004      	b.n	8002bd0 <HAL_GPIO_Init+0x204>
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	e002      	b.n	8002bd0 <HAL_GPIO_Init+0x204>
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e000      	b.n	8002bd0 <HAL_GPIO_Init+0x204>
 8002bce:	2300      	movs	r3, #0
 8002bd0:	69fa      	ldr	r2, [r7, #28]
 8002bd2:	f002 0203 	and.w	r2, r2, #3
 8002bd6:	0092      	lsls	r2, r2, #2
 8002bd8:	4093      	lsls	r3, r2
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002be0:	4935      	ldr	r1, [pc, #212]	; (8002cb8 <HAL_GPIO_Init+0x2ec>)
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	089b      	lsrs	r3, r3, #2
 8002be6:	3302      	adds	r3, #2
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bee:	4b38      	ldr	r3, [pc, #224]	; (8002cd0 <HAL_GPIO_Init+0x304>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	43db      	mvns	r3, r3
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d003      	beq.n	8002c12 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c12:	4a2f      	ldr	r2, [pc, #188]	; (8002cd0 <HAL_GPIO_Init+0x304>)
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c18:	4b2d      	ldr	r3, [pc, #180]	; (8002cd0 <HAL_GPIO_Init+0x304>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	43db      	mvns	r3, r3
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	4013      	ands	r3, r2
 8002c26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d003      	beq.n	8002c3c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c3c:	4a24      	ldr	r2, [pc, #144]	; (8002cd0 <HAL_GPIO_Init+0x304>)
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c42:	4b23      	ldr	r3, [pc, #140]	; (8002cd0 <HAL_GPIO_Init+0x304>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	43db      	mvns	r3, r3
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	4013      	ands	r3, r2
 8002c50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d003      	beq.n	8002c66 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c66:	4a1a      	ldr	r2, [pc, #104]	; (8002cd0 <HAL_GPIO_Init+0x304>)
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c6c:	4b18      	ldr	r3, [pc, #96]	; (8002cd0 <HAL_GPIO_Init+0x304>)
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	43db      	mvns	r3, r3
 8002c76:	69ba      	ldr	r2, [r7, #24]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d003      	beq.n	8002c90 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c90:	4a0f      	ldr	r2, [pc, #60]	; (8002cd0 <HAL_GPIO_Init+0x304>)
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	3301      	adds	r3, #1
 8002c9a:	61fb      	str	r3, [r7, #28]
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	2b0f      	cmp	r3, #15
 8002ca0:	f67f aea2 	bls.w	80029e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ca4:	bf00      	nop
 8002ca6:	bf00      	nop
 8002ca8:	3724      	adds	r7, #36	; 0x24
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	40023800 	.word	0x40023800
 8002cb8:	40013800 	.word	0x40013800
 8002cbc:	40020000 	.word	0x40020000
 8002cc0:	40020400 	.word	0x40020400
 8002cc4:	40020800 	.word	0x40020800
 8002cc8:	40020c00 	.word	0x40020c00
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	40013c00 	.word	0x40013c00

08002cd4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e264      	b.n	80031b0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d075      	beq.n	8002dde <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cf2:	4ba3      	ldr	r3, [pc, #652]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f003 030c 	and.w	r3, r3, #12
 8002cfa:	2b04      	cmp	r3, #4
 8002cfc:	d00c      	beq.n	8002d18 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cfe:	4ba0      	ldr	r3, [pc, #640]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d06:	2b08      	cmp	r3, #8
 8002d08:	d112      	bne.n	8002d30 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d0a:	4b9d      	ldr	r3, [pc, #628]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d16:	d10b      	bne.n	8002d30 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d18:	4b99      	ldr	r3, [pc, #612]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d05b      	beq.n	8002ddc <HAL_RCC_OscConfig+0x108>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d157      	bne.n	8002ddc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e23f      	b.n	80031b0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d38:	d106      	bne.n	8002d48 <HAL_RCC_OscConfig+0x74>
 8002d3a:	4b91      	ldr	r3, [pc, #580]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a90      	ldr	r2, [pc, #576]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002d40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d44:	6013      	str	r3, [r2, #0]
 8002d46:	e01d      	b.n	8002d84 <HAL_RCC_OscConfig+0xb0>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d50:	d10c      	bne.n	8002d6c <HAL_RCC_OscConfig+0x98>
 8002d52:	4b8b      	ldr	r3, [pc, #556]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a8a      	ldr	r2, [pc, #552]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002d58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d5c:	6013      	str	r3, [r2, #0]
 8002d5e:	4b88      	ldr	r3, [pc, #544]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a87      	ldr	r2, [pc, #540]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002d64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d68:	6013      	str	r3, [r2, #0]
 8002d6a:	e00b      	b.n	8002d84 <HAL_RCC_OscConfig+0xb0>
 8002d6c:	4b84      	ldr	r3, [pc, #528]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a83      	ldr	r2, [pc, #524]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002d72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d76:	6013      	str	r3, [r2, #0]
 8002d78:	4b81      	ldr	r3, [pc, #516]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a80      	ldr	r2, [pc, #512]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002d7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d013      	beq.n	8002db4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d8c:	f7fe fc16 	bl	80015bc <HAL_GetTick>
 8002d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d92:	e008      	b.n	8002da6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d94:	f7fe fc12 	bl	80015bc <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b64      	cmp	r3, #100	; 0x64
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e204      	b.n	80031b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002da6:	4b76      	ldr	r3, [pc, #472]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d0f0      	beq.n	8002d94 <HAL_RCC_OscConfig+0xc0>
 8002db2:	e014      	b.n	8002dde <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db4:	f7fe fc02 	bl	80015bc <HAL_GetTick>
 8002db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dba:	e008      	b.n	8002dce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dbc:	f7fe fbfe 	bl	80015bc <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b64      	cmp	r3, #100	; 0x64
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e1f0      	b.n	80031b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dce:	4b6c      	ldr	r3, [pc, #432]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1f0      	bne.n	8002dbc <HAL_RCC_OscConfig+0xe8>
 8002dda:	e000      	b.n	8002dde <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ddc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d063      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dea:	4b65      	ldr	r3, [pc, #404]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f003 030c 	and.w	r3, r3, #12
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00b      	beq.n	8002e0e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002df6:	4b62      	ldr	r3, [pc, #392]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dfe:	2b08      	cmp	r3, #8
 8002e00:	d11c      	bne.n	8002e3c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e02:	4b5f      	ldr	r3, [pc, #380]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d116      	bne.n	8002e3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e0e:	4b5c      	ldr	r3, [pc, #368]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d005      	beq.n	8002e26 <HAL_RCC_OscConfig+0x152>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d001      	beq.n	8002e26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e1c4      	b.n	80031b0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e26:	4b56      	ldr	r3, [pc, #344]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	4952      	ldr	r1, [pc, #328]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e3a:	e03a      	b.n	8002eb2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d020      	beq.n	8002e86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e44:	4b4f      	ldr	r3, [pc, #316]	; (8002f84 <HAL_RCC_OscConfig+0x2b0>)
 8002e46:	2201      	movs	r2, #1
 8002e48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e4a:	f7fe fbb7 	bl	80015bc <HAL_GetTick>
 8002e4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e50:	e008      	b.n	8002e64 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e52:	f7fe fbb3 	bl	80015bc <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d901      	bls.n	8002e64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e1a5      	b.n	80031b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e64:	4b46      	ldr	r3, [pc, #280]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d0f0      	beq.n	8002e52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e70:	4b43      	ldr	r3, [pc, #268]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	691b      	ldr	r3, [r3, #16]
 8002e7c:	00db      	lsls	r3, r3, #3
 8002e7e:	4940      	ldr	r1, [pc, #256]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	600b      	str	r3, [r1, #0]
 8002e84:	e015      	b.n	8002eb2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e86:	4b3f      	ldr	r3, [pc, #252]	; (8002f84 <HAL_RCC_OscConfig+0x2b0>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e8c:	f7fe fb96 	bl	80015bc <HAL_GetTick>
 8002e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e92:	e008      	b.n	8002ea6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e94:	f7fe fb92 	bl	80015bc <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e184      	b.n	80031b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ea6:	4b36      	ldr	r3, [pc, #216]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1f0      	bne.n	8002e94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0308 	and.w	r3, r3, #8
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d030      	beq.n	8002f20 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d016      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ec6:	4b30      	ldr	r3, [pc, #192]	; (8002f88 <HAL_RCC_OscConfig+0x2b4>)
 8002ec8:	2201      	movs	r2, #1
 8002eca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ecc:	f7fe fb76 	bl	80015bc <HAL_GetTick>
 8002ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ed2:	e008      	b.n	8002ee6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ed4:	f7fe fb72 	bl	80015bc <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e164      	b.n	80031b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ee6:	4b26      	ldr	r3, [pc, #152]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002ee8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d0f0      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x200>
 8002ef2:	e015      	b.n	8002f20 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ef4:	4b24      	ldr	r3, [pc, #144]	; (8002f88 <HAL_RCC_OscConfig+0x2b4>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002efa:	f7fe fb5f 	bl	80015bc <HAL_GetTick>
 8002efe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f00:	e008      	b.n	8002f14 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f02:	f7fe fb5b 	bl	80015bc <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d901      	bls.n	8002f14 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e14d      	b.n	80031b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f14:	4b1a      	ldr	r3, [pc, #104]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002f16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f18:	f003 0302 	and.w	r3, r3, #2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d1f0      	bne.n	8002f02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0304 	and.w	r3, r3, #4
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	f000 80a0 	beq.w	800306e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f32:	4b13      	ldr	r3, [pc, #76]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d10f      	bne.n	8002f5e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f3e:	2300      	movs	r3, #0
 8002f40:	60bb      	str	r3, [r7, #8]
 8002f42:	4b0f      	ldr	r3, [pc, #60]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f46:	4a0e      	ldr	r2, [pc, #56]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f4e:	4b0c      	ldr	r3, [pc, #48]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f56:	60bb      	str	r3, [r7, #8]
 8002f58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f5e:	4b0b      	ldr	r3, [pc, #44]	; (8002f8c <HAL_RCC_OscConfig+0x2b8>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d121      	bne.n	8002fae <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f6a:	4b08      	ldr	r3, [pc, #32]	; (8002f8c <HAL_RCC_OscConfig+0x2b8>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a07      	ldr	r2, [pc, #28]	; (8002f8c <HAL_RCC_OscConfig+0x2b8>)
 8002f70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f76:	f7fe fb21 	bl	80015bc <HAL_GetTick>
 8002f7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f7c:	e011      	b.n	8002fa2 <HAL_RCC_OscConfig+0x2ce>
 8002f7e:	bf00      	nop
 8002f80:	40023800 	.word	0x40023800
 8002f84:	42470000 	.word	0x42470000
 8002f88:	42470e80 	.word	0x42470e80
 8002f8c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f90:	f7fe fb14 	bl	80015bc <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e106      	b.n	80031b0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fa2:	4b85      	ldr	r3, [pc, #532]	; (80031b8 <HAL_RCC_OscConfig+0x4e4>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d0f0      	beq.n	8002f90 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d106      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x2f0>
 8002fb6:	4b81      	ldr	r3, [pc, #516]	; (80031bc <HAL_RCC_OscConfig+0x4e8>)
 8002fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fba:	4a80      	ldr	r2, [pc, #512]	; (80031bc <HAL_RCC_OscConfig+0x4e8>)
 8002fbc:	f043 0301 	orr.w	r3, r3, #1
 8002fc0:	6713      	str	r3, [r2, #112]	; 0x70
 8002fc2:	e01c      	b.n	8002ffe <HAL_RCC_OscConfig+0x32a>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	2b05      	cmp	r3, #5
 8002fca:	d10c      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x312>
 8002fcc:	4b7b      	ldr	r3, [pc, #492]	; (80031bc <HAL_RCC_OscConfig+0x4e8>)
 8002fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd0:	4a7a      	ldr	r2, [pc, #488]	; (80031bc <HAL_RCC_OscConfig+0x4e8>)
 8002fd2:	f043 0304 	orr.w	r3, r3, #4
 8002fd6:	6713      	str	r3, [r2, #112]	; 0x70
 8002fd8:	4b78      	ldr	r3, [pc, #480]	; (80031bc <HAL_RCC_OscConfig+0x4e8>)
 8002fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fdc:	4a77      	ldr	r2, [pc, #476]	; (80031bc <HAL_RCC_OscConfig+0x4e8>)
 8002fde:	f043 0301 	orr.w	r3, r3, #1
 8002fe2:	6713      	str	r3, [r2, #112]	; 0x70
 8002fe4:	e00b      	b.n	8002ffe <HAL_RCC_OscConfig+0x32a>
 8002fe6:	4b75      	ldr	r3, [pc, #468]	; (80031bc <HAL_RCC_OscConfig+0x4e8>)
 8002fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fea:	4a74      	ldr	r2, [pc, #464]	; (80031bc <HAL_RCC_OscConfig+0x4e8>)
 8002fec:	f023 0301 	bic.w	r3, r3, #1
 8002ff0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ff2:	4b72      	ldr	r3, [pc, #456]	; (80031bc <HAL_RCC_OscConfig+0x4e8>)
 8002ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff6:	4a71      	ldr	r2, [pc, #452]	; (80031bc <HAL_RCC_OscConfig+0x4e8>)
 8002ff8:	f023 0304 	bic.w	r3, r3, #4
 8002ffc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d015      	beq.n	8003032 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003006:	f7fe fad9 	bl	80015bc <HAL_GetTick>
 800300a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800300c:	e00a      	b.n	8003024 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800300e:	f7fe fad5 	bl	80015bc <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	f241 3288 	movw	r2, #5000	; 0x1388
 800301c:	4293      	cmp	r3, r2
 800301e:	d901      	bls.n	8003024 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e0c5      	b.n	80031b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003024:	4b65      	ldr	r3, [pc, #404]	; (80031bc <HAL_RCC_OscConfig+0x4e8>)
 8003026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003028:	f003 0302 	and.w	r3, r3, #2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d0ee      	beq.n	800300e <HAL_RCC_OscConfig+0x33a>
 8003030:	e014      	b.n	800305c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003032:	f7fe fac3 	bl	80015bc <HAL_GetTick>
 8003036:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003038:	e00a      	b.n	8003050 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800303a:	f7fe fabf 	bl	80015bc <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	f241 3288 	movw	r2, #5000	; 0x1388
 8003048:	4293      	cmp	r3, r2
 800304a:	d901      	bls.n	8003050 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e0af      	b.n	80031b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003050:	4b5a      	ldr	r3, [pc, #360]	; (80031bc <HAL_RCC_OscConfig+0x4e8>)
 8003052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1ee      	bne.n	800303a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800305c:	7dfb      	ldrb	r3, [r7, #23]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d105      	bne.n	800306e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003062:	4b56      	ldr	r3, [pc, #344]	; (80031bc <HAL_RCC_OscConfig+0x4e8>)
 8003064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003066:	4a55      	ldr	r2, [pc, #340]	; (80031bc <HAL_RCC_OscConfig+0x4e8>)
 8003068:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800306c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	2b00      	cmp	r3, #0
 8003074:	f000 809b 	beq.w	80031ae <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003078:	4b50      	ldr	r3, [pc, #320]	; (80031bc <HAL_RCC_OscConfig+0x4e8>)
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f003 030c 	and.w	r3, r3, #12
 8003080:	2b08      	cmp	r3, #8
 8003082:	d05c      	beq.n	800313e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	699b      	ldr	r3, [r3, #24]
 8003088:	2b02      	cmp	r3, #2
 800308a:	d141      	bne.n	8003110 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800308c:	4b4c      	ldr	r3, [pc, #304]	; (80031c0 <HAL_RCC_OscConfig+0x4ec>)
 800308e:	2200      	movs	r2, #0
 8003090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003092:	f7fe fa93 	bl	80015bc <HAL_GetTick>
 8003096:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003098:	e008      	b.n	80030ac <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800309a:	f7fe fa8f 	bl	80015bc <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d901      	bls.n	80030ac <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e081      	b.n	80031b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ac:	4b43      	ldr	r3, [pc, #268]	; (80031bc <HAL_RCC_OscConfig+0x4e8>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1f0      	bne.n	800309a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	69da      	ldr	r2, [r3, #28]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a1b      	ldr	r3, [r3, #32]
 80030c0:	431a      	orrs	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c6:	019b      	lsls	r3, r3, #6
 80030c8:	431a      	orrs	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ce:	085b      	lsrs	r3, r3, #1
 80030d0:	3b01      	subs	r3, #1
 80030d2:	041b      	lsls	r3, r3, #16
 80030d4:	431a      	orrs	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030da:	061b      	lsls	r3, r3, #24
 80030dc:	4937      	ldr	r1, [pc, #220]	; (80031bc <HAL_RCC_OscConfig+0x4e8>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030e2:	4b37      	ldr	r3, [pc, #220]	; (80031c0 <HAL_RCC_OscConfig+0x4ec>)
 80030e4:	2201      	movs	r2, #1
 80030e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e8:	f7fe fa68 	bl	80015bc <HAL_GetTick>
 80030ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030ee:	e008      	b.n	8003102 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030f0:	f7fe fa64 	bl	80015bc <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e056      	b.n	80031b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003102:	4b2e      	ldr	r3, [pc, #184]	; (80031bc <HAL_RCC_OscConfig+0x4e8>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d0f0      	beq.n	80030f0 <HAL_RCC_OscConfig+0x41c>
 800310e:	e04e      	b.n	80031ae <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003110:	4b2b      	ldr	r3, [pc, #172]	; (80031c0 <HAL_RCC_OscConfig+0x4ec>)
 8003112:	2200      	movs	r2, #0
 8003114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003116:	f7fe fa51 	bl	80015bc <HAL_GetTick>
 800311a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800311c:	e008      	b.n	8003130 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800311e:	f7fe fa4d 	bl	80015bc <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	2b02      	cmp	r3, #2
 800312a:	d901      	bls.n	8003130 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e03f      	b.n	80031b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003130:	4b22      	ldr	r3, [pc, #136]	; (80031bc <HAL_RCC_OscConfig+0x4e8>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d1f0      	bne.n	800311e <HAL_RCC_OscConfig+0x44a>
 800313c:	e037      	b.n	80031ae <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	699b      	ldr	r3, [r3, #24]
 8003142:	2b01      	cmp	r3, #1
 8003144:	d101      	bne.n	800314a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e032      	b.n	80031b0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800314a:	4b1c      	ldr	r3, [pc, #112]	; (80031bc <HAL_RCC_OscConfig+0x4e8>)
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	2b01      	cmp	r3, #1
 8003156:	d028      	beq.n	80031aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003162:	429a      	cmp	r2, r3
 8003164:	d121      	bne.n	80031aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003170:	429a      	cmp	r2, r3
 8003172:	d11a      	bne.n	80031aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800317a:	4013      	ands	r3, r2
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003180:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003182:	4293      	cmp	r3, r2
 8003184:	d111      	bne.n	80031aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003190:	085b      	lsrs	r3, r3, #1
 8003192:	3b01      	subs	r3, #1
 8003194:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003196:	429a      	cmp	r2, r3
 8003198:	d107      	bne.n	80031aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d001      	beq.n	80031ae <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e000      	b.n	80031b0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3718      	adds	r7, #24
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	40007000 	.word	0x40007000
 80031bc:	40023800 	.word	0x40023800
 80031c0:	42470060 	.word	0x42470060

080031c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d101      	bne.n	80031d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e0cc      	b.n	8003372 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031d8:	4b68      	ldr	r3, [pc, #416]	; (800337c <HAL_RCC_ClockConfig+0x1b8>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0307 	and.w	r3, r3, #7
 80031e0:	683a      	ldr	r2, [r7, #0]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d90c      	bls.n	8003200 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031e6:	4b65      	ldr	r3, [pc, #404]	; (800337c <HAL_RCC_ClockConfig+0x1b8>)
 80031e8:	683a      	ldr	r2, [r7, #0]
 80031ea:	b2d2      	uxtb	r2, r2
 80031ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ee:	4b63      	ldr	r3, [pc, #396]	; (800337c <HAL_RCC_ClockConfig+0x1b8>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0307 	and.w	r3, r3, #7
 80031f6:	683a      	ldr	r2, [r7, #0]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d001      	beq.n	8003200 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e0b8      	b.n	8003372 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d020      	beq.n	800324e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0304 	and.w	r3, r3, #4
 8003214:	2b00      	cmp	r3, #0
 8003216:	d005      	beq.n	8003224 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003218:	4b59      	ldr	r3, [pc, #356]	; (8003380 <HAL_RCC_ClockConfig+0x1bc>)
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	4a58      	ldr	r2, [pc, #352]	; (8003380 <HAL_RCC_ClockConfig+0x1bc>)
 800321e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003222:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0308 	and.w	r3, r3, #8
 800322c:	2b00      	cmp	r3, #0
 800322e:	d005      	beq.n	800323c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003230:	4b53      	ldr	r3, [pc, #332]	; (8003380 <HAL_RCC_ClockConfig+0x1bc>)
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	4a52      	ldr	r2, [pc, #328]	; (8003380 <HAL_RCC_ClockConfig+0x1bc>)
 8003236:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800323a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800323c:	4b50      	ldr	r3, [pc, #320]	; (8003380 <HAL_RCC_ClockConfig+0x1bc>)
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	494d      	ldr	r1, [pc, #308]	; (8003380 <HAL_RCC_ClockConfig+0x1bc>)
 800324a:	4313      	orrs	r3, r2
 800324c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	2b00      	cmp	r3, #0
 8003258:	d044      	beq.n	80032e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d107      	bne.n	8003272 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003262:	4b47      	ldr	r3, [pc, #284]	; (8003380 <HAL_RCC_ClockConfig+0x1bc>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d119      	bne.n	80032a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e07f      	b.n	8003372 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	2b02      	cmp	r3, #2
 8003278:	d003      	beq.n	8003282 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800327e:	2b03      	cmp	r3, #3
 8003280:	d107      	bne.n	8003292 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003282:	4b3f      	ldr	r3, [pc, #252]	; (8003380 <HAL_RCC_ClockConfig+0x1bc>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d109      	bne.n	80032a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e06f      	b.n	8003372 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003292:	4b3b      	ldr	r3, [pc, #236]	; (8003380 <HAL_RCC_ClockConfig+0x1bc>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e067      	b.n	8003372 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032a2:	4b37      	ldr	r3, [pc, #220]	; (8003380 <HAL_RCC_ClockConfig+0x1bc>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f023 0203 	bic.w	r2, r3, #3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	4934      	ldr	r1, [pc, #208]	; (8003380 <HAL_RCC_ClockConfig+0x1bc>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032b4:	f7fe f982 	bl	80015bc <HAL_GetTick>
 80032b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ba:	e00a      	b.n	80032d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032bc:	f7fe f97e 	bl	80015bc <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e04f      	b.n	8003372 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032d2:	4b2b      	ldr	r3, [pc, #172]	; (8003380 <HAL_RCC_ClockConfig+0x1bc>)
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f003 020c 	and.w	r2, r3, #12
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d1eb      	bne.n	80032bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032e4:	4b25      	ldr	r3, [pc, #148]	; (800337c <HAL_RCC_ClockConfig+0x1b8>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0307 	and.w	r3, r3, #7
 80032ec:	683a      	ldr	r2, [r7, #0]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d20c      	bcs.n	800330c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032f2:	4b22      	ldr	r3, [pc, #136]	; (800337c <HAL_RCC_ClockConfig+0x1b8>)
 80032f4:	683a      	ldr	r2, [r7, #0]
 80032f6:	b2d2      	uxtb	r2, r2
 80032f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032fa:	4b20      	ldr	r3, [pc, #128]	; (800337c <HAL_RCC_ClockConfig+0x1b8>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0307 	and.w	r3, r3, #7
 8003302:	683a      	ldr	r2, [r7, #0]
 8003304:	429a      	cmp	r2, r3
 8003306:	d001      	beq.n	800330c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e032      	b.n	8003372 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0304 	and.w	r3, r3, #4
 8003314:	2b00      	cmp	r3, #0
 8003316:	d008      	beq.n	800332a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003318:	4b19      	ldr	r3, [pc, #100]	; (8003380 <HAL_RCC_ClockConfig+0x1bc>)
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	4916      	ldr	r1, [pc, #88]	; (8003380 <HAL_RCC_ClockConfig+0x1bc>)
 8003326:	4313      	orrs	r3, r2
 8003328:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0308 	and.w	r3, r3, #8
 8003332:	2b00      	cmp	r3, #0
 8003334:	d009      	beq.n	800334a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003336:	4b12      	ldr	r3, [pc, #72]	; (8003380 <HAL_RCC_ClockConfig+0x1bc>)
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	00db      	lsls	r3, r3, #3
 8003344:	490e      	ldr	r1, [pc, #56]	; (8003380 <HAL_RCC_ClockConfig+0x1bc>)
 8003346:	4313      	orrs	r3, r2
 8003348:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800334a:	f000 f821 	bl	8003390 <HAL_RCC_GetSysClockFreq>
 800334e:	4602      	mov	r2, r0
 8003350:	4b0b      	ldr	r3, [pc, #44]	; (8003380 <HAL_RCC_ClockConfig+0x1bc>)
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	091b      	lsrs	r3, r3, #4
 8003356:	f003 030f 	and.w	r3, r3, #15
 800335a:	490a      	ldr	r1, [pc, #40]	; (8003384 <HAL_RCC_ClockConfig+0x1c0>)
 800335c:	5ccb      	ldrb	r3, [r1, r3]
 800335e:	fa22 f303 	lsr.w	r3, r2, r3
 8003362:	4a09      	ldr	r2, [pc, #36]	; (8003388 <HAL_RCC_ClockConfig+0x1c4>)
 8003364:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003366:	4b09      	ldr	r3, [pc, #36]	; (800338c <HAL_RCC_ClockConfig+0x1c8>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4618      	mov	r0, r3
 800336c:	f7fe f8e2 	bl	8001534 <HAL_InitTick>

  return HAL_OK;
 8003370:	2300      	movs	r3, #0
}
 8003372:	4618      	mov	r0, r3
 8003374:	3710      	adds	r7, #16
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	40023c00 	.word	0x40023c00
 8003380:	40023800 	.word	0x40023800
 8003384:	080044b0 	.word	0x080044b0
 8003388:	20000000 	.word	0x20000000
 800338c:	20000004 	.word	0x20000004

08003390 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003390:	b5b0      	push	{r4, r5, r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003396:	2100      	movs	r1, #0
 8003398:	6079      	str	r1, [r7, #4]
 800339a:	2100      	movs	r1, #0
 800339c:	60f9      	str	r1, [r7, #12]
 800339e:	2100      	movs	r1, #0
 80033a0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80033a2:	2100      	movs	r1, #0
 80033a4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033a6:	4952      	ldr	r1, [pc, #328]	; (80034f0 <HAL_RCC_GetSysClockFreq+0x160>)
 80033a8:	6889      	ldr	r1, [r1, #8]
 80033aa:	f001 010c 	and.w	r1, r1, #12
 80033ae:	2908      	cmp	r1, #8
 80033b0:	d00d      	beq.n	80033ce <HAL_RCC_GetSysClockFreq+0x3e>
 80033b2:	2908      	cmp	r1, #8
 80033b4:	f200 8094 	bhi.w	80034e0 <HAL_RCC_GetSysClockFreq+0x150>
 80033b8:	2900      	cmp	r1, #0
 80033ba:	d002      	beq.n	80033c2 <HAL_RCC_GetSysClockFreq+0x32>
 80033bc:	2904      	cmp	r1, #4
 80033be:	d003      	beq.n	80033c8 <HAL_RCC_GetSysClockFreq+0x38>
 80033c0:	e08e      	b.n	80034e0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033c2:	4b4c      	ldr	r3, [pc, #304]	; (80034f4 <HAL_RCC_GetSysClockFreq+0x164>)
 80033c4:	60bb      	str	r3, [r7, #8]
       break;
 80033c6:	e08e      	b.n	80034e6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033c8:	4b4b      	ldr	r3, [pc, #300]	; (80034f8 <HAL_RCC_GetSysClockFreq+0x168>)
 80033ca:	60bb      	str	r3, [r7, #8]
      break;
 80033cc:	e08b      	b.n	80034e6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033ce:	4948      	ldr	r1, [pc, #288]	; (80034f0 <HAL_RCC_GetSysClockFreq+0x160>)
 80033d0:	6849      	ldr	r1, [r1, #4]
 80033d2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80033d6:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033d8:	4945      	ldr	r1, [pc, #276]	; (80034f0 <HAL_RCC_GetSysClockFreq+0x160>)
 80033da:	6849      	ldr	r1, [r1, #4]
 80033dc:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80033e0:	2900      	cmp	r1, #0
 80033e2:	d024      	beq.n	800342e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033e4:	4942      	ldr	r1, [pc, #264]	; (80034f0 <HAL_RCC_GetSysClockFreq+0x160>)
 80033e6:	6849      	ldr	r1, [r1, #4]
 80033e8:	0989      	lsrs	r1, r1, #6
 80033ea:	4608      	mov	r0, r1
 80033ec:	f04f 0100 	mov.w	r1, #0
 80033f0:	f240 14ff 	movw	r4, #511	; 0x1ff
 80033f4:	f04f 0500 	mov.w	r5, #0
 80033f8:	ea00 0204 	and.w	r2, r0, r4
 80033fc:	ea01 0305 	and.w	r3, r1, r5
 8003400:	493d      	ldr	r1, [pc, #244]	; (80034f8 <HAL_RCC_GetSysClockFreq+0x168>)
 8003402:	fb01 f003 	mul.w	r0, r1, r3
 8003406:	2100      	movs	r1, #0
 8003408:	fb01 f102 	mul.w	r1, r1, r2
 800340c:	1844      	adds	r4, r0, r1
 800340e:	493a      	ldr	r1, [pc, #232]	; (80034f8 <HAL_RCC_GetSysClockFreq+0x168>)
 8003410:	fba2 0101 	umull	r0, r1, r2, r1
 8003414:	1863      	adds	r3, r4, r1
 8003416:	4619      	mov	r1, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	461a      	mov	r2, r3
 800341c:	f04f 0300 	mov.w	r3, #0
 8003420:	f7fd f97a 	bl	8000718 <__aeabi_uldivmod>
 8003424:	4602      	mov	r2, r0
 8003426:	460b      	mov	r3, r1
 8003428:	4613      	mov	r3, r2
 800342a:	60fb      	str	r3, [r7, #12]
 800342c:	e04a      	b.n	80034c4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800342e:	4b30      	ldr	r3, [pc, #192]	; (80034f0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	099b      	lsrs	r3, r3, #6
 8003434:	461a      	mov	r2, r3
 8003436:	f04f 0300 	mov.w	r3, #0
 800343a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800343e:	f04f 0100 	mov.w	r1, #0
 8003442:	ea02 0400 	and.w	r4, r2, r0
 8003446:	ea03 0501 	and.w	r5, r3, r1
 800344a:	4620      	mov	r0, r4
 800344c:	4629      	mov	r1, r5
 800344e:	f04f 0200 	mov.w	r2, #0
 8003452:	f04f 0300 	mov.w	r3, #0
 8003456:	014b      	lsls	r3, r1, #5
 8003458:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800345c:	0142      	lsls	r2, r0, #5
 800345e:	4610      	mov	r0, r2
 8003460:	4619      	mov	r1, r3
 8003462:	1b00      	subs	r0, r0, r4
 8003464:	eb61 0105 	sbc.w	r1, r1, r5
 8003468:	f04f 0200 	mov.w	r2, #0
 800346c:	f04f 0300 	mov.w	r3, #0
 8003470:	018b      	lsls	r3, r1, #6
 8003472:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003476:	0182      	lsls	r2, r0, #6
 8003478:	1a12      	subs	r2, r2, r0
 800347a:	eb63 0301 	sbc.w	r3, r3, r1
 800347e:	f04f 0000 	mov.w	r0, #0
 8003482:	f04f 0100 	mov.w	r1, #0
 8003486:	00d9      	lsls	r1, r3, #3
 8003488:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800348c:	00d0      	lsls	r0, r2, #3
 800348e:	4602      	mov	r2, r0
 8003490:	460b      	mov	r3, r1
 8003492:	1912      	adds	r2, r2, r4
 8003494:	eb45 0303 	adc.w	r3, r5, r3
 8003498:	f04f 0000 	mov.w	r0, #0
 800349c:	f04f 0100 	mov.w	r1, #0
 80034a0:	0299      	lsls	r1, r3, #10
 80034a2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80034a6:	0290      	lsls	r0, r2, #10
 80034a8:	4602      	mov	r2, r0
 80034aa:	460b      	mov	r3, r1
 80034ac:	4610      	mov	r0, r2
 80034ae:	4619      	mov	r1, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	461a      	mov	r2, r3
 80034b4:	f04f 0300 	mov.w	r3, #0
 80034b8:	f7fd f92e 	bl	8000718 <__aeabi_uldivmod>
 80034bc:	4602      	mov	r2, r0
 80034be:	460b      	mov	r3, r1
 80034c0:	4613      	mov	r3, r2
 80034c2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034c4:	4b0a      	ldr	r3, [pc, #40]	; (80034f0 <HAL_RCC_GetSysClockFreq+0x160>)
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	0c1b      	lsrs	r3, r3, #16
 80034ca:	f003 0303 	and.w	r3, r3, #3
 80034ce:	3301      	adds	r3, #1
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80034d4:	68fa      	ldr	r2, [r7, #12]
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034dc:	60bb      	str	r3, [r7, #8]
      break;
 80034de:	e002      	b.n	80034e6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034e0:	4b04      	ldr	r3, [pc, #16]	; (80034f4 <HAL_RCC_GetSysClockFreq+0x164>)
 80034e2:	60bb      	str	r3, [r7, #8]
      break;
 80034e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034e6:	68bb      	ldr	r3, [r7, #8]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3710      	adds	r7, #16
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bdb0      	pop	{r4, r5, r7, pc}
 80034f0:	40023800 	.word	0x40023800
 80034f4:	00f42400 	.word	0x00f42400
 80034f8:	017d7840 	.word	0x017d7840

080034fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034fc:	b480      	push	{r7}
 80034fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003500:	4b03      	ldr	r3, [pc, #12]	; (8003510 <HAL_RCC_GetHCLKFreq+0x14>)
 8003502:	681b      	ldr	r3, [r3, #0]
}
 8003504:	4618      	mov	r0, r3
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	20000000 	.word	0x20000000

08003514 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003518:	f7ff fff0 	bl	80034fc <HAL_RCC_GetHCLKFreq>
 800351c:	4602      	mov	r2, r0
 800351e:	4b05      	ldr	r3, [pc, #20]	; (8003534 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	0a9b      	lsrs	r3, r3, #10
 8003524:	f003 0307 	and.w	r3, r3, #7
 8003528:	4903      	ldr	r1, [pc, #12]	; (8003538 <HAL_RCC_GetPCLK1Freq+0x24>)
 800352a:	5ccb      	ldrb	r3, [r1, r3]
 800352c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003530:	4618      	mov	r0, r3
 8003532:	bd80      	pop	{r7, pc}
 8003534:	40023800 	.word	0x40023800
 8003538:	080044c0 	.word	0x080044c0

0800353c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003540:	f7ff ffdc 	bl	80034fc <HAL_RCC_GetHCLKFreq>
 8003544:	4602      	mov	r2, r0
 8003546:	4b05      	ldr	r3, [pc, #20]	; (800355c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	0b5b      	lsrs	r3, r3, #13
 800354c:	f003 0307 	and.w	r3, r3, #7
 8003550:	4903      	ldr	r1, [pc, #12]	; (8003560 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003552:	5ccb      	ldrb	r3, [r1, r3]
 8003554:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003558:	4618      	mov	r0, r3
 800355a:	bd80      	pop	{r7, pc}
 800355c:	40023800 	.word	0x40023800
 8003560:	080044c0 	.word	0x080044c0

08003564 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d101      	bne.n	8003576 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e03f      	b.n	80035f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2b00      	cmp	r3, #0
 8003580:	d106      	bne.n	8003590 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f7fd fe84 	bl	8001298 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2224      	movs	r2, #36	; 0x24
 8003594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68da      	ldr	r2, [r3, #12]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f000 f905 	bl	80037b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	691a      	ldr	r2, [r3, #16]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	695a      	ldr	r2, [r3, #20]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68da      	ldr	r2, [r3, #12]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2220      	movs	r2, #32
 80035e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2220      	movs	r2, #32
 80035f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3708      	adds	r7, #8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035fe:	b580      	push	{r7, lr}
 8003600:	b08a      	sub	sp, #40	; 0x28
 8003602:	af02      	add	r7, sp, #8
 8003604:	60f8      	str	r0, [r7, #12]
 8003606:	60b9      	str	r1, [r7, #8]
 8003608:	603b      	str	r3, [r7, #0]
 800360a:	4613      	mov	r3, r2
 800360c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800360e:	2300      	movs	r3, #0
 8003610:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b20      	cmp	r3, #32
 800361c:	d17c      	bne.n	8003718 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d002      	beq.n	800362a <HAL_UART_Transmit+0x2c>
 8003624:	88fb      	ldrh	r3, [r7, #6]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e075      	b.n	800371a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003634:	2b01      	cmp	r3, #1
 8003636:	d101      	bne.n	800363c <HAL_UART_Transmit+0x3e>
 8003638:	2302      	movs	r3, #2
 800363a:	e06e      	b.n	800371a <HAL_UART_Transmit+0x11c>
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2221      	movs	r2, #33	; 0x21
 800364e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003652:	f7fd ffb3 	bl	80015bc <HAL_GetTick>
 8003656:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	88fa      	ldrh	r2, [r7, #6]
 800365c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	88fa      	ldrh	r2, [r7, #6]
 8003662:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800366c:	d108      	bne.n	8003680 <HAL_UART_Transmit+0x82>
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d104      	bne.n	8003680 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003676:	2300      	movs	r3, #0
 8003678:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	61bb      	str	r3, [r7, #24]
 800367e:	e003      	b.n	8003688 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003684:	2300      	movs	r3, #0
 8003686:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003690:	e02a      	b.n	80036e8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	9300      	str	r3, [sp, #0]
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	2200      	movs	r2, #0
 800369a:	2180      	movs	r1, #128	; 0x80
 800369c:	68f8      	ldr	r0, [r7, #12]
 800369e:	f000 f840 	bl	8003722 <UART_WaitOnFlagUntilTimeout>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d001      	beq.n	80036ac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e036      	b.n	800371a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d10b      	bne.n	80036ca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	881b      	ldrh	r3, [r3, #0]
 80036b6:	461a      	mov	r2, r3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	3302      	adds	r3, #2
 80036c6:	61bb      	str	r3, [r7, #24]
 80036c8:	e007      	b.n	80036da <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	781a      	ldrb	r2, [r3, #0]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	3301      	adds	r3, #1
 80036d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036de:	b29b      	uxth	r3, r3
 80036e0:	3b01      	subs	r3, #1
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1cf      	bne.n	8003692 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	9300      	str	r3, [sp, #0]
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	2200      	movs	r2, #0
 80036fa:	2140      	movs	r1, #64	; 0x40
 80036fc:	68f8      	ldr	r0, [r7, #12]
 80036fe:	f000 f810 	bl	8003722 <UART_WaitOnFlagUntilTimeout>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d001      	beq.n	800370c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e006      	b.n	800371a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2220      	movs	r2, #32
 8003710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003714:	2300      	movs	r3, #0
 8003716:	e000      	b.n	800371a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003718:	2302      	movs	r3, #2
  }
}
 800371a:	4618      	mov	r0, r3
 800371c:	3720      	adds	r7, #32
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}

08003722 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003722:	b580      	push	{r7, lr}
 8003724:	b084      	sub	sp, #16
 8003726:	af00      	add	r7, sp, #0
 8003728:	60f8      	str	r0, [r7, #12]
 800372a:	60b9      	str	r1, [r7, #8]
 800372c:	603b      	str	r3, [r7, #0]
 800372e:	4613      	mov	r3, r2
 8003730:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003732:	e02c      	b.n	800378e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800373a:	d028      	beq.n	800378e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d007      	beq.n	8003752 <UART_WaitOnFlagUntilTimeout+0x30>
 8003742:	f7fd ff3b 	bl	80015bc <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	69ba      	ldr	r2, [r7, #24]
 800374e:	429a      	cmp	r2, r3
 8003750:	d21d      	bcs.n	800378e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68da      	ldr	r2, [r3, #12]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003760:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	695a      	ldr	r2, [r3, #20]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f022 0201 	bic.w	r2, r2, #1
 8003770:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2220      	movs	r2, #32
 8003776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2220      	movs	r2, #32
 800377e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e00f      	b.n	80037ae <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	4013      	ands	r3, r2
 8003798:	68ba      	ldr	r2, [r7, #8]
 800379a:	429a      	cmp	r2, r3
 800379c:	bf0c      	ite	eq
 800379e:	2301      	moveq	r3, #1
 80037a0:	2300      	movne	r3, #0
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	461a      	mov	r2, r3
 80037a6:	79fb      	ldrb	r3, [r7, #7]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d0c3      	beq.n	8003734 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3710      	adds	r7, #16
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
	...

080037b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037bc:	b09f      	sub	sp, #124	; 0x7c
 80037be:	af00      	add	r7, sp, #0
 80037c0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	691b      	ldr	r3, [r3, #16]
 80037c8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80037cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037ce:	68d9      	ldr	r1, [r3, #12]
 80037d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	ea40 0301 	orr.w	r3, r0, r1
 80037d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80037da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037dc:	689a      	ldr	r2, [r3, #8]
 80037de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	431a      	orrs	r2, r3
 80037e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037e6:	695b      	ldr	r3, [r3, #20]
 80037e8:	431a      	orrs	r2, r3
 80037ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037ec:	69db      	ldr	r3, [r3, #28]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80037f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80037fc:	f021 010c 	bic.w	r1, r1, #12
 8003800:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003806:	430b      	orrs	r3, r1
 8003808:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800380a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	695b      	ldr	r3, [r3, #20]
 8003810:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003814:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003816:	6999      	ldr	r1, [r3, #24]
 8003818:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	ea40 0301 	orr.w	r3, r0, r1
 8003820:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003822:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	4bc5      	ldr	r3, [pc, #788]	; (8003b3c <UART_SetConfig+0x384>)
 8003828:	429a      	cmp	r2, r3
 800382a:	d004      	beq.n	8003836 <UART_SetConfig+0x7e>
 800382c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	4bc3      	ldr	r3, [pc, #780]	; (8003b40 <UART_SetConfig+0x388>)
 8003832:	429a      	cmp	r2, r3
 8003834:	d103      	bne.n	800383e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003836:	f7ff fe81 	bl	800353c <HAL_RCC_GetPCLK2Freq>
 800383a:	6778      	str	r0, [r7, #116]	; 0x74
 800383c:	e002      	b.n	8003844 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800383e:	f7ff fe69 	bl	8003514 <HAL_RCC_GetPCLK1Freq>
 8003842:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003844:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003846:	69db      	ldr	r3, [r3, #28]
 8003848:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800384c:	f040 80b6 	bne.w	80039bc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003850:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003852:	461c      	mov	r4, r3
 8003854:	f04f 0500 	mov.w	r5, #0
 8003858:	4622      	mov	r2, r4
 800385a:	462b      	mov	r3, r5
 800385c:	1891      	adds	r1, r2, r2
 800385e:	6439      	str	r1, [r7, #64]	; 0x40
 8003860:	415b      	adcs	r3, r3
 8003862:	647b      	str	r3, [r7, #68]	; 0x44
 8003864:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003868:	1912      	adds	r2, r2, r4
 800386a:	eb45 0303 	adc.w	r3, r5, r3
 800386e:	f04f 0000 	mov.w	r0, #0
 8003872:	f04f 0100 	mov.w	r1, #0
 8003876:	00d9      	lsls	r1, r3, #3
 8003878:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800387c:	00d0      	lsls	r0, r2, #3
 800387e:	4602      	mov	r2, r0
 8003880:	460b      	mov	r3, r1
 8003882:	1911      	adds	r1, r2, r4
 8003884:	6639      	str	r1, [r7, #96]	; 0x60
 8003886:	416b      	adcs	r3, r5
 8003888:	667b      	str	r3, [r7, #100]	; 0x64
 800388a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	461a      	mov	r2, r3
 8003890:	f04f 0300 	mov.w	r3, #0
 8003894:	1891      	adds	r1, r2, r2
 8003896:	63b9      	str	r1, [r7, #56]	; 0x38
 8003898:	415b      	adcs	r3, r3
 800389a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800389c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80038a0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80038a4:	f7fc ff38 	bl	8000718 <__aeabi_uldivmod>
 80038a8:	4602      	mov	r2, r0
 80038aa:	460b      	mov	r3, r1
 80038ac:	4ba5      	ldr	r3, [pc, #660]	; (8003b44 <UART_SetConfig+0x38c>)
 80038ae:	fba3 2302 	umull	r2, r3, r3, r2
 80038b2:	095b      	lsrs	r3, r3, #5
 80038b4:	011e      	lsls	r6, r3, #4
 80038b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038b8:	461c      	mov	r4, r3
 80038ba:	f04f 0500 	mov.w	r5, #0
 80038be:	4622      	mov	r2, r4
 80038c0:	462b      	mov	r3, r5
 80038c2:	1891      	adds	r1, r2, r2
 80038c4:	6339      	str	r1, [r7, #48]	; 0x30
 80038c6:	415b      	adcs	r3, r3
 80038c8:	637b      	str	r3, [r7, #52]	; 0x34
 80038ca:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80038ce:	1912      	adds	r2, r2, r4
 80038d0:	eb45 0303 	adc.w	r3, r5, r3
 80038d4:	f04f 0000 	mov.w	r0, #0
 80038d8:	f04f 0100 	mov.w	r1, #0
 80038dc:	00d9      	lsls	r1, r3, #3
 80038de:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80038e2:	00d0      	lsls	r0, r2, #3
 80038e4:	4602      	mov	r2, r0
 80038e6:	460b      	mov	r3, r1
 80038e8:	1911      	adds	r1, r2, r4
 80038ea:	65b9      	str	r1, [r7, #88]	; 0x58
 80038ec:	416b      	adcs	r3, r5
 80038ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80038f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	461a      	mov	r2, r3
 80038f6:	f04f 0300 	mov.w	r3, #0
 80038fa:	1891      	adds	r1, r2, r2
 80038fc:	62b9      	str	r1, [r7, #40]	; 0x28
 80038fe:	415b      	adcs	r3, r3
 8003900:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003902:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003906:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800390a:	f7fc ff05 	bl	8000718 <__aeabi_uldivmod>
 800390e:	4602      	mov	r2, r0
 8003910:	460b      	mov	r3, r1
 8003912:	4b8c      	ldr	r3, [pc, #560]	; (8003b44 <UART_SetConfig+0x38c>)
 8003914:	fba3 1302 	umull	r1, r3, r3, r2
 8003918:	095b      	lsrs	r3, r3, #5
 800391a:	2164      	movs	r1, #100	; 0x64
 800391c:	fb01 f303 	mul.w	r3, r1, r3
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	00db      	lsls	r3, r3, #3
 8003924:	3332      	adds	r3, #50	; 0x32
 8003926:	4a87      	ldr	r2, [pc, #540]	; (8003b44 <UART_SetConfig+0x38c>)
 8003928:	fba2 2303 	umull	r2, r3, r2, r3
 800392c:	095b      	lsrs	r3, r3, #5
 800392e:	005b      	lsls	r3, r3, #1
 8003930:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003934:	441e      	add	r6, r3
 8003936:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003938:	4618      	mov	r0, r3
 800393a:	f04f 0100 	mov.w	r1, #0
 800393e:	4602      	mov	r2, r0
 8003940:	460b      	mov	r3, r1
 8003942:	1894      	adds	r4, r2, r2
 8003944:	623c      	str	r4, [r7, #32]
 8003946:	415b      	adcs	r3, r3
 8003948:	627b      	str	r3, [r7, #36]	; 0x24
 800394a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800394e:	1812      	adds	r2, r2, r0
 8003950:	eb41 0303 	adc.w	r3, r1, r3
 8003954:	f04f 0400 	mov.w	r4, #0
 8003958:	f04f 0500 	mov.w	r5, #0
 800395c:	00dd      	lsls	r5, r3, #3
 800395e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003962:	00d4      	lsls	r4, r2, #3
 8003964:	4622      	mov	r2, r4
 8003966:	462b      	mov	r3, r5
 8003968:	1814      	adds	r4, r2, r0
 800396a:	653c      	str	r4, [r7, #80]	; 0x50
 800396c:	414b      	adcs	r3, r1
 800396e:	657b      	str	r3, [r7, #84]	; 0x54
 8003970:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	461a      	mov	r2, r3
 8003976:	f04f 0300 	mov.w	r3, #0
 800397a:	1891      	adds	r1, r2, r2
 800397c:	61b9      	str	r1, [r7, #24]
 800397e:	415b      	adcs	r3, r3
 8003980:	61fb      	str	r3, [r7, #28]
 8003982:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003986:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800398a:	f7fc fec5 	bl	8000718 <__aeabi_uldivmod>
 800398e:	4602      	mov	r2, r0
 8003990:	460b      	mov	r3, r1
 8003992:	4b6c      	ldr	r3, [pc, #432]	; (8003b44 <UART_SetConfig+0x38c>)
 8003994:	fba3 1302 	umull	r1, r3, r3, r2
 8003998:	095b      	lsrs	r3, r3, #5
 800399a:	2164      	movs	r1, #100	; 0x64
 800399c:	fb01 f303 	mul.w	r3, r1, r3
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	00db      	lsls	r3, r3, #3
 80039a4:	3332      	adds	r3, #50	; 0x32
 80039a6:	4a67      	ldr	r2, [pc, #412]	; (8003b44 <UART_SetConfig+0x38c>)
 80039a8:	fba2 2303 	umull	r2, r3, r2, r3
 80039ac:	095b      	lsrs	r3, r3, #5
 80039ae:	f003 0207 	and.w	r2, r3, #7
 80039b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4432      	add	r2, r6
 80039b8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80039ba:	e0b9      	b.n	8003b30 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039be:	461c      	mov	r4, r3
 80039c0:	f04f 0500 	mov.w	r5, #0
 80039c4:	4622      	mov	r2, r4
 80039c6:	462b      	mov	r3, r5
 80039c8:	1891      	adds	r1, r2, r2
 80039ca:	6139      	str	r1, [r7, #16]
 80039cc:	415b      	adcs	r3, r3
 80039ce:	617b      	str	r3, [r7, #20]
 80039d0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80039d4:	1912      	adds	r2, r2, r4
 80039d6:	eb45 0303 	adc.w	r3, r5, r3
 80039da:	f04f 0000 	mov.w	r0, #0
 80039de:	f04f 0100 	mov.w	r1, #0
 80039e2:	00d9      	lsls	r1, r3, #3
 80039e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80039e8:	00d0      	lsls	r0, r2, #3
 80039ea:	4602      	mov	r2, r0
 80039ec:	460b      	mov	r3, r1
 80039ee:	eb12 0804 	adds.w	r8, r2, r4
 80039f2:	eb43 0905 	adc.w	r9, r3, r5
 80039f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f04f 0100 	mov.w	r1, #0
 8003a00:	f04f 0200 	mov.w	r2, #0
 8003a04:	f04f 0300 	mov.w	r3, #0
 8003a08:	008b      	lsls	r3, r1, #2
 8003a0a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003a0e:	0082      	lsls	r2, r0, #2
 8003a10:	4640      	mov	r0, r8
 8003a12:	4649      	mov	r1, r9
 8003a14:	f7fc fe80 	bl	8000718 <__aeabi_uldivmod>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	4b49      	ldr	r3, [pc, #292]	; (8003b44 <UART_SetConfig+0x38c>)
 8003a1e:	fba3 2302 	umull	r2, r3, r3, r2
 8003a22:	095b      	lsrs	r3, r3, #5
 8003a24:	011e      	lsls	r6, r3, #4
 8003a26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f04f 0100 	mov.w	r1, #0
 8003a2e:	4602      	mov	r2, r0
 8003a30:	460b      	mov	r3, r1
 8003a32:	1894      	adds	r4, r2, r2
 8003a34:	60bc      	str	r4, [r7, #8]
 8003a36:	415b      	adcs	r3, r3
 8003a38:	60fb      	str	r3, [r7, #12]
 8003a3a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a3e:	1812      	adds	r2, r2, r0
 8003a40:	eb41 0303 	adc.w	r3, r1, r3
 8003a44:	f04f 0400 	mov.w	r4, #0
 8003a48:	f04f 0500 	mov.w	r5, #0
 8003a4c:	00dd      	lsls	r5, r3, #3
 8003a4e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003a52:	00d4      	lsls	r4, r2, #3
 8003a54:	4622      	mov	r2, r4
 8003a56:	462b      	mov	r3, r5
 8003a58:	1814      	adds	r4, r2, r0
 8003a5a:	64bc      	str	r4, [r7, #72]	; 0x48
 8003a5c:	414b      	adcs	r3, r1
 8003a5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	4618      	mov	r0, r3
 8003a66:	f04f 0100 	mov.w	r1, #0
 8003a6a:	f04f 0200 	mov.w	r2, #0
 8003a6e:	f04f 0300 	mov.w	r3, #0
 8003a72:	008b      	lsls	r3, r1, #2
 8003a74:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003a78:	0082      	lsls	r2, r0, #2
 8003a7a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003a7e:	f7fc fe4b 	bl	8000718 <__aeabi_uldivmod>
 8003a82:	4602      	mov	r2, r0
 8003a84:	460b      	mov	r3, r1
 8003a86:	4b2f      	ldr	r3, [pc, #188]	; (8003b44 <UART_SetConfig+0x38c>)
 8003a88:	fba3 1302 	umull	r1, r3, r3, r2
 8003a8c:	095b      	lsrs	r3, r3, #5
 8003a8e:	2164      	movs	r1, #100	; 0x64
 8003a90:	fb01 f303 	mul.w	r3, r1, r3
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	011b      	lsls	r3, r3, #4
 8003a98:	3332      	adds	r3, #50	; 0x32
 8003a9a:	4a2a      	ldr	r2, [pc, #168]	; (8003b44 <UART_SetConfig+0x38c>)
 8003a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa0:	095b      	lsrs	r3, r3, #5
 8003aa2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003aa6:	441e      	add	r6, r3
 8003aa8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f04f 0100 	mov.w	r1, #0
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	1894      	adds	r4, r2, r2
 8003ab6:	603c      	str	r4, [r7, #0]
 8003ab8:	415b      	adcs	r3, r3
 8003aba:	607b      	str	r3, [r7, #4]
 8003abc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ac0:	1812      	adds	r2, r2, r0
 8003ac2:	eb41 0303 	adc.w	r3, r1, r3
 8003ac6:	f04f 0400 	mov.w	r4, #0
 8003aca:	f04f 0500 	mov.w	r5, #0
 8003ace:	00dd      	lsls	r5, r3, #3
 8003ad0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003ad4:	00d4      	lsls	r4, r2, #3
 8003ad6:	4622      	mov	r2, r4
 8003ad8:	462b      	mov	r3, r5
 8003ada:	eb12 0a00 	adds.w	sl, r2, r0
 8003ade:	eb43 0b01 	adc.w	fp, r3, r1
 8003ae2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f04f 0100 	mov.w	r1, #0
 8003aec:	f04f 0200 	mov.w	r2, #0
 8003af0:	f04f 0300 	mov.w	r3, #0
 8003af4:	008b      	lsls	r3, r1, #2
 8003af6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003afa:	0082      	lsls	r2, r0, #2
 8003afc:	4650      	mov	r0, sl
 8003afe:	4659      	mov	r1, fp
 8003b00:	f7fc fe0a 	bl	8000718 <__aeabi_uldivmod>
 8003b04:	4602      	mov	r2, r0
 8003b06:	460b      	mov	r3, r1
 8003b08:	4b0e      	ldr	r3, [pc, #56]	; (8003b44 <UART_SetConfig+0x38c>)
 8003b0a:	fba3 1302 	umull	r1, r3, r3, r2
 8003b0e:	095b      	lsrs	r3, r3, #5
 8003b10:	2164      	movs	r1, #100	; 0x64
 8003b12:	fb01 f303 	mul.w	r3, r1, r3
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	011b      	lsls	r3, r3, #4
 8003b1a:	3332      	adds	r3, #50	; 0x32
 8003b1c:	4a09      	ldr	r2, [pc, #36]	; (8003b44 <UART_SetConfig+0x38c>)
 8003b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b22:	095b      	lsrs	r3, r3, #5
 8003b24:	f003 020f 	and.w	r2, r3, #15
 8003b28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4432      	add	r2, r6
 8003b2e:	609a      	str	r2, [r3, #8]
}
 8003b30:	bf00      	nop
 8003b32:	377c      	adds	r7, #124	; 0x7c
 8003b34:	46bd      	mov	sp, r7
 8003b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b3a:	bf00      	nop
 8003b3c:	40011000 	.word	0x40011000
 8003b40:	40011400 	.word	0x40011400
 8003b44:	51eb851f 	.word	0x51eb851f

08003b48 <__errno>:
 8003b48:	4b01      	ldr	r3, [pc, #4]	; (8003b50 <__errno+0x8>)
 8003b4a:	6818      	ldr	r0, [r3, #0]
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	2000000c 	.word	0x2000000c

08003b54 <__libc_init_array>:
 8003b54:	b570      	push	{r4, r5, r6, lr}
 8003b56:	4d0d      	ldr	r5, [pc, #52]	; (8003b8c <__libc_init_array+0x38>)
 8003b58:	4c0d      	ldr	r4, [pc, #52]	; (8003b90 <__libc_init_array+0x3c>)
 8003b5a:	1b64      	subs	r4, r4, r5
 8003b5c:	10a4      	asrs	r4, r4, #2
 8003b5e:	2600      	movs	r6, #0
 8003b60:	42a6      	cmp	r6, r4
 8003b62:	d109      	bne.n	8003b78 <__libc_init_array+0x24>
 8003b64:	4d0b      	ldr	r5, [pc, #44]	; (8003b94 <__libc_init_array+0x40>)
 8003b66:	4c0c      	ldr	r4, [pc, #48]	; (8003b98 <__libc_init_array+0x44>)
 8003b68:	f000 fc4e 	bl	8004408 <_init>
 8003b6c:	1b64      	subs	r4, r4, r5
 8003b6e:	10a4      	asrs	r4, r4, #2
 8003b70:	2600      	movs	r6, #0
 8003b72:	42a6      	cmp	r6, r4
 8003b74:	d105      	bne.n	8003b82 <__libc_init_array+0x2e>
 8003b76:	bd70      	pop	{r4, r5, r6, pc}
 8003b78:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b7c:	4798      	blx	r3
 8003b7e:	3601      	adds	r6, #1
 8003b80:	e7ee      	b.n	8003b60 <__libc_init_array+0xc>
 8003b82:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b86:	4798      	blx	r3
 8003b88:	3601      	adds	r6, #1
 8003b8a:	e7f2      	b.n	8003b72 <__libc_init_array+0x1e>
 8003b8c:	0800450c 	.word	0x0800450c
 8003b90:	0800450c 	.word	0x0800450c
 8003b94:	0800450c 	.word	0x0800450c
 8003b98:	08004510 	.word	0x08004510

08003b9c <memset>:
 8003b9c:	4402      	add	r2, r0
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d100      	bne.n	8003ba6 <memset+0xa>
 8003ba4:	4770      	bx	lr
 8003ba6:	f803 1b01 	strb.w	r1, [r3], #1
 8003baa:	e7f9      	b.n	8003ba0 <memset+0x4>

08003bac <siprintf>:
 8003bac:	b40e      	push	{r1, r2, r3}
 8003bae:	b500      	push	{lr}
 8003bb0:	b09c      	sub	sp, #112	; 0x70
 8003bb2:	ab1d      	add	r3, sp, #116	; 0x74
 8003bb4:	9002      	str	r0, [sp, #8]
 8003bb6:	9006      	str	r0, [sp, #24]
 8003bb8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003bbc:	4809      	ldr	r0, [pc, #36]	; (8003be4 <siprintf+0x38>)
 8003bbe:	9107      	str	r1, [sp, #28]
 8003bc0:	9104      	str	r1, [sp, #16]
 8003bc2:	4909      	ldr	r1, [pc, #36]	; (8003be8 <siprintf+0x3c>)
 8003bc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8003bc8:	9105      	str	r1, [sp, #20]
 8003bca:	6800      	ldr	r0, [r0, #0]
 8003bcc:	9301      	str	r3, [sp, #4]
 8003bce:	a902      	add	r1, sp, #8
 8003bd0:	f000 f868 	bl	8003ca4 <_svfiprintf_r>
 8003bd4:	9b02      	ldr	r3, [sp, #8]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	701a      	strb	r2, [r3, #0]
 8003bda:	b01c      	add	sp, #112	; 0x70
 8003bdc:	f85d eb04 	ldr.w	lr, [sp], #4
 8003be0:	b003      	add	sp, #12
 8003be2:	4770      	bx	lr
 8003be4:	2000000c 	.word	0x2000000c
 8003be8:	ffff0208 	.word	0xffff0208

08003bec <__ssputs_r>:
 8003bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bf0:	688e      	ldr	r6, [r1, #8]
 8003bf2:	429e      	cmp	r6, r3
 8003bf4:	4682      	mov	sl, r0
 8003bf6:	460c      	mov	r4, r1
 8003bf8:	4690      	mov	r8, r2
 8003bfa:	461f      	mov	r7, r3
 8003bfc:	d838      	bhi.n	8003c70 <__ssputs_r+0x84>
 8003bfe:	898a      	ldrh	r2, [r1, #12]
 8003c00:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003c04:	d032      	beq.n	8003c6c <__ssputs_r+0x80>
 8003c06:	6825      	ldr	r5, [r4, #0]
 8003c08:	6909      	ldr	r1, [r1, #16]
 8003c0a:	eba5 0901 	sub.w	r9, r5, r1
 8003c0e:	6965      	ldr	r5, [r4, #20]
 8003c10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003c14:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003c18:	3301      	adds	r3, #1
 8003c1a:	444b      	add	r3, r9
 8003c1c:	106d      	asrs	r5, r5, #1
 8003c1e:	429d      	cmp	r5, r3
 8003c20:	bf38      	it	cc
 8003c22:	461d      	movcc	r5, r3
 8003c24:	0553      	lsls	r3, r2, #21
 8003c26:	d531      	bpl.n	8003c8c <__ssputs_r+0xa0>
 8003c28:	4629      	mov	r1, r5
 8003c2a:	f000 fb47 	bl	80042bc <_malloc_r>
 8003c2e:	4606      	mov	r6, r0
 8003c30:	b950      	cbnz	r0, 8003c48 <__ssputs_r+0x5c>
 8003c32:	230c      	movs	r3, #12
 8003c34:	f8ca 3000 	str.w	r3, [sl]
 8003c38:	89a3      	ldrh	r3, [r4, #12]
 8003c3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c3e:	81a3      	strh	r3, [r4, #12]
 8003c40:	f04f 30ff 	mov.w	r0, #4294967295
 8003c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c48:	6921      	ldr	r1, [r4, #16]
 8003c4a:	464a      	mov	r2, r9
 8003c4c:	f000 fabe 	bl	80041cc <memcpy>
 8003c50:	89a3      	ldrh	r3, [r4, #12]
 8003c52:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003c56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c5a:	81a3      	strh	r3, [r4, #12]
 8003c5c:	6126      	str	r6, [r4, #16]
 8003c5e:	6165      	str	r5, [r4, #20]
 8003c60:	444e      	add	r6, r9
 8003c62:	eba5 0509 	sub.w	r5, r5, r9
 8003c66:	6026      	str	r6, [r4, #0]
 8003c68:	60a5      	str	r5, [r4, #8]
 8003c6a:	463e      	mov	r6, r7
 8003c6c:	42be      	cmp	r6, r7
 8003c6e:	d900      	bls.n	8003c72 <__ssputs_r+0x86>
 8003c70:	463e      	mov	r6, r7
 8003c72:	4632      	mov	r2, r6
 8003c74:	6820      	ldr	r0, [r4, #0]
 8003c76:	4641      	mov	r1, r8
 8003c78:	f000 fab6 	bl	80041e8 <memmove>
 8003c7c:	68a3      	ldr	r3, [r4, #8]
 8003c7e:	6822      	ldr	r2, [r4, #0]
 8003c80:	1b9b      	subs	r3, r3, r6
 8003c82:	4432      	add	r2, r6
 8003c84:	60a3      	str	r3, [r4, #8]
 8003c86:	6022      	str	r2, [r4, #0]
 8003c88:	2000      	movs	r0, #0
 8003c8a:	e7db      	b.n	8003c44 <__ssputs_r+0x58>
 8003c8c:	462a      	mov	r2, r5
 8003c8e:	f000 fb6f 	bl	8004370 <_realloc_r>
 8003c92:	4606      	mov	r6, r0
 8003c94:	2800      	cmp	r0, #0
 8003c96:	d1e1      	bne.n	8003c5c <__ssputs_r+0x70>
 8003c98:	6921      	ldr	r1, [r4, #16]
 8003c9a:	4650      	mov	r0, sl
 8003c9c:	f000 fabe 	bl	800421c <_free_r>
 8003ca0:	e7c7      	b.n	8003c32 <__ssputs_r+0x46>
	...

08003ca4 <_svfiprintf_r>:
 8003ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ca8:	4698      	mov	r8, r3
 8003caa:	898b      	ldrh	r3, [r1, #12]
 8003cac:	061b      	lsls	r3, r3, #24
 8003cae:	b09d      	sub	sp, #116	; 0x74
 8003cb0:	4607      	mov	r7, r0
 8003cb2:	460d      	mov	r5, r1
 8003cb4:	4614      	mov	r4, r2
 8003cb6:	d50e      	bpl.n	8003cd6 <_svfiprintf_r+0x32>
 8003cb8:	690b      	ldr	r3, [r1, #16]
 8003cba:	b963      	cbnz	r3, 8003cd6 <_svfiprintf_r+0x32>
 8003cbc:	2140      	movs	r1, #64	; 0x40
 8003cbe:	f000 fafd 	bl	80042bc <_malloc_r>
 8003cc2:	6028      	str	r0, [r5, #0]
 8003cc4:	6128      	str	r0, [r5, #16]
 8003cc6:	b920      	cbnz	r0, 8003cd2 <_svfiprintf_r+0x2e>
 8003cc8:	230c      	movs	r3, #12
 8003cca:	603b      	str	r3, [r7, #0]
 8003ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8003cd0:	e0d1      	b.n	8003e76 <_svfiprintf_r+0x1d2>
 8003cd2:	2340      	movs	r3, #64	; 0x40
 8003cd4:	616b      	str	r3, [r5, #20]
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	9309      	str	r3, [sp, #36]	; 0x24
 8003cda:	2320      	movs	r3, #32
 8003cdc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003ce0:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ce4:	2330      	movs	r3, #48	; 0x30
 8003ce6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003e90 <_svfiprintf_r+0x1ec>
 8003cea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003cee:	f04f 0901 	mov.w	r9, #1
 8003cf2:	4623      	mov	r3, r4
 8003cf4:	469a      	mov	sl, r3
 8003cf6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003cfa:	b10a      	cbz	r2, 8003d00 <_svfiprintf_r+0x5c>
 8003cfc:	2a25      	cmp	r2, #37	; 0x25
 8003cfe:	d1f9      	bne.n	8003cf4 <_svfiprintf_r+0x50>
 8003d00:	ebba 0b04 	subs.w	fp, sl, r4
 8003d04:	d00b      	beq.n	8003d1e <_svfiprintf_r+0x7a>
 8003d06:	465b      	mov	r3, fp
 8003d08:	4622      	mov	r2, r4
 8003d0a:	4629      	mov	r1, r5
 8003d0c:	4638      	mov	r0, r7
 8003d0e:	f7ff ff6d 	bl	8003bec <__ssputs_r>
 8003d12:	3001      	adds	r0, #1
 8003d14:	f000 80aa 	beq.w	8003e6c <_svfiprintf_r+0x1c8>
 8003d18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d1a:	445a      	add	r2, fp
 8003d1c:	9209      	str	r2, [sp, #36]	; 0x24
 8003d1e:	f89a 3000 	ldrb.w	r3, [sl]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	f000 80a2 	beq.w	8003e6c <_svfiprintf_r+0x1c8>
 8003d28:	2300      	movs	r3, #0
 8003d2a:	f04f 32ff 	mov.w	r2, #4294967295
 8003d2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d32:	f10a 0a01 	add.w	sl, sl, #1
 8003d36:	9304      	str	r3, [sp, #16]
 8003d38:	9307      	str	r3, [sp, #28]
 8003d3a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d3e:	931a      	str	r3, [sp, #104]	; 0x68
 8003d40:	4654      	mov	r4, sl
 8003d42:	2205      	movs	r2, #5
 8003d44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d48:	4851      	ldr	r0, [pc, #324]	; (8003e90 <_svfiprintf_r+0x1ec>)
 8003d4a:	f7fc fa51 	bl	80001f0 <memchr>
 8003d4e:	9a04      	ldr	r2, [sp, #16]
 8003d50:	b9d8      	cbnz	r0, 8003d8a <_svfiprintf_r+0xe6>
 8003d52:	06d0      	lsls	r0, r2, #27
 8003d54:	bf44      	itt	mi
 8003d56:	2320      	movmi	r3, #32
 8003d58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d5c:	0711      	lsls	r1, r2, #28
 8003d5e:	bf44      	itt	mi
 8003d60:	232b      	movmi	r3, #43	; 0x2b
 8003d62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d66:	f89a 3000 	ldrb.w	r3, [sl]
 8003d6a:	2b2a      	cmp	r3, #42	; 0x2a
 8003d6c:	d015      	beq.n	8003d9a <_svfiprintf_r+0xf6>
 8003d6e:	9a07      	ldr	r2, [sp, #28]
 8003d70:	4654      	mov	r4, sl
 8003d72:	2000      	movs	r0, #0
 8003d74:	f04f 0c0a 	mov.w	ip, #10
 8003d78:	4621      	mov	r1, r4
 8003d7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d7e:	3b30      	subs	r3, #48	; 0x30
 8003d80:	2b09      	cmp	r3, #9
 8003d82:	d94e      	bls.n	8003e22 <_svfiprintf_r+0x17e>
 8003d84:	b1b0      	cbz	r0, 8003db4 <_svfiprintf_r+0x110>
 8003d86:	9207      	str	r2, [sp, #28]
 8003d88:	e014      	b.n	8003db4 <_svfiprintf_r+0x110>
 8003d8a:	eba0 0308 	sub.w	r3, r0, r8
 8003d8e:	fa09 f303 	lsl.w	r3, r9, r3
 8003d92:	4313      	orrs	r3, r2
 8003d94:	9304      	str	r3, [sp, #16]
 8003d96:	46a2      	mov	sl, r4
 8003d98:	e7d2      	b.n	8003d40 <_svfiprintf_r+0x9c>
 8003d9a:	9b03      	ldr	r3, [sp, #12]
 8003d9c:	1d19      	adds	r1, r3, #4
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	9103      	str	r1, [sp, #12]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	bfbb      	ittet	lt
 8003da6:	425b      	neglt	r3, r3
 8003da8:	f042 0202 	orrlt.w	r2, r2, #2
 8003dac:	9307      	strge	r3, [sp, #28]
 8003dae:	9307      	strlt	r3, [sp, #28]
 8003db0:	bfb8      	it	lt
 8003db2:	9204      	strlt	r2, [sp, #16]
 8003db4:	7823      	ldrb	r3, [r4, #0]
 8003db6:	2b2e      	cmp	r3, #46	; 0x2e
 8003db8:	d10c      	bne.n	8003dd4 <_svfiprintf_r+0x130>
 8003dba:	7863      	ldrb	r3, [r4, #1]
 8003dbc:	2b2a      	cmp	r3, #42	; 0x2a
 8003dbe:	d135      	bne.n	8003e2c <_svfiprintf_r+0x188>
 8003dc0:	9b03      	ldr	r3, [sp, #12]
 8003dc2:	1d1a      	adds	r2, r3, #4
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	9203      	str	r2, [sp, #12]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	bfb8      	it	lt
 8003dcc:	f04f 33ff 	movlt.w	r3, #4294967295
 8003dd0:	3402      	adds	r4, #2
 8003dd2:	9305      	str	r3, [sp, #20]
 8003dd4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003ea0 <_svfiprintf_r+0x1fc>
 8003dd8:	7821      	ldrb	r1, [r4, #0]
 8003dda:	2203      	movs	r2, #3
 8003ddc:	4650      	mov	r0, sl
 8003dde:	f7fc fa07 	bl	80001f0 <memchr>
 8003de2:	b140      	cbz	r0, 8003df6 <_svfiprintf_r+0x152>
 8003de4:	2340      	movs	r3, #64	; 0x40
 8003de6:	eba0 000a 	sub.w	r0, r0, sl
 8003dea:	fa03 f000 	lsl.w	r0, r3, r0
 8003dee:	9b04      	ldr	r3, [sp, #16]
 8003df0:	4303      	orrs	r3, r0
 8003df2:	3401      	adds	r4, #1
 8003df4:	9304      	str	r3, [sp, #16]
 8003df6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003dfa:	4826      	ldr	r0, [pc, #152]	; (8003e94 <_svfiprintf_r+0x1f0>)
 8003dfc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e00:	2206      	movs	r2, #6
 8003e02:	f7fc f9f5 	bl	80001f0 <memchr>
 8003e06:	2800      	cmp	r0, #0
 8003e08:	d038      	beq.n	8003e7c <_svfiprintf_r+0x1d8>
 8003e0a:	4b23      	ldr	r3, [pc, #140]	; (8003e98 <_svfiprintf_r+0x1f4>)
 8003e0c:	bb1b      	cbnz	r3, 8003e56 <_svfiprintf_r+0x1b2>
 8003e0e:	9b03      	ldr	r3, [sp, #12]
 8003e10:	3307      	adds	r3, #7
 8003e12:	f023 0307 	bic.w	r3, r3, #7
 8003e16:	3308      	adds	r3, #8
 8003e18:	9303      	str	r3, [sp, #12]
 8003e1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e1c:	4433      	add	r3, r6
 8003e1e:	9309      	str	r3, [sp, #36]	; 0x24
 8003e20:	e767      	b.n	8003cf2 <_svfiprintf_r+0x4e>
 8003e22:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e26:	460c      	mov	r4, r1
 8003e28:	2001      	movs	r0, #1
 8003e2a:	e7a5      	b.n	8003d78 <_svfiprintf_r+0xd4>
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	3401      	adds	r4, #1
 8003e30:	9305      	str	r3, [sp, #20]
 8003e32:	4619      	mov	r1, r3
 8003e34:	f04f 0c0a 	mov.w	ip, #10
 8003e38:	4620      	mov	r0, r4
 8003e3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e3e:	3a30      	subs	r2, #48	; 0x30
 8003e40:	2a09      	cmp	r2, #9
 8003e42:	d903      	bls.n	8003e4c <_svfiprintf_r+0x1a8>
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d0c5      	beq.n	8003dd4 <_svfiprintf_r+0x130>
 8003e48:	9105      	str	r1, [sp, #20]
 8003e4a:	e7c3      	b.n	8003dd4 <_svfiprintf_r+0x130>
 8003e4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e50:	4604      	mov	r4, r0
 8003e52:	2301      	movs	r3, #1
 8003e54:	e7f0      	b.n	8003e38 <_svfiprintf_r+0x194>
 8003e56:	ab03      	add	r3, sp, #12
 8003e58:	9300      	str	r3, [sp, #0]
 8003e5a:	462a      	mov	r2, r5
 8003e5c:	4b0f      	ldr	r3, [pc, #60]	; (8003e9c <_svfiprintf_r+0x1f8>)
 8003e5e:	a904      	add	r1, sp, #16
 8003e60:	4638      	mov	r0, r7
 8003e62:	f3af 8000 	nop.w
 8003e66:	1c42      	adds	r2, r0, #1
 8003e68:	4606      	mov	r6, r0
 8003e6a:	d1d6      	bne.n	8003e1a <_svfiprintf_r+0x176>
 8003e6c:	89ab      	ldrh	r3, [r5, #12]
 8003e6e:	065b      	lsls	r3, r3, #25
 8003e70:	f53f af2c 	bmi.w	8003ccc <_svfiprintf_r+0x28>
 8003e74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e76:	b01d      	add	sp, #116	; 0x74
 8003e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e7c:	ab03      	add	r3, sp, #12
 8003e7e:	9300      	str	r3, [sp, #0]
 8003e80:	462a      	mov	r2, r5
 8003e82:	4b06      	ldr	r3, [pc, #24]	; (8003e9c <_svfiprintf_r+0x1f8>)
 8003e84:	a904      	add	r1, sp, #16
 8003e86:	4638      	mov	r0, r7
 8003e88:	f000 f87a 	bl	8003f80 <_printf_i>
 8003e8c:	e7eb      	b.n	8003e66 <_svfiprintf_r+0x1c2>
 8003e8e:	bf00      	nop
 8003e90:	080044d0 	.word	0x080044d0
 8003e94:	080044da 	.word	0x080044da
 8003e98:	00000000 	.word	0x00000000
 8003e9c:	08003bed 	.word	0x08003bed
 8003ea0:	080044d6 	.word	0x080044d6

08003ea4 <_printf_common>:
 8003ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ea8:	4616      	mov	r6, r2
 8003eaa:	4699      	mov	r9, r3
 8003eac:	688a      	ldr	r2, [r1, #8]
 8003eae:	690b      	ldr	r3, [r1, #16]
 8003eb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	bfb8      	it	lt
 8003eb8:	4613      	movlt	r3, r2
 8003eba:	6033      	str	r3, [r6, #0]
 8003ebc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ec0:	4607      	mov	r7, r0
 8003ec2:	460c      	mov	r4, r1
 8003ec4:	b10a      	cbz	r2, 8003eca <_printf_common+0x26>
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	6033      	str	r3, [r6, #0]
 8003eca:	6823      	ldr	r3, [r4, #0]
 8003ecc:	0699      	lsls	r1, r3, #26
 8003ece:	bf42      	ittt	mi
 8003ed0:	6833      	ldrmi	r3, [r6, #0]
 8003ed2:	3302      	addmi	r3, #2
 8003ed4:	6033      	strmi	r3, [r6, #0]
 8003ed6:	6825      	ldr	r5, [r4, #0]
 8003ed8:	f015 0506 	ands.w	r5, r5, #6
 8003edc:	d106      	bne.n	8003eec <_printf_common+0x48>
 8003ede:	f104 0a19 	add.w	sl, r4, #25
 8003ee2:	68e3      	ldr	r3, [r4, #12]
 8003ee4:	6832      	ldr	r2, [r6, #0]
 8003ee6:	1a9b      	subs	r3, r3, r2
 8003ee8:	42ab      	cmp	r3, r5
 8003eea:	dc26      	bgt.n	8003f3a <_printf_common+0x96>
 8003eec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003ef0:	1e13      	subs	r3, r2, #0
 8003ef2:	6822      	ldr	r2, [r4, #0]
 8003ef4:	bf18      	it	ne
 8003ef6:	2301      	movne	r3, #1
 8003ef8:	0692      	lsls	r2, r2, #26
 8003efa:	d42b      	bmi.n	8003f54 <_printf_common+0xb0>
 8003efc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f00:	4649      	mov	r1, r9
 8003f02:	4638      	mov	r0, r7
 8003f04:	47c0      	blx	r8
 8003f06:	3001      	adds	r0, #1
 8003f08:	d01e      	beq.n	8003f48 <_printf_common+0xa4>
 8003f0a:	6823      	ldr	r3, [r4, #0]
 8003f0c:	68e5      	ldr	r5, [r4, #12]
 8003f0e:	6832      	ldr	r2, [r6, #0]
 8003f10:	f003 0306 	and.w	r3, r3, #6
 8003f14:	2b04      	cmp	r3, #4
 8003f16:	bf08      	it	eq
 8003f18:	1aad      	subeq	r5, r5, r2
 8003f1a:	68a3      	ldr	r3, [r4, #8]
 8003f1c:	6922      	ldr	r2, [r4, #16]
 8003f1e:	bf0c      	ite	eq
 8003f20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f24:	2500      	movne	r5, #0
 8003f26:	4293      	cmp	r3, r2
 8003f28:	bfc4      	itt	gt
 8003f2a:	1a9b      	subgt	r3, r3, r2
 8003f2c:	18ed      	addgt	r5, r5, r3
 8003f2e:	2600      	movs	r6, #0
 8003f30:	341a      	adds	r4, #26
 8003f32:	42b5      	cmp	r5, r6
 8003f34:	d11a      	bne.n	8003f6c <_printf_common+0xc8>
 8003f36:	2000      	movs	r0, #0
 8003f38:	e008      	b.n	8003f4c <_printf_common+0xa8>
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	4652      	mov	r2, sl
 8003f3e:	4649      	mov	r1, r9
 8003f40:	4638      	mov	r0, r7
 8003f42:	47c0      	blx	r8
 8003f44:	3001      	adds	r0, #1
 8003f46:	d103      	bne.n	8003f50 <_printf_common+0xac>
 8003f48:	f04f 30ff 	mov.w	r0, #4294967295
 8003f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f50:	3501      	adds	r5, #1
 8003f52:	e7c6      	b.n	8003ee2 <_printf_common+0x3e>
 8003f54:	18e1      	adds	r1, r4, r3
 8003f56:	1c5a      	adds	r2, r3, #1
 8003f58:	2030      	movs	r0, #48	; 0x30
 8003f5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f5e:	4422      	add	r2, r4
 8003f60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f68:	3302      	adds	r3, #2
 8003f6a:	e7c7      	b.n	8003efc <_printf_common+0x58>
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	4622      	mov	r2, r4
 8003f70:	4649      	mov	r1, r9
 8003f72:	4638      	mov	r0, r7
 8003f74:	47c0      	blx	r8
 8003f76:	3001      	adds	r0, #1
 8003f78:	d0e6      	beq.n	8003f48 <_printf_common+0xa4>
 8003f7a:	3601      	adds	r6, #1
 8003f7c:	e7d9      	b.n	8003f32 <_printf_common+0x8e>
	...

08003f80 <_printf_i>:
 8003f80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f84:	460c      	mov	r4, r1
 8003f86:	4691      	mov	r9, r2
 8003f88:	7e27      	ldrb	r7, [r4, #24]
 8003f8a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003f8c:	2f78      	cmp	r7, #120	; 0x78
 8003f8e:	4680      	mov	r8, r0
 8003f90:	469a      	mov	sl, r3
 8003f92:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f96:	d807      	bhi.n	8003fa8 <_printf_i+0x28>
 8003f98:	2f62      	cmp	r7, #98	; 0x62
 8003f9a:	d80a      	bhi.n	8003fb2 <_printf_i+0x32>
 8003f9c:	2f00      	cmp	r7, #0
 8003f9e:	f000 80d8 	beq.w	8004152 <_printf_i+0x1d2>
 8003fa2:	2f58      	cmp	r7, #88	; 0x58
 8003fa4:	f000 80a3 	beq.w	80040ee <_printf_i+0x16e>
 8003fa8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003fac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003fb0:	e03a      	b.n	8004028 <_printf_i+0xa8>
 8003fb2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003fb6:	2b15      	cmp	r3, #21
 8003fb8:	d8f6      	bhi.n	8003fa8 <_printf_i+0x28>
 8003fba:	a001      	add	r0, pc, #4	; (adr r0, 8003fc0 <_printf_i+0x40>)
 8003fbc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003fc0:	08004019 	.word	0x08004019
 8003fc4:	0800402d 	.word	0x0800402d
 8003fc8:	08003fa9 	.word	0x08003fa9
 8003fcc:	08003fa9 	.word	0x08003fa9
 8003fd0:	08003fa9 	.word	0x08003fa9
 8003fd4:	08003fa9 	.word	0x08003fa9
 8003fd8:	0800402d 	.word	0x0800402d
 8003fdc:	08003fa9 	.word	0x08003fa9
 8003fe0:	08003fa9 	.word	0x08003fa9
 8003fe4:	08003fa9 	.word	0x08003fa9
 8003fe8:	08003fa9 	.word	0x08003fa9
 8003fec:	08004139 	.word	0x08004139
 8003ff0:	0800405d 	.word	0x0800405d
 8003ff4:	0800411b 	.word	0x0800411b
 8003ff8:	08003fa9 	.word	0x08003fa9
 8003ffc:	08003fa9 	.word	0x08003fa9
 8004000:	0800415b 	.word	0x0800415b
 8004004:	08003fa9 	.word	0x08003fa9
 8004008:	0800405d 	.word	0x0800405d
 800400c:	08003fa9 	.word	0x08003fa9
 8004010:	08003fa9 	.word	0x08003fa9
 8004014:	08004123 	.word	0x08004123
 8004018:	680b      	ldr	r3, [r1, #0]
 800401a:	1d1a      	adds	r2, r3, #4
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	600a      	str	r2, [r1, #0]
 8004020:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004024:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004028:	2301      	movs	r3, #1
 800402a:	e0a3      	b.n	8004174 <_printf_i+0x1f4>
 800402c:	6825      	ldr	r5, [r4, #0]
 800402e:	6808      	ldr	r0, [r1, #0]
 8004030:	062e      	lsls	r6, r5, #24
 8004032:	f100 0304 	add.w	r3, r0, #4
 8004036:	d50a      	bpl.n	800404e <_printf_i+0xce>
 8004038:	6805      	ldr	r5, [r0, #0]
 800403a:	600b      	str	r3, [r1, #0]
 800403c:	2d00      	cmp	r5, #0
 800403e:	da03      	bge.n	8004048 <_printf_i+0xc8>
 8004040:	232d      	movs	r3, #45	; 0x2d
 8004042:	426d      	negs	r5, r5
 8004044:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004048:	485e      	ldr	r0, [pc, #376]	; (80041c4 <_printf_i+0x244>)
 800404a:	230a      	movs	r3, #10
 800404c:	e019      	b.n	8004082 <_printf_i+0x102>
 800404e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004052:	6805      	ldr	r5, [r0, #0]
 8004054:	600b      	str	r3, [r1, #0]
 8004056:	bf18      	it	ne
 8004058:	b22d      	sxthne	r5, r5
 800405a:	e7ef      	b.n	800403c <_printf_i+0xbc>
 800405c:	680b      	ldr	r3, [r1, #0]
 800405e:	6825      	ldr	r5, [r4, #0]
 8004060:	1d18      	adds	r0, r3, #4
 8004062:	6008      	str	r0, [r1, #0]
 8004064:	0628      	lsls	r0, r5, #24
 8004066:	d501      	bpl.n	800406c <_printf_i+0xec>
 8004068:	681d      	ldr	r5, [r3, #0]
 800406a:	e002      	b.n	8004072 <_printf_i+0xf2>
 800406c:	0669      	lsls	r1, r5, #25
 800406e:	d5fb      	bpl.n	8004068 <_printf_i+0xe8>
 8004070:	881d      	ldrh	r5, [r3, #0]
 8004072:	4854      	ldr	r0, [pc, #336]	; (80041c4 <_printf_i+0x244>)
 8004074:	2f6f      	cmp	r7, #111	; 0x6f
 8004076:	bf0c      	ite	eq
 8004078:	2308      	moveq	r3, #8
 800407a:	230a      	movne	r3, #10
 800407c:	2100      	movs	r1, #0
 800407e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004082:	6866      	ldr	r6, [r4, #4]
 8004084:	60a6      	str	r6, [r4, #8]
 8004086:	2e00      	cmp	r6, #0
 8004088:	bfa2      	ittt	ge
 800408a:	6821      	ldrge	r1, [r4, #0]
 800408c:	f021 0104 	bicge.w	r1, r1, #4
 8004090:	6021      	strge	r1, [r4, #0]
 8004092:	b90d      	cbnz	r5, 8004098 <_printf_i+0x118>
 8004094:	2e00      	cmp	r6, #0
 8004096:	d04d      	beq.n	8004134 <_printf_i+0x1b4>
 8004098:	4616      	mov	r6, r2
 800409a:	fbb5 f1f3 	udiv	r1, r5, r3
 800409e:	fb03 5711 	mls	r7, r3, r1, r5
 80040a2:	5dc7      	ldrb	r7, [r0, r7]
 80040a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80040a8:	462f      	mov	r7, r5
 80040aa:	42bb      	cmp	r3, r7
 80040ac:	460d      	mov	r5, r1
 80040ae:	d9f4      	bls.n	800409a <_printf_i+0x11a>
 80040b0:	2b08      	cmp	r3, #8
 80040b2:	d10b      	bne.n	80040cc <_printf_i+0x14c>
 80040b4:	6823      	ldr	r3, [r4, #0]
 80040b6:	07df      	lsls	r7, r3, #31
 80040b8:	d508      	bpl.n	80040cc <_printf_i+0x14c>
 80040ba:	6923      	ldr	r3, [r4, #16]
 80040bc:	6861      	ldr	r1, [r4, #4]
 80040be:	4299      	cmp	r1, r3
 80040c0:	bfde      	ittt	le
 80040c2:	2330      	movle	r3, #48	; 0x30
 80040c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80040c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80040cc:	1b92      	subs	r2, r2, r6
 80040ce:	6122      	str	r2, [r4, #16]
 80040d0:	f8cd a000 	str.w	sl, [sp]
 80040d4:	464b      	mov	r3, r9
 80040d6:	aa03      	add	r2, sp, #12
 80040d8:	4621      	mov	r1, r4
 80040da:	4640      	mov	r0, r8
 80040dc:	f7ff fee2 	bl	8003ea4 <_printf_common>
 80040e0:	3001      	adds	r0, #1
 80040e2:	d14c      	bne.n	800417e <_printf_i+0x1fe>
 80040e4:	f04f 30ff 	mov.w	r0, #4294967295
 80040e8:	b004      	add	sp, #16
 80040ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040ee:	4835      	ldr	r0, [pc, #212]	; (80041c4 <_printf_i+0x244>)
 80040f0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80040f4:	6823      	ldr	r3, [r4, #0]
 80040f6:	680e      	ldr	r6, [r1, #0]
 80040f8:	061f      	lsls	r7, r3, #24
 80040fa:	f856 5b04 	ldr.w	r5, [r6], #4
 80040fe:	600e      	str	r6, [r1, #0]
 8004100:	d514      	bpl.n	800412c <_printf_i+0x1ac>
 8004102:	07d9      	lsls	r1, r3, #31
 8004104:	bf44      	itt	mi
 8004106:	f043 0320 	orrmi.w	r3, r3, #32
 800410a:	6023      	strmi	r3, [r4, #0]
 800410c:	b91d      	cbnz	r5, 8004116 <_printf_i+0x196>
 800410e:	6823      	ldr	r3, [r4, #0]
 8004110:	f023 0320 	bic.w	r3, r3, #32
 8004114:	6023      	str	r3, [r4, #0]
 8004116:	2310      	movs	r3, #16
 8004118:	e7b0      	b.n	800407c <_printf_i+0xfc>
 800411a:	6823      	ldr	r3, [r4, #0]
 800411c:	f043 0320 	orr.w	r3, r3, #32
 8004120:	6023      	str	r3, [r4, #0]
 8004122:	2378      	movs	r3, #120	; 0x78
 8004124:	4828      	ldr	r0, [pc, #160]	; (80041c8 <_printf_i+0x248>)
 8004126:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800412a:	e7e3      	b.n	80040f4 <_printf_i+0x174>
 800412c:	065e      	lsls	r6, r3, #25
 800412e:	bf48      	it	mi
 8004130:	b2ad      	uxthmi	r5, r5
 8004132:	e7e6      	b.n	8004102 <_printf_i+0x182>
 8004134:	4616      	mov	r6, r2
 8004136:	e7bb      	b.n	80040b0 <_printf_i+0x130>
 8004138:	680b      	ldr	r3, [r1, #0]
 800413a:	6826      	ldr	r6, [r4, #0]
 800413c:	6960      	ldr	r0, [r4, #20]
 800413e:	1d1d      	adds	r5, r3, #4
 8004140:	600d      	str	r5, [r1, #0]
 8004142:	0635      	lsls	r5, r6, #24
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	d501      	bpl.n	800414c <_printf_i+0x1cc>
 8004148:	6018      	str	r0, [r3, #0]
 800414a:	e002      	b.n	8004152 <_printf_i+0x1d2>
 800414c:	0671      	lsls	r1, r6, #25
 800414e:	d5fb      	bpl.n	8004148 <_printf_i+0x1c8>
 8004150:	8018      	strh	r0, [r3, #0]
 8004152:	2300      	movs	r3, #0
 8004154:	6123      	str	r3, [r4, #16]
 8004156:	4616      	mov	r6, r2
 8004158:	e7ba      	b.n	80040d0 <_printf_i+0x150>
 800415a:	680b      	ldr	r3, [r1, #0]
 800415c:	1d1a      	adds	r2, r3, #4
 800415e:	600a      	str	r2, [r1, #0]
 8004160:	681e      	ldr	r6, [r3, #0]
 8004162:	6862      	ldr	r2, [r4, #4]
 8004164:	2100      	movs	r1, #0
 8004166:	4630      	mov	r0, r6
 8004168:	f7fc f842 	bl	80001f0 <memchr>
 800416c:	b108      	cbz	r0, 8004172 <_printf_i+0x1f2>
 800416e:	1b80      	subs	r0, r0, r6
 8004170:	6060      	str	r0, [r4, #4]
 8004172:	6863      	ldr	r3, [r4, #4]
 8004174:	6123      	str	r3, [r4, #16]
 8004176:	2300      	movs	r3, #0
 8004178:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800417c:	e7a8      	b.n	80040d0 <_printf_i+0x150>
 800417e:	6923      	ldr	r3, [r4, #16]
 8004180:	4632      	mov	r2, r6
 8004182:	4649      	mov	r1, r9
 8004184:	4640      	mov	r0, r8
 8004186:	47d0      	blx	sl
 8004188:	3001      	adds	r0, #1
 800418a:	d0ab      	beq.n	80040e4 <_printf_i+0x164>
 800418c:	6823      	ldr	r3, [r4, #0]
 800418e:	079b      	lsls	r3, r3, #30
 8004190:	d413      	bmi.n	80041ba <_printf_i+0x23a>
 8004192:	68e0      	ldr	r0, [r4, #12]
 8004194:	9b03      	ldr	r3, [sp, #12]
 8004196:	4298      	cmp	r0, r3
 8004198:	bfb8      	it	lt
 800419a:	4618      	movlt	r0, r3
 800419c:	e7a4      	b.n	80040e8 <_printf_i+0x168>
 800419e:	2301      	movs	r3, #1
 80041a0:	4632      	mov	r2, r6
 80041a2:	4649      	mov	r1, r9
 80041a4:	4640      	mov	r0, r8
 80041a6:	47d0      	blx	sl
 80041a8:	3001      	adds	r0, #1
 80041aa:	d09b      	beq.n	80040e4 <_printf_i+0x164>
 80041ac:	3501      	adds	r5, #1
 80041ae:	68e3      	ldr	r3, [r4, #12]
 80041b0:	9903      	ldr	r1, [sp, #12]
 80041b2:	1a5b      	subs	r3, r3, r1
 80041b4:	42ab      	cmp	r3, r5
 80041b6:	dcf2      	bgt.n	800419e <_printf_i+0x21e>
 80041b8:	e7eb      	b.n	8004192 <_printf_i+0x212>
 80041ba:	2500      	movs	r5, #0
 80041bc:	f104 0619 	add.w	r6, r4, #25
 80041c0:	e7f5      	b.n	80041ae <_printf_i+0x22e>
 80041c2:	bf00      	nop
 80041c4:	080044e1 	.word	0x080044e1
 80041c8:	080044f2 	.word	0x080044f2

080041cc <memcpy>:
 80041cc:	440a      	add	r2, r1
 80041ce:	4291      	cmp	r1, r2
 80041d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80041d4:	d100      	bne.n	80041d8 <memcpy+0xc>
 80041d6:	4770      	bx	lr
 80041d8:	b510      	push	{r4, lr}
 80041da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80041e2:	4291      	cmp	r1, r2
 80041e4:	d1f9      	bne.n	80041da <memcpy+0xe>
 80041e6:	bd10      	pop	{r4, pc}

080041e8 <memmove>:
 80041e8:	4288      	cmp	r0, r1
 80041ea:	b510      	push	{r4, lr}
 80041ec:	eb01 0402 	add.w	r4, r1, r2
 80041f0:	d902      	bls.n	80041f8 <memmove+0x10>
 80041f2:	4284      	cmp	r4, r0
 80041f4:	4623      	mov	r3, r4
 80041f6:	d807      	bhi.n	8004208 <memmove+0x20>
 80041f8:	1e43      	subs	r3, r0, #1
 80041fa:	42a1      	cmp	r1, r4
 80041fc:	d008      	beq.n	8004210 <memmove+0x28>
 80041fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004202:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004206:	e7f8      	b.n	80041fa <memmove+0x12>
 8004208:	4402      	add	r2, r0
 800420a:	4601      	mov	r1, r0
 800420c:	428a      	cmp	r2, r1
 800420e:	d100      	bne.n	8004212 <memmove+0x2a>
 8004210:	bd10      	pop	{r4, pc}
 8004212:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004216:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800421a:	e7f7      	b.n	800420c <memmove+0x24>

0800421c <_free_r>:
 800421c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800421e:	2900      	cmp	r1, #0
 8004220:	d048      	beq.n	80042b4 <_free_r+0x98>
 8004222:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004226:	9001      	str	r0, [sp, #4]
 8004228:	2b00      	cmp	r3, #0
 800422a:	f1a1 0404 	sub.w	r4, r1, #4
 800422e:	bfb8      	it	lt
 8004230:	18e4      	addlt	r4, r4, r3
 8004232:	f000 f8d3 	bl	80043dc <__malloc_lock>
 8004236:	4a20      	ldr	r2, [pc, #128]	; (80042b8 <_free_r+0x9c>)
 8004238:	9801      	ldr	r0, [sp, #4]
 800423a:	6813      	ldr	r3, [r2, #0]
 800423c:	4615      	mov	r5, r2
 800423e:	b933      	cbnz	r3, 800424e <_free_r+0x32>
 8004240:	6063      	str	r3, [r4, #4]
 8004242:	6014      	str	r4, [r2, #0]
 8004244:	b003      	add	sp, #12
 8004246:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800424a:	f000 b8cd 	b.w	80043e8 <__malloc_unlock>
 800424e:	42a3      	cmp	r3, r4
 8004250:	d90b      	bls.n	800426a <_free_r+0x4e>
 8004252:	6821      	ldr	r1, [r4, #0]
 8004254:	1862      	adds	r2, r4, r1
 8004256:	4293      	cmp	r3, r2
 8004258:	bf04      	itt	eq
 800425a:	681a      	ldreq	r2, [r3, #0]
 800425c:	685b      	ldreq	r3, [r3, #4]
 800425e:	6063      	str	r3, [r4, #4]
 8004260:	bf04      	itt	eq
 8004262:	1852      	addeq	r2, r2, r1
 8004264:	6022      	streq	r2, [r4, #0]
 8004266:	602c      	str	r4, [r5, #0]
 8004268:	e7ec      	b.n	8004244 <_free_r+0x28>
 800426a:	461a      	mov	r2, r3
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	b10b      	cbz	r3, 8004274 <_free_r+0x58>
 8004270:	42a3      	cmp	r3, r4
 8004272:	d9fa      	bls.n	800426a <_free_r+0x4e>
 8004274:	6811      	ldr	r1, [r2, #0]
 8004276:	1855      	adds	r5, r2, r1
 8004278:	42a5      	cmp	r5, r4
 800427a:	d10b      	bne.n	8004294 <_free_r+0x78>
 800427c:	6824      	ldr	r4, [r4, #0]
 800427e:	4421      	add	r1, r4
 8004280:	1854      	adds	r4, r2, r1
 8004282:	42a3      	cmp	r3, r4
 8004284:	6011      	str	r1, [r2, #0]
 8004286:	d1dd      	bne.n	8004244 <_free_r+0x28>
 8004288:	681c      	ldr	r4, [r3, #0]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	6053      	str	r3, [r2, #4]
 800428e:	4421      	add	r1, r4
 8004290:	6011      	str	r1, [r2, #0]
 8004292:	e7d7      	b.n	8004244 <_free_r+0x28>
 8004294:	d902      	bls.n	800429c <_free_r+0x80>
 8004296:	230c      	movs	r3, #12
 8004298:	6003      	str	r3, [r0, #0]
 800429a:	e7d3      	b.n	8004244 <_free_r+0x28>
 800429c:	6825      	ldr	r5, [r4, #0]
 800429e:	1961      	adds	r1, r4, r5
 80042a0:	428b      	cmp	r3, r1
 80042a2:	bf04      	itt	eq
 80042a4:	6819      	ldreq	r1, [r3, #0]
 80042a6:	685b      	ldreq	r3, [r3, #4]
 80042a8:	6063      	str	r3, [r4, #4]
 80042aa:	bf04      	itt	eq
 80042ac:	1949      	addeq	r1, r1, r5
 80042ae:	6021      	streq	r1, [r4, #0]
 80042b0:	6054      	str	r4, [r2, #4]
 80042b2:	e7c7      	b.n	8004244 <_free_r+0x28>
 80042b4:	b003      	add	sp, #12
 80042b6:	bd30      	pop	{r4, r5, pc}
 80042b8:	20000090 	.word	0x20000090

080042bc <_malloc_r>:
 80042bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042be:	1ccd      	adds	r5, r1, #3
 80042c0:	f025 0503 	bic.w	r5, r5, #3
 80042c4:	3508      	adds	r5, #8
 80042c6:	2d0c      	cmp	r5, #12
 80042c8:	bf38      	it	cc
 80042ca:	250c      	movcc	r5, #12
 80042cc:	2d00      	cmp	r5, #0
 80042ce:	4606      	mov	r6, r0
 80042d0:	db01      	blt.n	80042d6 <_malloc_r+0x1a>
 80042d2:	42a9      	cmp	r1, r5
 80042d4:	d903      	bls.n	80042de <_malloc_r+0x22>
 80042d6:	230c      	movs	r3, #12
 80042d8:	6033      	str	r3, [r6, #0]
 80042da:	2000      	movs	r0, #0
 80042dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042de:	f000 f87d 	bl	80043dc <__malloc_lock>
 80042e2:	4921      	ldr	r1, [pc, #132]	; (8004368 <_malloc_r+0xac>)
 80042e4:	680a      	ldr	r2, [r1, #0]
 80042e6:	4614      	mov	r4, r2
 80042e8:	b99c      	cbnz	r4, 8004312 <_malloc_r+0x56>
 80042ea:	4f20      	ldr	r7, [pc, #128]	; (800436c <_malloc_r+0xb0>)
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	b923      	cbnz	r3, 80042fa <_malloc_r+0x3e>
 80042f0:	4621      	mov	r1, r4
 80042f2:	4630      	mov	r0, r6
 80042f4:	f000 f862 	bl	80043bc <_sbrk_r>
 80042f8:	6038      	str	r0, [r7, #0]
 80042fa:	4629      	mov	r1, r5
 80042fc:	4630      	mov	r0, r6
 80042fe:	f000 f85d 	bl	80043bc <_sbrk_r>
 8004302:	1c43      	adds	r3, r0, #1
 8004304:	d123      	bne.n	800434e <_malloc_r+0x92>
 8004306:	230c      	movs	r3, #12
 8004308:	6033      	str	r3, [r6, #0]
 800430a:	4630      	mov	r0, r6
 800430c:	f000 f86c 	bl	80043e8 <__malloc_unlock>
 8004310:	e7e3      	b.n	80042da <_malloc_r+0x1e>
 8004312:	6823      	ldr	r3, [r4, #0]
 8004314:	1b5b      	subs	r3, r3, r5
 8004316:	d417      	bmi.n	8004348 <_malloc_r+0x8c>
 8004318:	2b0b      	cmp	r3, #11
 800431a:	d903      	bls.n	8004324 <_malloc_r+0x68>
 800431c:	6023      	str	r3, [r4, #0]
 800431e:	441c      	add	r4, r3
 8004320:	6025      	str	r5, [r4, #0]
 8004322:	e004      	b.n	800432e <_malloc_r+0x72>
 8004324:	6863      	ldr	r3, [r4, #4]
 8004326:	42a2      	cmp	r2, r4
 8004328:	bf0c      	ite	eq
 800432a:	600b      	streq	r3, [r1, #0]
 800432c:	6053      	strne	r3, [r2, #4]
 800432e:	4630      	mov	r0, r6
 8004330:	f000 f85a 	bl	80043e8 <__malloc_unlock>
 8004334:	f104 000b 	add.w	r0, r4, #11
 8004338:	1d23      	adds	r3, r4, #4
 800433a:	f020 0007 	bic.w	r0, r0, #7
 800433e:	1ac2      	subs	r2, r0, r3
 8004340:	d0cc      	beq.n	80042dc <_malloc_r+0x20>
 8004342:	1a1b      	subs	r3, r3, r0
 8004344:	50a3      	str	r3, [r4, r2]
 8004346:	e7c9      	b.n	80042dc <_malloc_r+0x20>
 8004348:	4622      	mov	r2, r4
 800434a:	6864      	ldr	r4, [r4, #4]
 800434c:	e7cc      	b.n	80042e8 <_malloc_r+0x2c>
 800434e:	1cc4      	adds	r4, r0, #3
 8004350:	f024 0403 	bic.w	r4, r4, #3
 8004354:	42a0      	cmp	r0, r4
 8004356:	d0e3      	beq.n	8004320 <_malloc_r+0x64>
 8004358:	1a21      	subs	r1, r4, r0
 800435a:	4630      	mov	r0, r6
 800435c:	f000 f82e 	bl	80043bc <_sbrk_r>
 8004360:	3001      	adds	r0, #1
 8004362:	d1dd      	bne.n	8004320 <_malloc_r+0x64>
 8004364:	e7cf      	b.n	8004306 <_malloc_r+0x4a>
 8004366:	bf00      	nop
 8004368:	20000090 	.word	0x20000090
 800436c:	20000094 	.word	0x20000094

08004370 <_realloc_r>:
 8004370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004372:	4607      	mov	r7, r0
 8004374:	4614      	mov	r4, r2
 8004376:	460e      	mov	r6, r1
 8004378:	b921      	cbnz	r1, 8004384 <_realloc_r+0x14>
 800437a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800437e:	4611      	mov	r1, r2
 8004380:	f7ff bf9c 	b.w	80042bc <_malloc_r>
 8004384:	b922      	cbnz	r2, 8004390 <_realloc_r+0x20>
 8004386:	f7ff ff49 	bl	800421c <_free_r>
 800438a:	4625      	mov	r5, r4
 800438c:	4628      	mov	r0, r5
 800438e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004390:	f000 f830 	bl	80043f4 <_malloc_usable_size_r>
 8004394:	42a0      	cmp	r0, r4
 8004396:	d20f      	bcs.n	80043b8 <_realloc_r+0x48>
 8004398:	4621      	mov	r1, r4
 800439a:	4638      	mov	r0, r7
 800439c:	f7ff ff8e 	bl	80042bc <_malloc_r>
 80043a0:	4605      	mov	r5, r0
 80043a2:	2800      	cmp	r0, #0
 80043a4:	d0f2      	beq.n	800438c <_realloc_r+0x1c>
 80043a6:	4631      	mov	r1, r6
 80043a8:	4622      	mov	r2, r4
 80043aa:	f7ff ff0f 	bl	80041cc <memcpy>
 80043ae:	4631      	mov	r1, r6
 80043b0:	4638      	mov	r0, r7
 80043b2:	f7ff ff33 	bl	800421c <_free_r>
 80043b6:	e7e9      	b.n	800438c <_realloc_r+0x1c>
 80043b8:	4635      	mov	r5, r6
 80043ba:	e7e7      	b.n	800438c <_realloc_r+0x1c>

080043bc <_sbrk_r>:
 80043bc:	b538      	push	{r3, r4, r5, lr}
 80043be:	4d06      	ldr	r5, [pc, #24]	; (80043d8 <_sbrk_r+0x1c>)
 80043c0:	2300      	movs	r3, #0
 80043c2:	4604      	mov	r4, r0
 80043c4:	4608      	mov	r0, r1
 80043c6:	602b      	str	r3, [r5, #0]
 80043c8:	f7fd f820 	bl	800140c <_sbrk>
 80043cc:	1c43      	adds	r3, r0, #1
 80043ce:	d102      	bne.n	80043d6 <_sbrk_r+0x1a>
 80043d0:	682b      	ldr	r3, [r5, #0]
 80043d2:	b103      	cbz	r3, 80043d6 <_sbrk_r+0x1a>
 80043d4:	6023      	str	r3, [r4, #0]
 80043d6:	bd38      	pop	{r3, r4, r5, pc}
 80043d8:	20000204 	.word	0x20000204

080043dc <__malloc_lock>:
 80043dc:	4801      	ldr	r0, [pc, #4]	; (80043e4 <__malloc_lock+0x8>)
 80043de:	f000 b811 	b.w	8004404 <__retarget_lock_acquire_recursive>
 80043e2:	bf00      	nop
 80043e4:	2000020c 	.word	0x2000020c

080043e8 <__malloc_unlock>:
 80043e8:	4801      	ldr	r0, [pc, #4]	; (80043f0 <__malloc_unlock+0x8>)
 80043ea:	f000 b80c 	b.w	8004406 <__retarget_lock_release_recursive>
 80043ee:	bf00      	nop
 80043f0:	2000020c 	.word	0x2000020c

080043f4 <_malloc_usable_size_r>:
 80043f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043f8:	1f18      	subs	r0, r3, #4
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	bfbc      	itt	lt
 80043fe:	580b      	ldrlt	r3, [r1, r0]
 8004400:	18c0      	addlt	r0, r0, r3
 8004402:	4770      	bx	lr

08004404 <__retarget_lock_acquire_recursive>:
 8004404:	4770      	bx	lr

08004406 <__retarget_lock_release_recursive>:
 8004406:	4770      	bx	lr

08004408 <_init>:
 8004408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800440a:	bf00      	nop
 800440c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800440e:	bc08      	pop	{r3}
 8004410:	469e      	mov	lr, r3
 8004412:	4770      	bx	lr

08004414 <_fini>:
 8004414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004416:	bf00      	nop
 8004418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800441a:	bc08      	pop	{r3}
 800441c:	469e      	mov	lr, r3
 800441e:	4770      	bx	lr
