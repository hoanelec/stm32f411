
6_MQ2_Gas_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e98  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08004038  08004038  00014038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004104  08004104  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004104  08004104  00014104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800410c  0800410c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800410c  0800410c  0001410c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004110  08004110  00014110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004114  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  20000070  08004184  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000214  08004184  00020214  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a2cf  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b82  00000000  00000000  0002a36f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000800  00000000  00000000  0002bef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000758  00000000  00000000  0002c6f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f7e  00000000  00000000  0002ce50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000099a4  00000000  00000000  00043dce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000916b1  00000000  00000000  0004d772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dee23  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002510  00000000  00000000  000dee78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004020 	.word	0x08004020

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08004020 	.word	0x08004020

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__gedf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpdf2+0x4>
 800060e:	bf00      	nop

08000610 <__ledf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpdf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpdf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000624:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000628:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800062c:	bf18      	it	ne
 800062e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000632:	d01b      	beq.n	800066c <__cmpdf2+0x54>
 8000634:	b001      	add	sp, #4
 8000636:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800063a:	bf0c      	ite	eq
 800063c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000640:	ea91 0f03 	teqne	r1, r3
 8000644:	bf02      	ittt	eq
 8000646:	ea90 0f02 	teqeq	r0, r2
 800064a:	2000      	moveq	r0, #0
 800064c:	4770      	bxeq	lr
 800064e:	f110 0f00 	cmn.w	r0, #0
 8000652:	ea91 0f03 	teq	r1, r3
 8000656:	bf58      	it	pl
 8000658:	4299      	cmppl	r1, r3
 800065a:	bf08      	it	eq
 800065c:	4290      	cmpeq	r0, r2
 800065e:	bf2c      	ite	cs
 8000660:	17d8      	asrcs	r0, r3, #31
 8000662:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000666:	f040 0001 	orr.w	r0, r0, #1
 800066a:	4770      	bx	lr
 800066c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000670:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000674:	d102      	bne.n	800067c <__cmpdf2+0x64>
 8000676:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800067a:	d107      	bne.n	800068c <__cmpdf2+0x74>
 800067c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000680:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000684:	d1d6      	bne.n	8000634 <__cmpdf2+0x1c>
 8000686:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800068a:	d0d3      	beq.n	8000634 <__cmpdf2+0x1c>
 800068c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <__aeabi_cdrcmple>:
 8000694:	4684      	mov	ip, r0
 8000696:	4610      	mov	r0, r2
 8000698:	4662      	mov	r2, ip
 800069a:	468c      	mov	ip, r1
 800069c:	4619      	mov	r1, r3
 800069e:	4663      	mov	r3, ip
 80006a0:	e000      	b.n	80006a4 <__aeabi_cdcmpeq>
 80006a2:	bf00      	nop

080006a4 <__aeabi_cdcmpeq>:
 80006a4:	b501      	push	{r0, lr}
 80006a6:	f7ff ffb7 	bl	8000618 <__cmpdf2>
 80006aa:	2800      	cmp	r0, #0
 80006ac:	bf48      	it	mi
 80006ae:	f110 0f00 	cmnmi.w	r0, #0
 80006b2:	bd01      	pop	{r0, pc}

080006b4 <__aeabi_dcmpeq>:
 80006b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006b8:	f7ff fff4 	bl	80006a4 <__aeabi_cdcmpeq>
 80006bc:	bf0c      	ite	eq
 80006be:	2001      	moveq	r0, #1
 80006c0:	2000      	movne	r0, #0
 80006c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006c6:	bf00      	nop

080006c8 <__aeabi_dcmplt>:
 80006c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006cc:	f7ff ffea 	bl	80006a4 <__aeabi_cdcmpeq>
 80006d0:	bf34      	ite	cc
 80006d2:	2001      	movcc	r0, #1
 80006d4:	2000      	movcs	r0, #0
 80006d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006da:	bf00      	nop

080006dc <__aeabi_dcmple>:
 80006dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e0:	f7ff ffe0 	bl	80006a4 <__aeabi_cdcmpeq>
 80006e4:	bf94      	ite	ls
 80006e6:	2001      	movls	r0, #1
 80006e8:	2000      	movhi	r0, #0
 80006ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ee:	bf00      	nop

080006f0 <__aeabi_dcmpge>:
 80006f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f4:	f7ff ffce 	bl	8000694 <__aeabi_cdrcmple>
 80006f8:	bf94      	ite	ls
 80006fa:	2001      	movls	r0, #1
 80006fc:	2000      	movhi	r0, #0
 80006fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000702:	bf00      	nop

08000704 <__aeabi_dcmpgt>:
 8000704:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000708:	f7ff ffc4 	bl	8000694 <__aeabi_cdrcmple>
 800070c:	bf34      	ite	cc
 800070e:	2001      	movcc	r0, #1
 8000710:	2000      	movcs	r0, #0
 8000712:	f85d fb08 	ldr.w	pc, [sp], #8
 8000716:	bf00      	nop

08000718 <__aeabi_uldivmod>:
 8000718:	b953      	cbnz	r3, 8000730 <__aeabi_uldivmod+0x18>
 800071a:	b94a      	cbnz	r2, 8000730 <__aeabi_uldivmod+0x18>
 800071c:	2900      	cmp	r1, #0
 800071e:	bf08      	it	eq
 8000720:	2800      	cmpeq	r0, #0
 8000722:	bf1c      	itt	ne
 8000724:	f04f 31ff 	movne.w	r1, #4294967295
 8000728:	f04f 30ff 	movne.w	r0, #4294967295
 800072c:	f000 b96e 	b.w	8000a0c <__aeabi_idiv0>
 8000730:	f1ad 0c08 	sub.w	ip, sp, #8
 8000734:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000738:	f000 f806 	bl	8000748 <__udivmoddi4>
 800073c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000740:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000744:	b004      	add	sp, #16
 8000746:	4770      	bx	lr

08000748 <__udivmoddi4>:
 8000748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800074c:	9d08      	ldr	r5, [sp, #32]
 800074e:	4604      	mov	r4, r0
 8000750:	468c      	mov	ip, r1
 8000752:	2b00      	cmp	r3, #0
 8000754:	f040 8083 	bne.w	800085e <__udivmoddi4+0x116>
 8000758:	428a      	cmp	r2, r1
 800075a:	4617      	mov	r7, r2
 800075c:	d947      	bls.n	80007ee <__udivmoddi4+0xa6>
 800075e:	fab2 f282 	clz	r2, r2
 8000762:	b142      	cbz	r2, 8000776 <__udivmoddi4+0x2e>
 8000764:	f1c2 0020 	rsb	r0, r2, #32
 8000768:	fa24 f000 	lsr.w	r0, r4, r0
 800076c:	4091      	lsls	r1, r2
 800076e:	4097      	lsls	r7, r2
 8000770:	ea40 0c01 	orr.w	ip, r0, r1
 8000774:	4094      	lsls	r4, r2
 8000776:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800077a:	0c23      	lsrs	r3, r4, #16
 800077c:	fbbc f6f8 	udiv	r6, ip, r8
 8000780:	fa1f fe87 	uxth.w	lr, r7
 8000784:	fb08 c116 	mls	r1, r8, r6, ip
 8000788:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800078c:	fb06 f10e 	mul.w	r1, r6, lr
 8000790:	4299      	cmp	r1, r3
 8000792:	d909      	bls.n	80007a8 <__udivmoddi4+0x60>
 8000794:	18fb      	adds	r3, r7, r3
 8000796:	f106 30ff 	add.w	r0, r6, #4294967295
 800079a:	f080 8119 	bcs.w	80009d0 <__udivmoddi4+0x288>
 800079e:	4299      	cmp	r1, r3
 80007a0:	f240 8116 	bls.w	80009d0 <__udivmoddi4+0x288>
 80007a4:	3e02      	subs	r6, #2
 80007a6:	443b      	add	r3, r7
 80007a8:	1a5b      	subs	r3, r3, r1
 80007aa:	b2a4      	uxth	r4, r4
 80007ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80007b0:	fb08 3310 	mls	r3, r8, r0, r3
 80007b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80007b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80007bc:	45a6      	cmp	lr, r4
 80007be:	d909      	bls.n	80007d4 <__udivmoddi4+0x8c>
 80007c0:	193c      	adds	r4, r7, r4
 80007c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80007c6:	f080 8105 	bcs.w	80009d4 <__udivmoddi4+0x28c>
 80007ca:	45a6      	cmp	lr, r4
 80007cc:	f240 8102 	bls.w	80009d4 <__udivmoddi4+0x28c>
 80007d0:	3802      	subs	r0, #2
 80007d2:	443c      	add	r4, r7
 80007d4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007d8:	eba4 040e 	sub.w	r4, r4, lr
 80007dc:	2600      	movs	r6, #0
 80007de:	b11d      	cbz	r5, 80007e8 <__udivmoddi4+0xa0>
 80007e0:	40d4      	lsrs	r4, r2
 80007e2:	2300      	movs	r3, #0
 80007e4:	e9c5 4300 	strd	r4, r3, [r5]
 80007e8:	4631      	mov	r1, r6
 80007ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ee:	b902      	cbnz	r2, 80007f2 <__udivmoddi4+0xaa>
 80007f0:	deff      	udf	#255	; 0xff
 80007f2:	fab2 f282 	clz	r2, r2
 80007f6:	2a00      	cmp	r2, #0
 80007f8:	d150      	bne.n	800089c <__udivmoddi4+0x154>
 80007fa:	1bcb      	subs	r3, r1, r7
 80007fc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000800:	fa1f f887 	uxth.w	r8, r7
 8000804:	2601      	movs	r6, #1
 8000806:	fbb3 fcfe 	udiv	ip, r3, lr
 800080a:	0c21      	lsrs	r1, r4, #16
 800080c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000810:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000814:	fb08 f30c 	mul.w	r3, r8, ip
 8000818:	428b      	cmp	r3, r1
 800081a:	d907      	bls.n	800082c <__udivmoddi4+0xe4>
 800081c:	1879      	adds	r1, r7, r1
 800081e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000822:	d202      	bcs.n	800082a <__udivmoddi4+0xe2>
 8000824:	428b      	cmp	r3, r1
 8000826:	f200 80e9 	bhi.w	80009fc <__udivmoddi4+0x2b4>
 800082a:	4684      	mov	ip, r0
 800082c:	1ac9      	subs	r1, r1, r3
 800082e:	b2a3      	uxth	r3, r4
 8000830:	fbb1 f0fe 	udiv	r0, r1, lr
 8000834:	fb0e 1110 	mls	r1, lr, r0, r1
 8000838:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800083c:	fb08 f800 	mul.w	r8, r8, r0
 8000840:	45a0      	cmp	r8, r4
 8000842:	d907      	bls.n	8000854 <__udivmoddi4+0x10c>
 8000844:	193c      	adds	r4, r7, r4
 8000846:	f100 33ff 	add.w	r3, r0, #4294967295
 800084a:	d202      	bcs.n	8000852 <__udivmoddi4+0x10a>
 800084c:	45a0      	cmp	r8, r4
 800084e:	f200 80d9 	bhi.w	8000a04 <__udivmoddi4+0x2bc>
 8000852:	4618      	mov	r0, r3
 8000854:	eba4 0408 	sub.w	r4, r4, r8
 8000858:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800085c:	e7bf      	b.n	80007de <__udivmoddi4+0x96>
 800085e:	428b      	cmp	r3, r1
 8000860:	d909      	bls.n	8000876 <__udivmoddi4+0x12e>
 8000862:	2d00      	cmp	r5, #0
 8000864:	f000 80b1 	beq.w	80009ca <__udivmoddi4+0x282>
 8000868:	2600      	movs	r6, #0
 800086a:	e9c5 0100 	strd	r0, r1, [r5]
 800086e:	4630      	mov	r0, r6
 8000870:	4631      	mov	r1, r6
 8000872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000876:	fab3 f683 	clz	r6, r3
 800087a:	2e00      	cmp	r6, #0
 800087c:	d14a      	bne.n	8000914 <__udivmoddi4+0x1cc>
 800087e:	428b      	cmp	r3, r1
 8000880:	d302      	bcc.n	8000888 <__udivmoddi4+0x140>
 8000882:	4282      	cmp	r2, r0
 8000884:	f200 80b8 	bhi.w	80009f8 <__udivmoddi4+0x2b0>
 8000888:	1a84      	subs	r4, r0, r2
 800088a:	eb61 0103 	sbc.w	r1, r1, r3
 800088e:	2001      	movs	r0, #1
 8000890:	468c      	mov	ip, r1
 8000892:	2d00      	cmp	r5, #0
 8000894:	d0a8      	beq.n	80007e8 <__udivmoddi4+0xa0>
 8000896:	e9c5 4c00 	strd	r4, ip, [r5]
 800089a:	e7a5      	b.n	80007e8 <__udivmoddi4+0xa0>
 800089c:	f1c2 0320 	rsb	r3, r2, #32
 80008a0:	fa20 f603 	lsr.w	r6, r0, r3
 80008a4:	4097      	lsls	r7, r2
 80008a6:	fa01 f002 	lsl.w	r0, r1, r2
 80008aa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008ae:	40d9      	lsrs	r1, r3
 80008b0:	4330      	orrs	r0, r6
 80008b2:	0c03      	lsrs	r3, r0, #16
 80008b4:	fbb1 f6fe 	udiv	r6, r1, lr
 80008b8:	fa1f f887 	uxth.w	r8, r7
 80008bc:	fb0e 1116 	mls	r1, lr, r6, r1
 80008c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008c4:	fb06 f108 	mul.w	r1, r6, r8
 80008c8:	4299      	cmp	r1, r3
 80008ca:	fa04 f402 	lsl.w	r4, r4, r2
 80008ce:	d909      	bls.n	80008e4 <__udivmoddi4+0x19c>
 80008d0:	18fb      	adds	r3, r7, r3
 80008d2:	f106 3cff 	add.w	ip, r6, #4294967295
 80008d6:	f080 808d 	bcs.w	80009f4 <__udivmoddi4+0x2ac>
 80008da:	4299      	cmp	r1, r3
 80008dc:	f240 808a 	bls.w	80009f4 <__udivmoddi4+0x2ac>
 80008e0:	3e02      	subs	r6, #2
 80008e2:	443b      	add	r3, r7
 80008e4:	1a5b      	subs	r3, r3, r1
 80008e6:	b281      	uxth	r1, r0
 80008e8:	fbb3 f0fe 	udiv	r0, r3, lr
 80008ec:	fb0e 3310 	mls	r3, lr, r0, r3
 80008f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008f4:	fb00 f308 	mul.w	r3, r0, r8
 80008f8:	428b      	cmp	r3, r1
 80008fa:	d907      	bls.n	800090c <__udivmoddi4+0x1c4>
 80008fc:	1879      	adds	r1, r7, r1
 80008fe:	f100 3cff 	add.w	ip, r0, #4294967295
 8000902:	d273      	bcs.n	80009ec <__udivmoddi4+0x2a4>
 8000904:	428b      	cmp	r3, r1
 8000906:	d971      	bls.n	80009ec <__udivmoddi4+0x2a4>
 8000908:	3802      	subs	r0, #2
 800090a:	4439      	add	r1, r7
 800090c:	1acb      	subs	r3, r1, r3
 800090e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000912:	e778      	b.n	8000806 <__udivmoddi4+0xbe>
 8000914:	f1c6 0c20 	rsb	ip, r6, #32
 8000918:	fa03 f406 	lsl.w	r4, r3, r6
 800091c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000920:	431c      	orrs	r4, r3
 8000922:	fa20 f70c 	lsr.w	r7, r0, ip
 8000926:	fa01 f306 	lsl.w	r3, r1, r6
 800092a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800092e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000932:	431f      	orrs	r7, r3
 8000934:	0c3b      	lsrs	r3, r7, #16
 8000936:	fbb1 f9fe 	udiv	r9, r1, lr
 800093a:	fa1f f884 	uxth.w	r8, r4
 800093e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000942:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000946:	fb09 fa08 	mul.w	sl, r9, r8
 800094a:	458a      	cmp	sl, r1
 800094c:	fa02 f206 	lsl.w	r2, r2, r6
 8000950:	fa00 f306 	lsl.w	r3, r0, r6
 8000954:	d908      	bls.n	8000968 <__udivmoddi4+0x220>
 8000956:	1861      	adds	r1, r4, r1
 8000958:	f109 30ff 	add.w	r0, r9, #4294967295
 800095c:	d248      	bcs.n	80009f0 <__udivmoddi4+0x2a8>
 800095e:	458a      	cmp	sl, r1
 8000960:	d946      	bls.n	80009f0 <__udivmoddi4+0x2a8>
 8000962:	f1a9 0902 	sub.w	r9, r9, #2
 8000966:	4421      	add	r1, r4
 8000968:	eba1 010a 	sub.w	r1, r1, sl
 800096c:	b2bf      	uxth	r7, r7
 800096e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000972:	fb0e 1110 	mls	r1, lr, r0, r1
 8000976:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800097a:	fb00 f808 	mul.w	r8, r0, r8
 800097e:	45b8      	cmp	r8, r7
 8000980:	d907      	bls.n	8000992 <__udivmoddi4+0x24a>
 8000982:	19e7      	adds	r7, r4, r7
 8000984:	f100 31ff 	add.w	r1, r0, #4294967295
 8000988:	d22e      	bcs.n	80009e8 <__udivmoddi4+0x2a0>
 800098a:	45b8      	cmp	r8, r7
 800098c:	d92c      	bls.n	80009e8 <__udivmoddi4+0x2a0>
 800098e:	3802      	subs	r0, #2
 8000990:	4427      	add	r7, r4
 8000992:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000996:	eba7 0708 	sub.w	r7, r7, r8
 800099a:	fba0 8902 	umull	r8, r9, r0, r2
 800099e:	454f      	cmp	r7, r9
 80009a0:	46c6      	mov	lr, r8
 80009a2:	4649      	mov	r1, r9
 80009a4:	d31a      	bcc.n	80009dc <__udivmoddi4+0x294>
 80009a6:	d017      	beq.n	80009d8 <__udivmoddi4+0x290>
 80009a8:	b15d      	cbz	r5, 80009c2 <__udivmoddi4+0x27a>
 80009aa:	ebb3 020e 	subs.w	r2, r3, lr
 80009ae:	eb67 0701 	sbc.w	r7, r7, r1
 80009b2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80009b6:	40f2      	lsrs	r2, r6
 80009b8:	ea4c 0202 	orr.w	r2, ip, r2
 80009bc:	40f7      	lsrs	r7, r6
 80009be:	e9c5 2700 	strd	r2, r7, [r5]
 80009c2:	2600      	movs	r6, #0
 80009c4:	4631      	mov	r1, r6
 80009c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009ca:	462e      	mov	r6, r5
 80009cc:	4628      	mov	r0, r5
 80009ce:	e70b      	b.n	80007e8 <__udivmoddi4+0xa0>
 80009d0:	4606      	mov	r6, r0
 80009d2:	e6e9      	b.n	80007a8 <__udivmoddi4+0x60>
 80009d4:	4618      	mov	r0, r3
 80009d6:	e6fd      	b.n	80007d4 <__udivmoddi4+0x8c>
 80009d8:	4543      	cmp	r3, r8
 80009da:	d2e5      	bcs.n	80009a8 <__udivmoddi4+0x260>
 80009dc:	ebb8 0e02 	subs.w	lr, r8, r2
 80009e0:	eb69 0104 	sbc.w	r1, r9, r4
 80009e4:	3801      	subs	r0, #1
 80009e6:	e7df      	b.n	80009a8 <__udivmoddi4+0x260>
 80009e8:	4608      	mov	r0, r1
 80009ea:	e7d2      	b.n	8000992 <__udivmoddi4+0x24a>
 80009ec:	4660      	mov	r0, ip
 80009ee:	e78d      	b.n	800090c <__udivmoddi4+0x1c4>
 80009f0:	4681      	mov	r9, r0
 80009f2:	e7b9      	b.n	8000968 <__udivmoddi4+0x220>
 80009f4:	4666      	mov	r6, ip
 80009f6:	e775      	b.n	80008e4 <__udivmoddi4+0x19c>
 80009f8:	4630      	mov	r0, r6
 80009fa:	e74a      	b.n	8000892 <__udivmoddi4+0x14a>
 80009fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a00:	4439      	add	r1, r7
 8000a02:	e713      	b.n	800082c <__udivmoddi4+0xe4>
 8000a04:	3802      	subs	r0, #2
 8000a06:	443c      	add	r4, r7
 8000a08:	e724      	b.n	8000854 <__udivmoddi4+0x10c>
 8000a0a:	bf00      	nop

08000a0c <__aeabi_idiv0>:
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <SendUnsignedNumber>:
#include "Uart.h"
void SendUnsignedNumber(uint32_t number,UART_HandleTypeDef _huart)
{
 8000a10:	b084      	sub	sp, #16
 8000a12:	b580      	push	{r7, lr}
 8000a14:	b084      	sub	sp, #16
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	6078      	str	r0, [r7, #4]
 8000a1a:	f107 001c 	add.w	r0, r7, #28
 8000a1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	memset(uartBuffer,0,50);
 8000a22:	2232      	movs	r2, #50	; 0x32
 8000a24:	2100      	movs	r1, #0
 8000a26:	480d      	ldr	r0, [pc, #52]	; (8000a5c <SendUnsignedNumber+0x4c>)
 8000a28:	f002 fec4 	bl	80037b4 <memset>
	uint8_t l = sprintf(uartBuffer,"%lu",number);
 8000a2c:	687a      	ldr	r2, [r7, #4]
 8000a2e:	490c      	ldr	r1, [pc, #48]	; (8000a60 <SendUnsignedNumber+0x50>)
 8000a30:	480a      	ldr	r0, [pc, #40]	; (8000a5c <SendUnsignedNumber+0x4c>)
 8000a32:	f002 fec7 	bl	80037c4 <siprintf>
 8000a36:	4603      	mov	r3, r0
 8000a38:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&_huart, (uint8_t *)uartBuffer, l, 500);
 8000a3a:	7bfb      	ldrb	r3, [r7, #15]
 8000a3c:	b29a      	uxth	r2, r3
 8000a3e:	f107 001c 	add.w	r0, r7, #28
 8000a42:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000a46:	4905      	ldr	r1, [pc, #20]	; (8000a5c <SendUnsignedNumber+0x4c>)
 8000a48:	f002 fbe5 	bl	8003216 <HAL_UART_Transmit>
}
 8000a4c:	bf00      	nop
 8000a4e:	3710      	adds	r7, #16
 8000a50:	46bd      	mov	sp, r7
 8000a52:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a56:	b004      	add	sp, #16
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	20000120 	.word	0x20000120
 8000a60:	08004038 	.word	0x08004038

08000a64 <SendConstChar>:
void SendConstChar(const char* constChar,UART_HandleTypeDef _huart)
{
 8000a64:	b084      	sub	sp, #16
 8000a66:	b580      	push	{r7, lr}
 8000a68:	b082      	sub	sp, #8
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	6078      	str	r0, [r7, #4]
 8000a6e:	f107 0014 	add.w	r0, r7, #20
 8000a72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	memset(uartBuffer,0,50);
 8000a76:	2232      	movs	r2, #50	; 0x32
 8000a78:	2100      	movs	r1, #0
 8000a7a:	480a      	ldr	r0, [pc, #40]	; (8000aa4 <SendConstChar+0x40>)
 8000a7c:	f002 fe9a 	bl	80037b4 <memset>
	HAL_UART_Transmit(&_huart,(uint8_t *)constChar,strlen((const char*)constChar),200);
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f7ff fbad 	bl	80001e0 <strlen>
 8000a86:	4603      	mov	r3, r0
 8000a88:	b29a      	uxth	r2, r3
 8000a8a:	f107 0014 	add.w	r0, r7, #20
 8000a8e:	23c8      	movs	r3, #200	; 0xc8
 8000a90:	6879      	ldr	r1, [r7, #4]
 8000a92:	f002 fbc0 	bl	8003216 <HAL_UART_Transmit>
}
 8000a96:	bf00      	nop
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000aa0:	b004      	add	sp, #16
 8000aa2:	4770      	bx	lr
 8000aa4:	20000120 	.word	0x20000120

08000aa8 <SendFloat>:
void SendFloat(float num,UART_HandleTypeDef _huart)
{
 8000aa8:	b084      	sub	sp, #16
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b086      	sub	sp, #24
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	ed87 0a01 	vstr	s0, [r7, #4]
 8000ab4:	f107 0c20 	add.w	ip, r7, #32
 8000ab8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memset(uartBuffer,0,50);
 8000abc:	2232      	movs	r2, #50	; 0x32
 8000abe:	2100      	movs	r1, #0
 8000ac0:	481f      	ldr	r0, [pc, #124]	; (8000b40 <SendFloat+0x98>)
 8000ac2:	f002 fe77 	bl	80037b4 <memset>
	uint16_t intPart = (uint16_t)num;
 8000ac6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000aca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ace:	ee17 3a90 	vmov	r3, s15
 8000ad2:	82fb      	strh	r3, [r7, #22]
	float  decPart  = (float )num - intPart;
 8000ad4:	8afb      	ldrh	r3, [r7, #22]
 8000ad6:	ee07 3a90 	vmov	s15, r3
 8000ada:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ade:	ed97 7a01 	vldr	s14, [r7, #4]
 8000ae2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ae6:	edc7 7a04 	vstr	s15, [r7, #16]
	uint16_t decPart2 = (decPart*100)/10;
 8000aea:	edd7 7a04 	vldr	s15, [r7, #16]
 8000aee:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000b44 <SendFloat+0x9c>
 8000af2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000af6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000afa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000afe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b02:	ee17 3a90 	vmov	r3, s15
 8000b06:	81fb      	strh	r3, [r7, #14]
	sprintf(uartBuffer,"%d.%d",intPart,decPart2);
 8000b08:	8afa      	ldrh	r2, [r7, #22]
 8000b0a:	89fb      	ldrh	r3, [r7, #14]
 8000b0c:	490e      	ldr	r1, [pc, #56]	; (8000b48 <SendFloat+0xa0>)
 8000b0e:	480c      	ldr	r0, [pc, #48]	; (8000b40 <SendFloat+0x98>)
 8000b10:	f002 fe58 	bl	80037c4 <siprintf>
	HAL_UART_Transmit(&_huart, (uint8_t *)uartBuffer, sprintf(uartBuffer,"%d.%d",intPart,decPart2), 400);
 8000b14:	8afa      	ldrh	r2, [r7, #22]
 8000b16:	89fb      	ldrh	r3, [r7, #14]
 8000b18:	490b      	ldr	r1, [pc, #44]	; (8000b48 <SendFloat+0xa0>)
 8000b1a:	4809      	ldr	r0, [pc, #36]	; (8000b40 <SendFloat+0x98>)
 8000b1c:	f002 fe52 	bl	80037c4 <siprintf>
 8000b20:	4603      	mov	r3, r0
 8000b22:	b29a      	uxth	r2, r3
 8000b24:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000b28:	4905      	ldr	r1, [pc, #20]	; (8000b40 <SendFloat+0x98>)
 8000b2a:	f107 0020 	add.w	r0, r7, #32
 8000b2e:	f002 fb72 	bl	8003216 <HAL_UART_Transmit>
}
 8000b32:	bf00      	nop
 8000b34:	3718      	adds	r7, #24
 8000b36:	46bd      	mov	sp, r7
 8000b38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b3c:	b004      	add	sp, #16
 8000b3e:	4770      	bx	lr
 8000b40:	20000120 	.word	0x20000120
 8000b44:	42c80000 	.word	0x42c80000
 8000b48:	0800403c 	.word	0x0800403c

08000b4c <SendFloatLn>:
void SendFloatLn(float num,UART_HandleTypeDef _huart)
{
 8000b4c:	b084      	sub	sp, #16
 8000b4e:	b5b0      	push	{r4, r5, r7, lr}
 8000b50:	b090      	sub	sp, #64	; 0x40
 8000b52:	af0e      	add	r7, sp, #56	; 0x38
 8000b54:	ed87 0a01 	vstr	s0, [r7, #4]
 8000b58:	f107 0418 	add.w	r4, r7, #24
 8000b5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	memset(uartBuffer,0,50);
 8000b60:	2232      	movs	r2, #50	; 0x32
 8000b62:	2100      	movs	r1, #0
 8000b64:	4811      	ldr	r0, [pc, #68]	; (8000bac <SendFloatLn+0x60>)
 8000b66:	f002 fe25 	bl	80037b4 <memset>
	SendFloat(num,_huart);
 8000b6a:	466d      	mov	r5, sp
 8000b6c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8000b70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b7c:	6823      	ldr	r3, [r4, #0]
 8000b7e:	602b      	str	r3, [r5, #0]
 8000b80:	f107 0318 	add.w	r3, r7, #24
 8000b84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b86:	ed97 0a01 	vldr	s0, [r7, #4]
 8000b8a:	f7ff ff8d 	bl	8000aa8 <SendFloat>
	HAL_UART_Transmit(&_huart, (uint8_t *)"\n", 2, 50);
 8000b8e:	2332      	movs	r3, #50	; 0x32
 8000b90:	2202      	movs	r2, #2
 8000b92:	4907      	ldr	r1, [pc, #28]	; (8000bb0 <SendFloatLn+0x64>)
 8000b94:	f107 0018 	add.w	r0, r7, #24
 8000b98:	f002 fb3d 	bl	8003216 <HAL_UART_Transmit>
}
 8000b9c:	bf00      	nop
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000ba6:	b004      	add	sp, #16
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	20000120 	.word	0x20000120
 8000bb0:	08004044 	.word	0x08004044
 8000bb4:	00000000 	.word	0x00000000

08000bb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bba:	b095      	sub	sp, #84	; 0x54
 8000bbc:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bbe:	f000 fbf7 	bl	80013b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bc2:	f000 f935 	bl	8000e30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bc6:	f000 fa37 	bl	8001038 <MX_GPIO_Init>
  MX_DMA_Init();
 8000bca:	f000 fa15 	bl	8000ff8 <MX_DMA_Init>
  MX_ADC1_Init();
 8000bce:	f000 f997 	bl	8000f00 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000bd2:	f000 f9e7 	bl	8000fa4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_ADC_Start_DMA(&hadc1, adc, 1);
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	4989      	ldr	r1, [pc, #548]	; (8000e00 <main+0x248>)
 8000bda:	488a      	ldr	r0, [pc, #552]	; (8000e04 <main+0x24c>)
 8000bdc:	f000 fcc2 	bl	8001564 <HAL_ADC_Start_DMA>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		float virtueVoltage = *adc*3.3f/4095;
 8000be0:	4b87      	ldr	r3, [pc, #540]	; (8000e00 <main+0x248>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	ee07 3a90 	vmov	s15, r3
 8000be8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000bec:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8000e08 <main+0x250>
 8000bf0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000bf4:	eddf 6a85 	vldr	s13, [pc, #532]	; 8000e0c <main+0x254>
 8000bf8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bfc:	edc7 7a05 	vstr	s15, [r7, #20]
		float realisticVoltage = 1.67f*virtueVoltage;
 8000c00:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c04:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8000e10 <main+0x258>
 8000c08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c0c:	edc7 7a04 	vstr	s15, [r7, #16]
		uint16_t realisticAdc = realisticVoltage*4095/5 ;//Vin = Vref*adc/4098
 8000c10:	edd7 7a04 	vldr	s15, [r7, #16]
 8000c14:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8000e0c <main+0x254>
 8000c18:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000c1c:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8000c20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c28:	ee17 3a90 	vmov	r3, s15
 8000c2c:	81fb      	strh	r3, [r7, #14]

		SendConstChar("virtue ADC: ", huart2);
 8000c2e:	4e79      	ldr	r6, [pc, #484]	; (8000e14 <main+0x25c>)
 8000c30:	466d      	mov	r5, sp
 8000c32:	f106 040c 	add.w	r4, r6, #12
 8000c36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c42:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000c46:	e885 0003 	stmia.w	r5, {r0, r1}
 8000c4a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000c4e:	4872      	ldr	r0, [pc, #456]	; (8000e18 <main+0x260>)
 8000c50:	f7ff ff08 	bl	8000a64 <SendConstChar>
		SendUnsignedNumber(*adc, huart2);
 8000c54:	4b6a      	ldr	r3, [pc, #424]	; (8000e00 <main+0x248>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	607b      	str	r3, [r7, #4]
 8000c5a:	4e6e      	ldr	r6, [pc, #440]	; (8000e14 <main+0x25c>)
 8000c5c:	466d      	mov	r5, sp
 8000c5e:	f106 040c 	add.w	r4, r6, #12
 8000c62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c6e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000c72:	e885 0003 	stmia.w	r5, {r0, r1}
 8000c76:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000c7a:	6878      	ldr	r0, [r7, #4]
 8000c7c:	f7ff fec8 	bl	8000a10 <SendUnsignedNumber>
		SendConstChar("\n ", huart2);
 8000c80:	4e64      	ldr	r6, [pc, #400]	; (8000e14 <main+0x25c>)
 8000c82:	466d      	mov	r5, sp
 8000c84:	f106 040c 	add.w	r4, r6, #12
 8000c88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c94:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000c98:	e885 0003 	stmia.w	r5, {r0, r1}
 8000c9c:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000ca0:	485e      	ldr	r0, [pc, #376]	; (8000e1c <main+0x264>)
 8000ca2:	f7ff fedf 	bl	8000a64 <SendConstChar>
		SendConstChar("virtue Voltage: ", huart2);
 8000ca6:	4e5b      	ldr	r6, [pc, #364]	; (8000e14 <main+0x25c>)
 8000ca8:	466d      	mov	r5, sp
 8000caa:	f106 040c 	add.w	r4, r6, #12
 8000cae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cba:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000cbe:	e885 0003 	stmia.w	r5, {r0, r1}
 8000cc2:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000cc6:	4856      	ldr	r0, [pc, #344]	; (8000e20 <main+0x268>)
 8000cc8:	f7ff fecc 	bl	8000a64 <SendConstChar>
		SendFloatLn(virtueVoltage, huart2);
 8000ccc:	4e51      	ldr	r6, [pc, #324]	; (8000e14 <main+0x25c>)
 8000cce:	466d      	mov	r5, sp
 8000cd0:	f106 0410 	add.w	r4, r6, #16
 8000cd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ce0:	6823      	ldr	r3, [r4, #0]
 8000ce2:	602b      	str	r3, [r5, #0]
 8000ce4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000ce8:	ed97 0a05 	vldr	s0, [r7, #20]
 8000cec:	f7ff ff2e 	bl	8000b4c <SendFloatLn>

		SendConstChar("realistic ADC: ", huart2);
 8000cf0:	4e48      	ldr	r6, [pc, #288]	; (8000e14 <main+0x25c>)
 8000cf2:	466d      	mov	r5, sp
 8000cf4:	f106 040c 	add.w	r4, r6, #12
 8000cf8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cfa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cfc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cfe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d04:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000d08:	e885 0003 	stmia.w	r5, {r0, r1}
 8000d0c:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000d10:	4844      	ldr	r0, [pc, #272]	; (8000e24 <main+0x26c>)
 8000d12:	f7ff fea7 	bl	8000a64 <SendConstChar>
		SendUnsignedNumber((uint32_t)realisticAdc, huart2);
 8000d16:	f8b7 c00e 	ldrh.w	ip, [r7, #14]
 8000d1a:	4e3e      	ldr	r6, [pc, #248]	; (8000e14 <main+0x25c>)
 8000d1c:	466d      	mov	r5, sp
 8000d1e:	f106 040c 	add.w	r4, r6, #12
 8000d22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d2e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000d32:	e885 0003 	stmia.w	r5, {r0, r1}
 8000d36:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000d3a:	4660      	mov	r0, ip
 8000d3c:	f7ff fe68 	bl	8000a10 <SendUnsignedNumber>
		SendConstChar("\n ", huart2);
 8000d40:	4e34      	ldr	r6, [pc, #208]	; (8000e14 <main+0x25c>)
 8000d42:	466d      	mov	r5, sp
 8000d44:	f106 040c 	add.w	r4, r6, #12
 8000d48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d54:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000d58:	e885 0003 	stmia.w	r5, {r0, r1}
 8000d5c:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000d60:	482e      	ldr	r0, [pc, #184]	; (8000e1c <main+0x264>)
 8000d62:	f7ff fe7f 	bl	8000a64 <SendConstChar>
		SendConstChar("Realistic Voltage: ", huart2);
 8000d66:	4e2b      	ldr	r6, [pc, #172]	; (8000e14 <main+0x25c>)
 8000d68:	466d      	mov	r5, sp
 8000d6a:	f106 040c 	add.w	r4, r6, #12
 8000d6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d7a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000d7e:	e885 0003 	stmia.w	r5, {r0, r1}
 8000d82:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000d86:	4828      	ldr	r0, [pc, #160]	; (8000e28 <main+0x270>)
 8000d88:	f7ff fe6c 	bl	8000a64 <SendConstChar>
		SendFloatLn(realisticVoltage, huart2);
 8000d8c:	4e21      	ldr	r6, [pc, #132]	; (8000e14 <main+0x25c>)
 8000d8e:	466d      	mov	r5, sp
 8000d90:	f106 0410 	add.w	r4, r6, #16
 8000d94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000da0:	6823      	ldr	r3, [r4, #0]
 8000da2:	602b      	str	r3, [r5, #0]
 8000da4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000da8:	ed97 0a04 	vldr	s0, [r7, #16]
 8000dac:	f7ff fece 	bl	8000b4c <SendFloatLn>
		if(realisticVoltage>1.46)
 8000db0:	6938      	ldr	r0, [r7, #16]
 8000db2:	f7ff fbd1 	bl	8000558 <__aeabi_f2d>
 8000db6:	a310      	add	r3, pc, #64	; (adr r3, 8000df8 <main+0x240>)
 8000db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dbc:	f7ff fca2 	bl	8000704 <__aeabi_dcmpgt>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d012      	beq.n	8000dec <main+0x234>
			SendConstChar("WARNING: Smoke detected \n ", huart2);
 8000dc6:	4e13      	ldr	r6, [pc, #76]	; (8000e14 <main+0x25c>)
 8000dc8:	466d      	mov	r5, sp
 8000dca:	f106 040c 	add.w	r4, r6, #12
 8000dce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dda:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000dde:	e885 0003 	stmia.w	r5, {r0, r1}
 8000de2:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000de6:	4811      	ldr	r0, [pc, #68]	; (8000e2c <main+0x274>)
 8000de8:	f7ff fe3c 	bl	8000a64 <SendConstChar>
		HAL_Delay(500);
 8000dec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000df0:	f000 fb50 	bl	8001494 <HAL_Delay>
	{
 8000df4:	e6f4      	b.n	8000be0 <main+0x28>
 8000df6:	bf00      	nop
 8000df8:	f5c28f5c 	.word	0xf5c28f5c
 8000dfc:	3ff75c28 	.word	0x3ff75c28
 8000e00:	2000019c 	.word	0x2000019c
 8000e04:	20000154 	.word	0x20000154
 8000e08:	40533333 	.word	0x40533333
 8000e0c:	457ff000 	.word	0x457ff000
 8000e10:	3fd5c28f 	.word	0x3fd5c28f
 8000e14:	200000dc 	.word	0x200000dc
 8000e18:	08004048 	.word	0x08004048
 8000e1c:	08004058 	.word	0x08004058
 8000e20:	0800405c 	.word	0x0800405c
 8000e24:	08004070 	.word	0x08004070
 8000e28:	08004080 	.word	0x08004080
 8000e2c:	08004094 	.word	0x08004094

08000e30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b094      	sub	sp, #80	; 0x50
 8000e34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e36:	f107 0320 	add.w	r3, r7, #32
 8000e3a:	2230      	movs	r2, #48	; 0x30
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f002 fcb8 	bl	80037b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e44:	f107 030c 	add.w	r3, r7, #12
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e54:	2300      	movs	r3, #0
 8000e56:	60bb      	str	r3, [r7, #8]
 8000e58:	4b27      	ldr	r3, [pc, #156]	; (8000ef8 <SystemClock_Config+0xc8>)
 8000e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5c:	4a26      	ldr	r2, [pc, #152]	; (8000ef8 <SystemClock_Config+0xc8>)
 8000e5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e62:	6413      	str	r3, [r2, #64]	; 0x40
 8000e64:	4b24      	ldr	r3, [pc, #144]	; (8000ef8 <SystemClock_Config+0xc8>)
 8000e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e6c:	60bb      	str	r3, [r7, #8]
 8000e6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e70:	2300      	movs	r3, #0
 8000e72:	607b      	str	r3, [r7, #4]
 8000e74:	4b21      	ldr	r3, [pc, #132]	; (8000efc <SystemClock_Config+0xcc>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a20      	ldr	r2, [pc, #128]	; (8000efc <SystemClock_Config+0xcc>)
 8000e7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e7e:	6013      	str	r3, [r2, #0]
 8000e80:	4b1e      	ldr	r3, [pc, #120]	; (8000efc <SystemClock_Config+0xcc>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e88:	607b      	str	r3, [r7, #4]
 8000e8a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e90:	2301      	movs	r3, #1
 8000e92:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e94:	2310      	movs	r3, #16
 8000e96:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ea0:	2308      	movs	r3, #8
 8000ea2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000ea4:	2364      	movs	r3, #100	; 0x64
 8000ea6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000eac:	2304      	movs	r3, #4
 8000eae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eb0:	f107 0320 	add.w	r3, r7, #32
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f001 fd19 	bl	80028ec <HAL_RCC_OscConfig>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ec0:	f000 f8e2 	bl	8001088 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ec4:	230f      	movs	r3, #15
 8000ec6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ed0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ed4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000eda:	f107 030c 	add.w	r3, r7, #12
 8000ede:	2103      	movs	r1, #3
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f001 ff7b 	bl	8002ddc <HAL_RCC_ClockConfig>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000eec:	f000 f8cc 	bl	8001088 <Error_Handler>
  }
}
 8000ef0:	bf00      	nop
 8000ef2:	3750      	adds	r7, #80	; 0x50
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	40023800 	.word	0x40023800
 8000efc:	40007000 	.word	0x40007000

08000f00 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f06:	463b      	mov	r3, r7
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f12:	4b21      	ldr	r3, [pc, #132]	; (8000f98 <MX_ADC1_Init+0x98>)
 8000f14:	4a21      	ldr	r2, [pc, #132]	; (8000f9c <MX_ADC1_Init+0x9c>)
 8000f16:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f18:	4b1f      	ldr	r3, [pc, #124]	; (8000f98 <MX_ADC1_Init+0x98>)
 8000f1a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f1e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f20:	4b1d      	ldr	r3, [pc, #116]	; (8000f98 <MX_ADC1_Init+0x98>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000f26:	4b1c      	ldr	r3, [pc, #112]	; (8000f98 <MX_ADC1_Init+0x98>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f2c:	4b1a      	ldr	r3, [pc, #104]	; (8000f98 <MX_ADC1_Init+0x98>)
 8000f2e:	2201      	movs	r2, #1
 8000f30:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f32:	4b19      	ldr	r3, [pc, #100]	; (8000f98 <MX_ADC1_Init+0x98>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f3a:	4b17      	ldr	r3, [pc, #92]	; (8000f98 <MX_ADC1_Init+0x98>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f40:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <MX_ADC1_Init+0x98>)
 8000f42:	4a17      	ldr	r2, [pc, #92]	; (8000fa0 <MX_ADC1_Init+0xa0>)
 8000f44:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f46:	4b14      	ldr	r3, [pc, #80]	; (8000f98 <MX_ADC1_Init+0x98>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f4c:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <MX_ADC1_Init+0x98>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f52:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <MX_ADC1_Init+0x98>)
 8000f54:	2201      	movs	r2, #1
 8000f56:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f5a:	4b0f      	ldr	r3, [pc, #60]	; (8000f98 <MX_ADC1_Init+0x98>)
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f60:	480d      	ldr	r0, [pc, #52]	; (8000f98 <MX_ADC1_Init+0x98>)
 8000f62:	f000 fabb 	bl	80014dc <HAL_ADC_Init>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f6c:	f000 f88c 	bl	8001088 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f74:	2301      	movs	r3, #1
 8000f76:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8000f78:	2306      	movs	r3, #6
 8000f7a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f7c:	463b      	mov	r3, r7
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4805      	ldr	r0, [pc, #20]	; (8000f98 <MX_ADC1_Init+0x98>)
 8000f82:	f000 fbfd 	bl	8001780 <HAL_ADC_ConfigChannel>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f8c:	f000 f87c 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f90:	bf00      	nop
 8000f92:	3710      	adds	r7, #16
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20000154 	.word	0x20000154
 8000f9c:	40012000 	.word	0x40012000
 8000fa0:	0f000001 	.word	0x0f000001

08000fa4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fa8:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <MX_USART2_UART_Init+0x4c>)
 8000faa:	4a12      	ldr	r2, [pc, #72]	; (8000ff4 <MX_USART2_UART_Init+0x50>)
 8000fac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fae:	4b10      	ldr	r3, [pc, #64]	; (8000ff0 <MX_USART2_UART_Init+0x4c>)
 8000fb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fb4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ff0 <MX_USART2_UART_Init+0x4c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fbc:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <MX_USART2_UART_Init+0x4c>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fc2:	4b0b      	ldr	r3, [pc, #44]	; (8000ff0 <MX_USART2_UART_Init+0x4c>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fc8:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <MX_USART2_UART_Init+0x4c>)
 8000fca:	220c      	movs	r2, #12
 8000fcc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fce:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <MX_USART2_UART_Init+0x4c>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd4:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <MX_USART2_UART_Init+0x4c>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fda:	4805      	ldr	r0, [pc, #20]	; (8000ff0 <MX_USART2_UART_Init+0x4c>)
 8000fdc:	f002 f8ce 	bl	800317c <HAL_UART_Init>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000fe6:	f000 f84f 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	200000dc 	.word	0x200000dc
 8000ff4:	40004400 	.word	0x40004400

08000ff8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	607b      	str	r3, [r7, #4]
 8001002:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <MX_DMA_Init+0x3c>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	4a0b      	ldr	r2, [pc, #44]	; (8001034 <MX_DMA_Init+0x3c>)
 8001008:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800100c:	6313      	str	r3, [r2, #48]	; 0x30
 800100e:	4b09      	ldr	r3, [pc, #36]	; (8001034 <MX_DMA_Init+0x3c>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001016:	607b      	str	r3, [r7, #4]
 8001018:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800101a:	2200      	movs	r2, #0
 800101c:	2100      	movs	r1, #0
 800101e:	2038      	movs	r0, #56	; 0x38
 8001020:	f000 ff39 	bl	8001e96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001024:	2038      	movs	r0, #56	; 0x38
 8001026:	f000 ff52 	bl	8001ece <HAL_NVIC_EnableIRQ>

}
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40023800 	.word	0x40023800

08001038 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	607b      	str	r3, [r7, #4]
 8001042:	4b10      	ldr	r3, [pc, #64]	; (8001084 <MX_GPIO_Init+0x4c>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	4a0f      	ldr	r2, [pc, #60]	; (8001084 <MX_GPIO_Init+0x4c>)
 8001048:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800104c:	6313      	str	r3, [r2, #48]	; 0x30
 800104e:	4b0d      	ldr	r3, [pc, #52]	; (8001084 <MX_GPIO_Init+0x4c>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001056:	607b      	str	r3, [r7, #4]
 8001058:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	603b      	str	r3, [r7, #0]
 800105e:	4b09      	ldr	r3, [pc, #36]	; (8001084 <MX_GPIO_Init+0x4c>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	4a08      	ldr	r2, [pc, #32]	; (8001084 <MX_GPIO_Init+0x4c>)
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	6313      	str	r3, [r2, #48]	; 0x30
 800106a:	4b06      	ldr	r3, [pc, #24]	; (8001084 <MX_GPIO_Init+0x4c>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	603b      	str	r3, [r7, #0]
 8001074:	683b      	ldr	r3, [r7, #0]

}
 8001076:	bf00      	nop
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	40023800 	.word	0x40023800

08001088 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800108c:	b672      	cpsid	i
}
 800108e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001090:	e7fe      	b.n	8001090 <Error_Handler+0x8>
	...

08001094 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	607b      	str	r3, [r7, #4]
 800109e:	4b10      	ldr	r3, [pc, #64]	; (80010e0 <HAL_MspInit+0x4c>)
 80010a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a2:	4a0f      	ldr	r2, [pc, #60]	; (80010e0 <HAL_MspInit+0x4c>)
 80010a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a8:	6453      	str	r3, [r2, #68]	; 0x44
 80010aa:	4b0d      	ldr	r3, [pc, #52]	; (80010e0 <HAL_MspInit+0x4c>)
 80010ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010b2:	607b      	str	r3, [r7, #4]
 80010b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	603b      	str	r3, [r7, #0]
 80010ba:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <HAL_MspInit+0x4c>)
 80010bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010be:	4a08      	ldr	r2, [pc, #32]	; (80010e0 <HAL_MspInit+0x4c>)
 80010c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010c4:	6413      	str	r3, [r2, #64]	; 0x40
 80010c6:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <HAL_MspInit+0x4c>)
 80010c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ce:	603b      	str	r3, [r7, #0]
 80010d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010d2:	bf00      	nop
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	40023800 	.word	0x40023800

080010e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b08a      	sub	sp, #40	; 0x28
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ec:	f107 0314 	add.w	r3, r7, #20
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a2f      	ldr	r2, [pc, #188]	; (80011c0 <HAL_ADC_MspInit+0xdc>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d157      	bne.n	80011b6 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	613b      	str	r3, [r7, #16]
 800110a:	4b2e      	ldr	r3, [pc, #184]	; (80011c4 <HAL_ADC_MspInit+0xe0>)
 800110c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110e:	4a2d      	ldr	r2, [pc, #180]	; (80011c4 <HAL_ADC_MspInit+0xe0>)
 8001110:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001114:	6453      	str	r3, [r2, #68]	; 0x44
 8001116:	4b2b      	ldr	r3, [pc, #172]	; (80011c4 <HAL_ADC_MspInit+0xe0>)
 8001118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800111e:	613b      	str	r3, [r7, #16]
 8001120:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	4b27      	ldr	r3, [pc, #156]	; (80011c4 <HAL_ADC_MspInit+0xe0>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	4a26      	ldr	r2, [pc, #152]	; (80011c4 <HAL_ADC_MspInit+0xe0>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	6313      	str	r3, [r2, #48]	; 0x30
 8001132:	4b24      	ldr	r3, [pc, #144]	; (80011c4 <HAL_ADC_MspInit+0xe0>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800113e:	2301      	movs	r3, #1
 8001140:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001142:	2303      	movs	r3, #3
 8001144:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114a:	f107 0314 	add.w	r3, r7, #20
 800114e:	4619      	mov	r1, r3
 8001150:	481d      	ldr	r0, [pc, #116]	; (80011c8 <HAL_ADC_MspInit+0xe4>)
 8001152:	f001 fa47 	bl	80025e4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001156:	4b1d      	ldr	r3, [pc, #116]	; (80011cc <HAL_ADC_MspInit+0xe8>)
 8001158:	4a1d      	ldr	r2, [pc, #116]	; (80011d0 <HAL_ADC_MspInit+0xec>)
 800115a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800115c:	4b1b      	ldr	r3, [pc, #108]	; (80011cc <HAL_ADC_MspInit+0xe8>)
 800115e:	2200      	movs	r2, #0
 8001160:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001162:	4b1a      	ldr	r3, [pc, #104]	; (80011cc <HAL_ADC_MspInit+0xe8>)
 8001164:	2200      	movs	r2, #0
 8001166:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001168:	4b18      	ldr	r3, [pc, #96]	; (80011cc <HAL_ADC_MspInit+0xe8>)
 800116a:	2200      	movs	r2, #0
 800116c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800116e:	4b17      	ldr	r3, [pc, #92]	; (80011cc <HAL_ADC_MspInit+0xe8>)
 8001170:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001174:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001176:	4b15      	ldr	r3, [pc, #84]	; (80011cc <HAL_ADC_MspInit+0xe8>)
 8001178:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800117c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800117e:	4b13      	ldr	r3, [pc, #76]	; (80011cc <HAL_ADC_MspInit+0xe8>)
 8001180:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001184:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001186:	4b11      	ldr	r3, [pc, #68]	; (80011cc <HAL_ADC_MspInit+0xe8>)
 8001188:	f44f 7280 	mov.w	r2, #256	; 0x100
 800118c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800118e:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <HAL_ADC_MspInit+0xe8>)
 8001190:	2200      	movs	r2, #0
 8001192:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001194:	4b0d      	ldr	r3, [pc, #52]	; (80011cc <HAL_ADC_MspInit+0xe8>)
 8001196:	2200      	movs	r2, #0
 8001198:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800119a:	480c      	ldr	r0, [pc, #48]	; (80011cc <HAL_ADC_MspInit+0xe8>)
 800119c:	f000 feb2 	bl	8001f04 <HAL_DMA_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80011a6:	f7ff ff6f 	bl	8001088 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a07      	ldr	r2, [pc, #28]	; (80011cc <HAL_ADC_MspInit+0xe8>)
 80011ae:	639a      	str	r2, [r3, #56]	; 0x38
 80011b0:	4a06      	ldr	r2, [pc, #24]	; (80011cc <HAL_ADC_MspInit+0xe8>)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80011b6:	bf00      	nop
 80011b8:	3728      	adds	r7, #40	; 0x28
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40012000 	.word	0x40012000
 80011c4:	40023800 	.word	0x40023800
 80011c8:	40020000 	.word	0x40020000
 80011cc:	200001a0 	.word	0x200001a0
 80011d0:	40026410 	.word	0x40026410

080011d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08a      	sub	sp, #40	; 0x28
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a19      	ldr	r2, [pc, #100]	; (8001258 <HAL_UART_MspInit+0x84>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d12b      	bne.n	800124e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	613b      	str	r3, [r7, #16]
 80011fa:	4b18      	ldr	r3, [pc, #96]	; (800125c <HAL_UART_MspInit+0x88>)
 80011fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fe:	4a17      	ldr	r2, [pc, #92]	; (800125c <HAL_UART_MspInit+0x88>)
 8001200:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001204:	6413      	str	r3, [r2, #64]	; 0x40
 8001206:	4b15      	ldr	r3, [pc, #84]	; (800125c <HAL_UART_MspInit+0x88>)
 8001208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800120e:	613b      	str	r3, [r7, #16]
 8001210:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	4b11      	ldr	r3, [pc, #68]	; (800125c <HAL_UART_MspInit+0x88>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	4a10      	ldr	r2, [pc, #64]	; (800125c <HAL_UART_MspInit+0x88>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	6313      	str	r3, [r2, #48]	; 0x30
 8001222:	4b0e      	ldr	r3, [pc, #56]	; (800125c <HAL_UART_MspInit+0x88>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800122e:	230c      	movs	r3, #12
 8001230:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001232:	2302      	movs	r3, #2
 8001234:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123a:	2303      	movs	r3, #3
 800123c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800123e:	2307      	movs	r3, #7
 8001240:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001242:	f107 0314 	add.w	r3, r7, #20
 8001246:	4619      	mov	r1, r3
 8001248:	4805      	ldr	r0, [pc, #20]	; (8001260 <HAL_UART_MspInit+0x8c>)
 800124a:	f001 f9cb 	bl	80025e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800124e:	bf00      	nop
 8001250:	3728      	adds	r7, #40	; 0x28
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40004400 	.word	0x40004400
 800125c:	40023800 	.word	0x40023800
 8001260:	40020000 	.word	0x40020000

08001264 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001268:	e7fe      	b.n	8001268 <NMI_Handler+0x4>

0800126a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800126a:	b480      	push	{r7}
 800126c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800126e:	e7fe      	b.n	800126e <HardFault_Handler+0x4>

08001270 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001274:	e7fe      	b.n	8001274 <MemManage_Handler+0x4>

08001276 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001276:	b480      	push	{r7}
 8001278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800127a:	e7fe      	b.n	800127a <BusFault_Handler+0x4>

0800127c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001280:	e7fe      	b.n	8001280 <UsageFault_Handler+0x4>

08001282 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr

0800129e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800129e:	b480      	push	{r7}
 80012a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012b0:	f000 f8d0 	bl	8001454 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012b4:	bf00      	nop
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80012bc:	4802      	ldr	r0, [pc, #8]	; (80012c8 <DMA2_Stream0_IRQHandler+0x10>)
 80012be:	f000 ff27 	bl	8002110 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	200001a0 	.word	0x200001a0

080012cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012d4:	4a14      	ldr	r2, [pc, #80]	; (8001328 <_sbrk+0x5c>)
 80012d6:	4b15      	ldr	r3, [pc, #84]	; (800132c <_sbrk+0x60>)
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012e0:	4b13      	ldr	r3, [pc, #76]	; (8001330 <_sbrk+0x64>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d102      	bne.n	80012ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012e8:	4b11      	ldr	r3, [pc, #68]	; (8001330 <_sbrk+0x64>)
 80012ea:	4a12      	ldr	r2, [pc, #72]	; (8001334 <_sbrk+0x68>)
 80012ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ee:	4b10      	ldr	r3, [pc, #64]	; (8001330 <_sbrk+0x64>)
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4413      	add	r3, r2
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d207      	bcs.n	800130c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012fc:	f002 fa30 	bl	8003760 <__errno>
 8001300:	4603      	mov	r3, r0
 8001302:	220c      	movs	r2, #12
 8001304:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001306:	f04f 33ff 	mov.w	r3, #4294967295
 800130a:	e009      	b.n	8001320 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800130c:	4b08      	ldr	r3, [pc, #32]	; (8001330 <_sbrk+0x64>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001312:	4b07      	ldr	r3, [pc, #28]	; (8001330 <_sbrk+0x64>)
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4413      	add	r3, r2
 800131a:	4a05      	ldr	r2, [pc, #20]	; (8001330 <_sbrk+0x64>)
 800131c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800131e:	68fb      	ldr	r3, [r7, #12]
}
 8001320:	4618      	mov	r0, r3
 8001322:	3718      	adds	r7, #24
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	20020000 	.word	0x20020000
 800132c:	00000400 	.word	0x00000400
 8001330:	2000008c 	.word	0x2000008c
 8001334:	20000218 	.word	0x20000218

08001338 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800133c:	4b06      	ldr	r3, [pc, #24]	; (8001358 <SystemInit+0x20>)
 800133e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001342:	4a05      	ldr	r2, [pc, #20]	; (8001358 <SystemInit+0x20>)
 8001344:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001348:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800135c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001394 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001360:	480d      	ldr	r0, [pc, #52]	; (8001398 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001362:	490e      	ldr	r1, [pc, #56]	; (800139c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001364:	4a0e      	ldr	r2, [pc, #56]	; (80013a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001366:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001368:	e002      	b.n	8001370 <LoopCopyDataInit>

0800136a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800136a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800136c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800136e:	3304      	adds	r3, #4

08001370 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001370:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001372:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001374:	d3f9      	bcc.n	800136a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001376:	4a0b      	ldr	r2, [pc, #44]	; (80013a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001378:	4c0b      	ldr	r4, [pc, #44]	; (80013a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800137a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800137c:	e001      	b.n	8001382 <LoopFillZerobss>

0800137e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800137e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001380:	3204      	adds	r2, #4

08001382 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001382:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001384:	d3fb      	bcc.n	800137e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001386:	f7ff ffd7 	bl	8001338 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800138a:	f002 f9ef 	bl	800376c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800138e:	f7ff fc13 	bl	8000bb8 <main>
  bx  lr    
 8001392:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001394:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001398:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800139c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80013a0:	08004114 	.word	0x08004114
  ldr r2, =_sbss
 80013a4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80013a8:	20000214 	.word	0x20000214

080013ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013ac:	e7fe      	b.n	80013ac <ADC_IRQHandler>
	...

080013b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013b4:	4b0e      	ldr	r3, [pc, #56]	; (80013f0 <HAL_Init+0x40>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a0d      	ldr	r2, [pc, #52]	; (80013f0 <HAL_Init+0x40>)
 80013ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013c0:	4b0b      	ldr	r3, [pc, #44]	; (80013f0 <HAL_Init+0x40>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a0a      	ldr	r2, [pc, #40]	; (80013f0 <HAL_Init+0x40>)
 80013c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013cc:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <HAL_Init+0x40>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a07      	ldr	r2, [pc, #28]	; (80013f0 <HAL_Init+0x40>)
 80013d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013d8:	2003      	movs	r0, #3
 80013da:	f000 fd51 	bl	8001e80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013de:	2000      	movs	r0, #0
 80013e0:	f000 f808 	bl	80013f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013e4:	f7ff fe56 	bl	8001094 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40023c00 	.word	0x40023c00

080013f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013fc:	4b12      	ldr	r3, [pc, #72]	; (8001448 <HAL_InitTick+0x54>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	4b12      	ldr	r3, [pc, #72]	; (800144c <HAL_InitTick+0x58>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	4619      	mov	r1, r3
 8001406:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800140a:	fbb3 f3f1 	udiv	r3, r3, r1
 800140e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001412:	4618      	mov	r0, r3
 8001414:	f000 fd69 	bl	8001eea <HAL_SYSTICK_Config>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e00e      	b.n	8001440 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2b0f      	cmp	r3, #15
 8001426:	d80a      	bhi.n	800143e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001428:	2200      	movs	r2, #0
 800142a:	6879      	ldr	r1, [r7, #4]
 800142c:	f04f 30ff 	mov.w	r0, #4294967295
 8001430:	f000 fd31 	bl	8001e96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001434:	4a06      	ldr	r2, [pc, #24]	; (8001450 <HAL_InitTick+0x5c>)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800143a:	2300      	movs	r3, #0
 800143c:	e000      	b.n	8001440 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
}
 8001440:	4618      	mov	r0, r3
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20000000 	.word	0x20000000
 800144c:	20000008 	.word	0x20000008
 8001450:	20000004 	.word	0x20000004

08001454 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001458:	4b06      	ldr	r3, [pc, #24]	; (8001474 <HAL_IncTick+0x20>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	461a      	mov	r2, r3
 800145e:	4b06      	ldr	r3, [pc, #24]	; (8001478 <HAL_IncTick+0x24>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4413      	add	r3, r2
 8001464:	4a04      	ldr	r2, [pc, #16]	; (8001478 <HAL_IncTick+0x24>)
 8001466:	6013      	str	r3, [r2, #0]
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	20000008 	.word	0x20000008
 8001478:	20000200 	.word	0x20000200

0800147c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  return uwTick;
 8001480:	4b03      	ldr	r3, [pc, #12]	; (8001490 <HAL_GetTick+0x14>)
 8001482:	681b      	ldr	r3, [r3, #0]
}
 8001484:	4618      	mov	r0, r3
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	20000200 	.word	0x20000200

08001494 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800149c:	f7ff ffee 	bl	800147c <HAL_GetTick>
 80014a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014ac:	d005      	beq.n	80014ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014ae:	4b0a      	ldr	r3, [pc, #40]	; (80014d8 <HAL_Delay+0x44>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	461a      	mov	r2, r3
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	4413      	add	r3, r2
 80014b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014ba:	bf00      	nop
 80014bc:	f7ff ffde 	bl	800147c <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	68fa      	ldr	r2, [r7, #12]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d8f7      	bhi.n	80014bc <HAL_Delay+0x28>
  {
  }
}
 80014cc:	bf00      	nop
 80014ce:	bf00      	nop
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	20000008 	.word	0x20000008

080014dc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014e4:	2300      	movs	r3, #0
 80014e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d101      	bne.n	80014f2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e033      	b.n	800155a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d109      	bne.n	800150e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f7ff fdf2 	bl	80010e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2200      	movs	r2, #0
 8001504:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2200      	movs	r2, #0
 800150a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001512:	f003 0310 	and.w	r3, r3, #16
 8001516:	2b00      	cmp	r3, #0
 8001518:	d118      	bne.n	800154c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001522:	f023 0302 	bic.w	r3, r3, #2
 8001526:	f043 0202 	orr.w	r2, r3, #2
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f000 fa58 	bl	80019e4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2200      	movs	r2, #0
 8001538:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	f023 0303 	bic.w	r3, r3, #3
 8001542:	f043 0201 	orr.w	r2, r3, #1
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	641a      	str	r2, [r3, #64]	; 0x40
 800154a:	e001      	b.n	8001550 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001558:	7bfb      	ldrb	r3, [r7, #15]
}
 800155a:	4618      	mov	r0, r3
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
	...

08001564 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001570:	2300      	movs	r3, #0
 8001572:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800157a:	2b01      	cmp	r3, #1
 800157c:	d101      	bne.n	8001582 <HAL_ADC_Start_DMA+0x1e>
 800157e:	2302      	movs	r3, #2
 8001580:	e0ce      	b.n	8001720 <HAL_ADC_Start_DMA+0x1bc>
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	2201      	movs	r2, #1
 8001586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	f003 0301 	and.w	r3, r3, #1
 8001594:	2b01      	cmp	r3, #1
 8001596:	d018      	beq.n	80015ca <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	689a      	ldr	r2, [r3, #8]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f042 0201 	orr.w	r2, r2, #1
 80015a6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80015a8:	4b5f      	ldr	r3, [pc, #380]	; (8001728 <HAL_ADC_Start_DMA+0x1c4>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a5f      	ldr	r2, [pc, #380]	; (800172c <HAL_ADC_Start_DMA+0x1c8>)
 80015ae:	fba2 2303 	umull	r2, r3, r2, r3
 80015b2:	0c9a      	lsrs	r2, r3, #18
 80015b4:	4613      	mov	r3, r2
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	4413      	add	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80015bc:	e002      	b.n	80015c4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	3b01      	subs	r3, #1
 80015c2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d1f9      	bne.n	80015be <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015d8:	d107      	bne.n	80015ea <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	689a      	ldr	r2, [r3, #8]
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015e8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	f003 0301 	and.w	r3, r3, #1
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	f040 8086 	bne.w	8001706 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fe:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001602:	f023 0301 	bic.w	r3, r3, #1
 8001606:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001618:	2b00      	cmp	r3, #0
 800161a:	d007      	beq.n	800162c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001620:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001624:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001630:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001634:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001638:	d106      	bne.n	8001648 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163e:	f023 0206 	bic.w	r2, r3, #6
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	645a      	str	r2, [r3, #68]	; 0x44
 8001646:	e002      	b.n	800164e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2200      	movs	r2, #0
 800164c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	2200      	movs	r2, #0
 8001652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001656:	4b36      	ldr	r3, [pc, #216]	; (8001730 <HAL_ADC_Start_DMA+0x1cc>)
 8001658:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800165e:	4a35      	ldr	r2, [pc, #212]	; (8001734 <HAL_ADC_Start_DMA+0x1d0>)
 8001660:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001666:	4a34      	ldr	r2, [pc, #208]	; (8001738 <HAL_ADC_Start_DMA+0x1d4>)
 8001668:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800166e:	4a33      	ldr	r2, [pc, #204]	; (800173c <HAL_ADC_Start_DMA+0x1d8>)
 8001670:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800167a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	685a      	ldr	r2, [r3, #4]
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800168a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	689a      	ldr	r2, [r3, #8]
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800169a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	334c      	adds	r3, #76	; 0x4c
 80016a6:	4619      	mov	r1, r3
 80016a8:	68ba      	ldr	r2, [r7, #8]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f000 fcd8 	bl	8002060 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f003 031f 	and.w	r3, r3, #31
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d10f      	bne.n	80016dc <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d129      	bne.n	800171e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	689a      	ldr	r2, [r3, #8]
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80016d8:	609a      	str	r2, [r3, #8]
 80016da:	e020      	b.n	800171e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a17      	ldr	r2, [pc, #92]	; (8001740 <HAL_ADC_Start_DMA+0x1dc>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d11b      	bne.n	800171e <HAL_ADC_Start_DMA+0x1ba>
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d114      	bne.n	800171e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	689a      	ldr	r2, [r3, #8]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	e00b      	b.n	800171e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	f043 0210 	orr.w	r2, r3, #16
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001716:	f043 0201 	orr.w	r2, r3, #1
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800171e:	2300      	movs	r3, #0
}
 8001720:	4618      	mov	r0, r3
 8001722:	3718      	adds	r7, #24
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	20000000 	.word	0x20000000
 800172c:	431bde83 	.word	0x431bde83
 8001730:	40012300 	.word	0x40012300
 8001734:	08001bdd 	.word	0x08001bdd
 8001738:	08001c97 	.word	0x08001c97
 800173c:	08001cb3 	.word	0x08001cb3
 8001740:	40012000 	.word	0x40012000

08001744 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001774:	bf00      	nop
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800178a:	2300      	movs	r3, #0
 800178c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001794:	2b01      	cmp	r3, #1
 8001796:	d101      	bne.n	800179c <HAL_ADC_ConfigChannel+0x1c>
 8001798:	2302      	movs	r3, #2
 800179a:	e113      	b.n	80019c4 <HAL_ADC_ConfigChannel+0x244>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2201      	movs	r2, #1
 80017a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2b09      	cmp	r3, #9
 80017aa:	d925      	bls.n	80017f8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	68d9      	ldr	r1, [r3, #12]
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	461a      	mov	r2, r3
 80017ba:	4613      	mov	r3, r2
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	4413      	add	r3, r2
 80017c0:	3b1e      	subs	r3, #30
 80017c2:	2207      	movs	r2, #7
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	43da      	mvns	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	400a      	ands	r2, r1
 80017d0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	68d9      	ldr	r1, [r3, #12]
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	689a      	ldr	r2, [r3, #8]
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	4618      	mov	r0, r3
 80017e4:	4603      	mov	r3, r0
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	4403      	add	r3, r0
 80017ea:	3b1e      	subs	r3, #30
 80017ec:	409a      	lsls	r2, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	430a      	orrs	r2, r1
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	e022      	b.n	800183e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	6919      	ldr	r1, [r3, #16]
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	b29b      	uxth	r3, r3
 8001804:	461a      	mov	r2, r3
 8001806:	4613      	mov	r3, r2
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	4413      	add	r3, r2
 800180c:	2207      	movs	r2, #7
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	43da      	mvns	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	400a      	ands	r2, r1
 800181a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	6919      	ldr	r1, [r3, #16]
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	689a      	ldr	r2, [r3, #8]
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	b29b      	uxth	r3, r3
 800182c:	4618      	mov	r0, r3
 800182e:	4603      	mov	r3, r0
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	4403      	add	r3, r0
 8001834:	409a      	lsls	r2, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	430a      	orrs	r2, r1
 800183c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	2b06      	cmp	r3, #6
 8001844:	d824      	bhi.n	8001890 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685a      	ldr	r2, [r3, #4]
 8001850:	4613      	mov	r3, r2
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	4413      	add	r3, r2
 8001856:	3b05      	subs	r3, #5
 8001858:	221f      	movs	r2, #31
 800185a:	fa02 f303 	lsl.w	r3, r2, r3
 800185e:	43da      	mvns	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	400a      	ands	r2, r1
 8001866:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	b29b      	uxth	r3, r3
 8001874:	4618      	mov	r0, r3
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685a      	ldr	r2, [r3, #4]
 800187a:	4613      	mov	r3, r2
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	4413      	add	r3, r2
 8001880:	3b05      	subs	r3, #5
 8001882:	fa00 f203 	lsl.w	r2, r0, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	430a      	orrs	r2, r1
 800188c:	635a      	str	r2, [r3, #52]	; 0x34
 800188e:	e04c      	b.n	800192a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	2b0c      	cmp	r3, #12
 8001896:	d824      	bhi.n	80018e2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685a      	ldr	r2, [r3, #4]
 80018a2:	4613      	mov	r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	4413      	add	r3, r2
 80018a8:	3b23      	subs	r3, #35	; 0x23
 80018aa:	221f      	movs	r2, #31
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	43da      	mvns	r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	400a      	ands	r2, r1
 80018b8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	4618      	mov	r0, r3
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685a      	ldr	r2, [r3, #4]
 80018cc:	4613      	mov	r3, r2
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	4413      	add	r3, r2
 80018d2:	3b23      	subs	r3, #35	; 0x23
 80018d4:	fa00 f203 	lsl.w	r2, r0, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	430a      	orrs	r2, r1
 80018de:	631a      	str	r2, [r3, #48]	; 0x30
 80018e0:	e023      	b.n	800192a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685a      	ldr	r2, [r3, #4]
 80018ec:	4613      	mov	r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	4413      	add	r3, r2
 80018f2:	3b41      	subs	r3, #65	; 0x41
 80018f4:	221f      	movs	r2, #31
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	43da      	mvns	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	400a      	ands	r2, r1
 8001902:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	b29b      	uxth	r3, r3
 8001910:	4618      	mov	r0, r3
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685a      	ldr	r2, [r3, #4]
 8001916:	4613      	mov	r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	4413      	add	r3, r2
 800191c:	3b41      	subs	r3, #65	; 0x41
 800191e:	fa00 f203 	lsl.w	r2, r0, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	430a      	orrs	r2, r1
 8001928:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800192a:	4b29      	ldr	r3, [pc, #164]	; (80019d0 <HAL_ADC_ConfigChannel+0x250>)
 800192c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a28      	ldr	r2, [pc, #160]	; (80019d4 <HAL_ADC_ConfigChannel+0x254>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d10f      	bne.n	8001958 <HAL_ADC_ConfigChannel+0x1d8>
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2b12      	cmp	r3, #18
 800193e:	d10b      	bne.n	8001958 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a1d      	ldr	r2, [pc, #116]	; (80019d4 <HAL_ADC_ConfigChannel+0x254>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d12b      	bne.n	80019ba <HAL_ADC_ConfigChannel+0x23a>
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a1c      	ldr	r2, [pc, #112]	; (80019d8 <HAL_ADC_ConfigChannel+0x258>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d003      	beq.n	8001974 <HAL_ADC_ConfigChannel+0x1f4>
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2b11      	cmp	r3, #17
 8001972:	d122      	bne.n	80019ba <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a11      	ldr	r2, [pc, #68]	; (80019d8 <HAL_ADC_ConfigChannel+0x258>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d111      	bne.n	80019ba <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001996:	4b11      	ldr	r3, [pc, #68]	; (80019dc <HAL_ADC_ConfigChannel+0x25c>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a11      	ldr	r2, [pc, #68]	; (80019e0 <HAL_ADC_ConfigChannel+0x260>)
 800199c:	fba2 2303 	umull	r2, r3, r2, r3
 80019a0:	0c9a      	lsrs	r2, r3, #18
 80019a2:	4613      	mov	r3, r2
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	4413      	add	r3, r2
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80019ac:	e002      	b.n	80019b4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	3b01      	subs	r3, #1
 80019b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d1f9      	bne.n	80019ae <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80019c2:	2300      	movs	r3, #0
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3714      	adds	r7, #20
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	40012300 	.word	0x40012300
 80019d4:	40012000 	.word	0x40012000
 80019d8:	10000012 	.word	0x10000012
 80019dc:	20000000 	.word	0x20000000
 80019e0:	431bde83 	.word	0x431bde83

080019e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019ec:	4b79      	ldr	r3, [pc, #484]	; (8001bd4 <ADC_Init+0x1f0>)
 80019ee:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	685a      	ldr	r2, [r3, #4]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	431a      	orrs	r2, r3
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	685a      	ldr	r2, [r3, #4]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a18:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	6859      	ldr	r1, [r3, #4]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	691b      	ldr	r3, [r3, #16]
 8001a24:	021a      	lsls	r2, r3, #8
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	685a      	ldr	r2, [r3, #4]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001a3c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	6859      	ldr	r1, [r3, #4]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689a      	ldr	r2, [r3, #8]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	689a      	ldr	r2, [r3, #8]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a5e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	6899      	ldr	r1, [r3, #8]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	68da      	ldr	r2, [r3, #12]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	430a      	orrs	r2, r1
 8001a70:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a76:	4a58      	ldr	r2, [pc, #352]	; (8001bd8 <ADC_Init+0x1f4>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d022      	beq.n	8001ac2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	689a      	ldr	r2, [r3, #8]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a8a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	6899      	ldr	r1, [r3, #8]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	689a      	ldr	r2, [r3, #8]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001aac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	6899      	ldr	r1, [r3, #8]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	430a      	orrs	r2, r1
 8001abe:	609a      	str	r2, [r3, #8]
 8001ac0:	e00f      	b.n	8001ae2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	689a      	ldr	r2, [r3, #8]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ad0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	689a      	ldr	r2, [r3, #8]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ae0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	689a      	ldr	r2, [r3, #8]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f022 0202 	bic.w	r2, r2, #2
 8001af0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	6899      	ldr	r1, [r3, #8]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	7e1b      	ldrb	r3, [r3, #24]
 8001afc:	005a      	lsls	r2, r3, #1
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	430a      	orrs	r2, r1
 8001b04:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d01b      	beq.n	8001b48 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	685a      	ldr	r2, [r3, #4]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b1e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	685a      	ldr	r2, [r3, #4]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001b2e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	6859      	ldr	r1, [r3, #4]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	035a      	lsls	r2, r3, #13
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	430a      	orrs	r2, r1
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	e007      	b.n	8001b58 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	685a      	ldr	r2, [r3, #4]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b56:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001b66:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	69db      	ldr	r3, [r3, #28]
 8001b72:	3b01      	subs	r3, #1
 8001b74:	051a      	lsls	r2, r3, #20
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	689a      	ldr	r2, [r3, #8]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001b8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	6899      	ldr	r1, [r3, #8]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b9a:	025a      	lsls	r2, r3, #9
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	689a      	ldr	r2, [r3, #8]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bb2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	6899      	ldr	r1, [r3, #8]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	695b      	ldr	r3, [r3, #20]
 8001bbe:	029a      	lsls	r2, r3, #10
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	609a      	str	r2, [r3, #8]
}
 8001bc8:	bf00      	nop
 8001bca:	3714      	adds	r7, #20
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	40012300 	.word	0x40012300
 8001bd8:	0f000001 	.word	0x0f000001

08001bdc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001be8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d13c      	bne.n	8001c70 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d12b      	bne.n	8001c68 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d127      	bne.n	8001c68 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d006      	beq.n	8001c34 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d119      	bne.n	8001c68 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	685a      	ldr	r2, [r3, #4]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f022 0220 	bic.w	r2, r2, #32
 8001c42:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c48:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d105      	bne.n	8001c68 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c60:	f043 0201 	orr.w	r2, r3, #1
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001c68:	68f8      	ldr	r0, [r7, #12]
 8001c6a:	f7ff fd6b 	bl	8001744 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001c6e:	e00e      	b.n	8001c8e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c74:	f003 0310 	and.w	r3, r3, #16
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d003      	beq.n	8001c84 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001c7c:	68f8      	ldr	r0, [r7, #12]
 8001c7e:	f7ff fd75 	bl	800176c <HAL_ADC_ErrorCallback>
}
 8001c82:	e004      	b.n	8001c8e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	4798      	blx	r3
}
 8001c8e:	bf00      	nop
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b084      	sub	sp, #16
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ca2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001ca4:	68f8      	ldr	r0, [r7, #12]
 8001ca6:	f7ff fd57 	bl	8001758 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001caa:	bf00      	nop
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b084      	sub	sp, #16
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cbe:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2240      	movs	r2, #64	; 0x40
 8001cc4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cca:	f043 0204 	orr.w	r2, r3, #4
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001cd2:	68f8      	ldr	r0, [r7, #12]
 8001cd4:	f7ff fd4a 	bl	800176c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001cd8:	bf00      	nop
 8001cda:	3710      	adds	r7, #16
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cf0:	4b0c      	ldr	r3, [pc, #48]	; (8001d24 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cf6:	68ba      	ldr	r2, [r7, #8]
 8001cf8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d12:	4a04      	ldr	r2, [pc, #16]	; (8001d24 <__NVIC_SetPriorityGrouping+0x44>)
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	60d3      	str	r3, [r2, #12]
}
 8001d18:	bf00      	nop
 8001d1a:	3714      	adds	r7, #20
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	e000ed00 	.word	0xe000ed00

08001d28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d2c:	4b04      	ldr	r3, [pc, #16]	; (8001d40 <__NVIC_GetPriorityGrouping+0x18>)
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	0a1b      	lsrs	r3, r3, #8
 8001d32:	f003 0307 	and.w	r3, r3, #7
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	e000ed00 	.word	0xe000ed00

08001d44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	db0b      	blt.n	8001d6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d56:	79fb      	ldrb	r3, [r7, #7]
 8001d58:	f003 021f 	and.w	r2, r3, #31
 8001d5c:	4907      	ldr	r1, [pc, #28]	; (8001d7c <__NVIC_EnableIRQ+0x38>)
 8001d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d62:	095b      	lsrs	r3, r3, #5
 8001d64:	2001      	movs	r0, #1
 8001d66:	fa00 f202 	lsl.w	r2, r0, r2
 8001d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d6e:	bf00      	nop
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	e000e100 	.word	0xe000e100

08001d80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4603      	mov	r3, r0
 8001d88:	6039      	str	r1, [r7, #0]
 8001d8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	db0a      	blt.n	8001daa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	b2da      	uxtb	r2, r3
 8001d98:	490c      	ldr	r1, [pc, #48]	; (8001dcc <__NVIC_SetPriority+0x4c>)
 8001d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9e:	0112      	lsls	r2, r2, #4
 8001da0:	b2d2      	uxtb	r2, r2
 8001da2:	440b      	add	r3, r1
 8001da4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001da8:	e00a      	b.n	8001dc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	b2da      	uxtb	r2, r3
 8001dae:	4908      	ldr	r1, [pc, #32]	; (8001dd0 <__NVIC_SetPriority+0x50>)
 8001db0:	79fb      	ldrb	r3, [r7, #7]
 8001db2:	f003 030f 	and.w	r3, r3, #15
 8001db6:	3b04      	subs	r3, #4
 8001db8:	0112      	lsls	r2, r2, #4
 8001dba:	b2d2      	uxtb	r2, r2
 8001dbc:	440b      	add	r3, r1
 8001dbe:	761a      	strb	r2, [r3, #24]
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	e000e100 	.word	0xe000e100
 8001dd0:	e000ed00 	.word	0xe000ed00

08001dd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b089      	sub	sp, #36	; 0x24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f003 0307 	and.w	r3, r3, #7
 8001de6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	f1c3 0307 	rsb	r3, r3, #7
 8001dee:	2b04      	cmp	r3, #4
 8001df0:	bf28      	it	cs
 8001df2:	2304      	movcs	r3, #4
 8001df4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	3304      	adds	r3, #4
 8001dfa:	2b06      	cmp	r3, #6
 8001dfc:	d902      	bls.n	8001e04 <NVIC_EncodePriority+0x30>
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	3b03      	subs	r3, #3
 8001e02:	e000      	b.n	8001e06 <NVIC_EncodePriority+0x32>
 8001e04:	2300      	movs	r3, #0
 8001e06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e08:	f04f 32ff 	mov.w	r2, #4294967295
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	43da      	mvns	r2, r3
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	401a      	ands	r2, r3
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	fa01 f303 	lsl.w	r3, r1, r3
 8001e26:	43d9      	mvns	r1, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e2c:	4313      	orrs	r3, r2
         );
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3724      	adds	r7, #36	; 0x24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
	...

08001e3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3b01      	subs	r3, #1
 8001e48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e4c:	d301      	bcc.n	8001e52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e00f      	b.n	8001e72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e52:	4a0a      	ldr	r2, [pc, #40]	; (8001e7c <SysTick_Config+0x40>)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3b01      	subs	r3, #1
 8001e58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e5a:	210f      	movs	r1, #15
 8001e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e60:	f7ff ff8e 	bl	8001d80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e64:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <SysTick_Config+0x40>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e6a:	4b04      	ldr	r3, [pc, #16]	; (8001e7c <SysTick_Config+0x40>)
 8001e6c:	2207      	movs	r2, #7
 8001e6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	e000e010 	.word	0xe000e010

08001e80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f7ff ff29 	bl	8001ce0 <__NVIC_SetPriorityGrouping>
}
 8001e8e:	bf00      	nop
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b086      	sub	sp, #24
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	60b9      	str	r1, [r7, #8]
 8001ea0:	607a      	str	r2, [r7, #4]
 8001ea2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ea8:	f7ff ff3e 	bl	8001d28 <__NVIC_GetPriorityGrouping>
 8001eac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	68b9      	ldr	r1, [r7, #8]
 8001eb2:	6978      	ldr	r0, [r7, #20]
 8001eb4:	f7ff ff8e 	bl	8001dd4 <NVIC_EncodePriority>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ebe:	4611      	mov	r1, r2
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff ff5d 	bl	8001d80 <__NVIC_SetPriority>
}
 8001ec6:	bf00      	nop
 8001ec8:	3718      	adds	r7, #24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b082      	sub	sp, #8
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff ff31 	bl	8001d44 <__NVIC_EnableIRQ>
}
 8001ee2:	bf00      	nop
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b082      	sub	sp, #8
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f7ff ffa2 	bl	8001e3c <SysTick_Config>
 8001ef8:	4603      	mov	r3, r0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
	...

08001f04 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b086      	sub	sp, #24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f10:	f7ff fab4 	bl	800147c <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d101      	bne.n	8001f20 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e099      	b.n	8002054 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2202      	movs	r2, #2
 8001f2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f022 0201 	bic.w	r2, r2, #1
 8001f3e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f40:	e00f      	b.n	8001f62 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f42:	f7ff fa9b 	bl	800147c <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b05      	cmp	r3, #5
 8001f4e:	d908      	bls.n	8001f62 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2220      	movs	r2, #32
 8001f54:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2203      	movs	r2, #3
 8001f5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e078      	b.n	8002054 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d1e8      	bne.n	8001f42 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f78:	697a      	ldr	r2, [r7, #20]
 8001f7a:	4b38      	ldr	r3, [pc, #224]	; (800205c <HAL_DMA_Init+0x158>)
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685a      	ldr	r2, [r3, #4]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	691b      	ldr	r3, [r3, #16]
 8001f94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fa6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a1b      	ldr	r3, [r3, #32]
 8001fac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fae:	697a      	ldr	r2, [r7, #20]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb8:	2b04      	cmp	r3, #4
 8001fba:	d107      	bne.n	8001fcc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	697a      	ldr	r2, [r7, #20]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	697a      	ldr	r2, [r7, #20]
 8001fd2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	f023 0307 	bic.w	r3, r3, #7
 8001fe2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe8:	697a      	ldr	r2, [r7, #20]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff2:	2b04      	cmp	r3, #4
 8001ff4:	d117      	bne.n	8002026 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ffa:	697a      	ldr	r2, [r7, #20]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002004:	2b00      	cmp	r3, #0
 8002006:	d00e      	beq.n	8002026 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f000 fa6f 	bl	80024ec <DMA_CheckFifoParam>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d008      	beq.n	8002026 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2240      	movs	r2, #64	; 0x40
 8002018:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2201      	movs	r2, #1
 800201e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002022:	2301      	movs	r3, #1
 8002024:	e016      	b.n	8002054 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	697a      	ldr	r2, [r7, #20]
 800202c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 fa26 	bl	8002480 <DMA_CalcBaseAndBitshift>
 8002034:	4603      	mov	r3, r0
 8002036:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800203c:	223f      	movs	r2, #63	; 0x3f
 800203e:	409a      	lsls	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2201      	movs	r2, #1
 800204e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002052:	2300      	movs	r3, #0
}
 8002054:	4618      	mov	r0, r3
 8002056:	3718      	adds	r7, #24
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	f010803f 	.word	0xf010803f

08002060 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
 800206c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800206e:	2300      	movs	r3, #0
 8002070:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002076:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800207e:	2b01      	cmp	r3, #1
 8002080:	d101      	bne.n	8002086 <HAL_DMA_Start_IT+0x26>
 8002082:	2302      	movs	r3, #2
 8002084:	e040      	b.n	8002108 <HAL_DMA_Start_IT+0xa8>
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2201      	movs	r2, #1
 800208a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002094:	b2db      	uxtb	r3, r3
 8002096:	2b01      	cmp	r3, #1
 8002098:	d12f      	bne.n	80020fa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2202      	movs	r2, #2
 800209e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2200      	movs	r2, #0
 80020a6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	68b9      	ldr	r1, [r7, #8]
 80020ae:	68f8      	ldr	r0, [r7, #12]
 80020b0:	f000 f9b8 	bl	8002424 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020b8:	223f      	movs	r2, #63	; 0x3f
 80020ba:	409a      	lsls	r2, r3
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f042 0216 	orr.w	r2, r2, #22
 80020ce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d007      	beq.n	80020e8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f042 0208 	orr.w	r2, r2, #8
 80020e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f042 0201 	orr.w	r2, r2, #1
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	e005      	b.n	8002106 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002102:	2302      	movs	r3, #2
 8002104:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002106:	7dfb      	ldrb	r3, [r7, #23]
}
 8002108:	4618      	mov	r0, r3
 800210a:	3718      	adds	r7, #24
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002118:	2300      	movs	r3, #0
 800211a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800211c:	4b92      	ldr	r3, [pc, #584]	; (8002368 <HAL_DMA_IRQHandler+0x258>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a92      	ldr	r2, [pc, #584]	; (800236c <HAL_DMA_IRQHandler+0x25c>)
 8002122:	fba2 2303 	umull	r2, r3, r2, r3
 8002126:	0a9b      	lsrs	r3, r3, #10
 8002128:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800212e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800213a:	2208      	movs	r2, #8
 800213c:	409a      	lsls	r2, r3
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	4013      	ands	r3, r2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d01a      	beq.n	800217c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0304 	and.w	r3, r3, #4
 8002150:	2b00      	cmp	r3, #0
 8002152:	d013      	beq.n	800217c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f022 0204 	bic.w	r2, r2, #4
 8002162:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002168:	2208      	movs	r2, #8
 800216a:	409a      	lsls	r2, r3
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002174:	f043 0201 	orr.w	r2, r3, #1
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002180:	2201      	movs	r2, #1
 8002182:	409a      	lsls	r2, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	4013      	ands	r3, r2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d012      	beq.n	80021b2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002196:	2b00      	cmp	r3, #0
 8002198:	d00b      	beq.n	80021b2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800219e:	2201      	movs	r2, #1
 80021a0:	409a      	lsls	r2, r3
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021aa:	f043 0202 	orr.w	r2, r3, #2
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021b6:	2204      	movs	r2, #4
 80021b8:	409a      	lsls	r2, r3
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	4013      	ands	r3, r2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d012      	beq.n	80021e8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d00b      	beq.n	80021e8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d4:	2204      	movs	r2, #4
 80021d6:	409a      	lsls	r2, r3
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e0:	f043 0204 	orr.w	r2, r3, #4
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ec:	2210      	movs	r2, #16
 80021ee:	409a      	lsls	r2, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	4013      	ands	r3, r2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d043      	beq.n	8002280 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0308 	and.w	r3, r3, #8
 8002202:	2b00      	cmp	r3, #0
 8002204:	d03c      	beq.n	8002280 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800220a:	2210      	movs	r2, #16
 800220c:	409a      	lsls	r2, r3
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d018      	beq.n	8002252 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d108      	bne.n	8002240 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002232:	2b00      	cmp	r3, #0
 8002234:	d024      	beq.n	8002280 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	4798      	blx	r3
 800223e:	e01f      	b.n	8002280 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002244:	2b00      	cmp	r3, #0
 8002246:	d01b      	beq.n	8002280 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	4798      	blx	r3
 8002250:	e016      	b.n	8002280 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800225c:	2b00      	cmp	r3, #0
 800225e:	d107      	bne.n	8002270 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f022 0208 	bic.w	r2, r2, #8
 800226e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002274:	2b00      	cmp	r3, #0
 8002276:	d003      	beq.n	8002280 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002284:	2220      	movs	r2, #32
 8002286:	409a      	lsls	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	4013      	ands	r3, r2
 800228c:	2b00      	cmp	r3, #0
 800228e:	f000 808e 	beq.w	80023ae <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0310 	and.w	r3, r3, #16
 800229c:	2b00      	cmp	r3, #0
 800229e:	f000 8086 	beq.w	80023ae <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a6:	2220      	movs	r2, #32
 80022a8:	409a      	lsls	r2, r3
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b05      	cmp	r3, #5
 80022b8:	d136      	bne.n	8002328 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f022 0216 	bic.w	r2, r2, #22
 80022c8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	695a      	ldr	r2, [r3, #20]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022d8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d103      	bne.n	80022ea <HAL_DMA_IRQHandler+0x1da>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d007      	beq.n	80022fa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f022 0208 	bic.w	r2, r2, #8
 80022f8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022fe:	223f      	movs	r2, #63	; 0x3f
 8002300:	409a      	lsls	r2, r3
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2201      	movs	r2, #1
 8002312:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800231a:	2b00      	cmp	r3, #0
 800231c:	d07d      	beq.n	800241a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	4798      	blx	r3
        }
        return;
 8002326:	e078      	b.n	800241a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d01c      	beq.n	8002370 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d108      	bne.n	8002356 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002348:	2b00      	cmp	r3, #0
 800234a:	d030      	beq.n	80023ae <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	4798      	blx	r3
 8002354:	e02b      	b.n	80023ae <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800235a:	2b00      	cmp	r3, #0
 800235c:	d027      	beq.n	80023ae <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	4798      	blx	r3
 8002366:	e022      	b.n	80023ae <HAL_DMA_IRQHandler+0x29e>
 8002368:	20000000 	.word	0x20000000
 800236c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800237a:	2b00      	cmp	r3, #0
 800237c:	d10f      	bne.n	800239e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f022 0210 	bic.w	r2, r2, #16
 800238c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2201      	movs	r2, #1
 800239a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d003      	beq.n	80023ae <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d032      	beq.n	800241c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d022      	beq.n	8002408 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2205      	movs	r2, #5
 80023c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f022 0201 	bic.w	r2, r2, #1
 80023d8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	3301      	adds	r3, #1
 80023de:	60bb      	str	r3, [r7, #8]
 80023e0:	697a      	ldr	r2, [r7, #20]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d307      	bcc.n	80023f6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0301 	and.w	r3, r3, #1
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d1f2      	bne.n	80023da <HAL_DMA_IRQHandler+0x2ca>
 80023f4:	e000      	b.n	80023f8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80023f6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800240c:	2b00      	cmp	r3, #0
 800240e:	d005      	beq.n	800241c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	4798      	blx	r3
 8002418:	e000      	b.n	800241c <HAL_DMA_IRQHandler+0x30c>
        return;
 800241a:	bf00      	nop
    }
  }
}
 800241c:	3718      	adds	r7, #24
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop

08002424 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002424:	b480      	push	{r7}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
 8002430:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002440:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	683a      	ldr	r2, [r7, #0]
 8002448:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	2b40      	cmp	r3, #64	; 0x40
 8002450:	d108      	bne.n	8002464 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	68ba      	ldr	r2, [r7, #8]
 8002460:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002462:	e007      	b.n	8002474 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	68ba      	ldr	r2, [r7, #8]
 800246a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	60da      	str	r2, [r3, #12]
}
 8002474:	bf00      	nop
 8002476:	3714      	adds	r7, #20
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002480:	b480      	push	{r7}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	b2db      	uxtb	r3, r3
 800248e:	3b10      	subs	r3, #16
 8002490:	4a14      	ldr	r2, [pc, #80]	; (80024e4 <DMA_CalcBaseAndBitshift+0x64>)
 8002492:	fba2 2303 	umull	r2, r3, r2, r3
 8002496:	091b      	lsrs	r3, r3, #4
 8002498:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800249a:	4a13      	ldr	r2, [pc, #76]	; (80024e8 <DMA_CalcBaseAndBitshift+0x68>)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	4413      	add	r3, r2
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	461a      	mov	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2b03      	cmp	r3, #3
 80024ac:	d909      	bls.n	80024c2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80024b6:	f023 0303 	bic.w	r3, r3, #3
 80024ba:	1d1a      	adds	r2, r3, #4
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	659a      	str	r2, [r3, #88]	; 0x58
 80024c0:	e007      	b.n	80024d2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80024ca:	f023 0303 	bic.w	r3, r3, #3
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3714      	adds	r7, #20
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	aaaaaaab 	.word	0xaaaaaaab
 80024e8:	080040c8 	.word	0x080040c8

080024ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024f4:	2300      	movs	r3, #0
 80024f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d11f      	bne.n	8002546 <DMA_CheckFifoParam+0x5a>
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	2b03      	cmp	r3, #3
 800250a:	d856      	bhi.n	80025ba <DMA_CheckFifoParam+0xce>
 800250c:	a201      	add	r2, pc, #4	; (adr r2, 8002514 <DMA_CheckFifoParam+0x28>)
 800250e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002512:	bf00      	nop
 8002514:	08002525 	.word	0x08002525
 8002518:	08002537 	.word	0x08002537
 800251c:	08002525 	.word	0x08002525
 8002520:	080025bb 	.word	0x080025bb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002528:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d046      	beq.n	80025be <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002534:	e043      	b.n	80025be <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800253e:	d140      	bne.n	80025c2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002544:	e03d      	b.n	80025c2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800254e:	d121      	bne.n	8002594 <DMA_CheckFifoParam+0xa8>
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	2b03      	cmp	r3, #3
 8002554:	d837      	bhi.n	80025c6 <DMA_CheckFifoParam+0xda>
 8002556:	a201      	add	r2, pc, #4	; (adr r2, 800255c <DMA_CheckFifoParam+0x70>)
 8002558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800255c:	0800256d 	.word	0x0800256d
 8002560:	08002573 	.word	0x08002573
 8002564:	0800256d 	.word	0x0800256d
 8002568:	08002585 	.word	0x08002585
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	73fb      	strb	r3, [r7, #15]
      break;
 8002570:	e030      	b.n	80025d4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002576:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d025      	beq.n	80025ca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002582:	e022      	b.n	80025ca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002588:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800258c:	d11f      	bne.n	80025ce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002592:	e01c      	b.n	80025ce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	2b02      	cmp	r3, #2
 8002598:	d903      	bls.n	80025a2 <DMA_CheckFifoParam+0xb6>
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	2b03      	cmp	r3, #3
 800259e:	d003      	beq.n	80025a8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80025a0:	e018      	b.n	80025d4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	73fb      	strb	r3, [r7, #15]
      break;
 80025a6:	e015      	b.n	80025d4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d00e      	beq.n	80025d2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	73fb      	strb	r3, [r7, #15]
      break;
 80025b8:	e00b      	b.n	80025d2 <DMA_CheckFifoParam+0xe6>
      break;
 80025ba:	bf00      	nop
 80025bc:	e00a      	b.n	80025d4 <DMA_CheckFifoParam+0xe8>
      break;
 80025be:	bf00      	nop
 80025c0:	e008      	b.n	80025d4 <DMA_CheckFifoParam+0xe8>
      break;
 80025c2:	bf00      	nop
 80025c4:	e006      	b.n	80025d4 <DMA_CheckFifoParam+0xe8>
      break;
 80025c6:	bf00      	nop
 80025c8:	e004      	b.n	80025d4 <DMA_CheckFifoParam+0xe8>
      break;
 80025ca:	bf00      	nop
 80025cc:	e002      	b.n	80025d4 <DMA_CheckFifoParam+0xe8>
      break;   
 80025ce:	bf00      	nop
 80025d0:	e000      	b.n	80025d4 <DMA_CheckFifoParam+0xe8>
      break;
 80025d2:	bf00      	nop
    }
  } 
  
  return status; 
 80025d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3714      	adds	r7, #20
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop

080025e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b089      	sub	sp, #36	; 0x24
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025ee:	2300      	movs	r3, #0
 80025f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025f2:	2300      	movs	r3, #0
 80025f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025f6:	2300      	movs	r3, #0
 80025f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025fa:	2300      	movs	r3, #0
 80025fc:	61fb      	str	r3, [r7, #28]
 80025fe:	e159      	b.n	80028b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002600:	2201      	movs	r2, #1
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	4013      	ands	r3, r2
 8002612:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002614:	693a      	ldr	r2, [r7, #16]
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	429a      	cmp	r2, r3
 800261a:	f040 8148 	bne.w	80028ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f003 0303 	and.w	r3, r3, #3
 8002626:	2b01      	cmp	r3, #1
 8002628:	d005      	beq.n	8002636 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002632:	2b02      	cmp	r3, #2
 8002634:	d130      	bne.n	8002698 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	2203      	movs	r2, #3
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	43db      	mvns	r3, r3
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	4013      	ands	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	68da      	ldr	r2, [r3, #12]
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	4313      	orrs	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800266c:	2201      	movs	r2, #1
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	43db      	mvns	r3, r3
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4013      	ands	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	091b      	lsrs	r3, r3, #4
 8002682:	f003 0201 	and.w	r2, r3, #1
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	4313      	orrs	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f003 0303 	and.w	r3, r3, #3
 80026a0:	2b03      	cmp	r3, #3
 80026a2:	d017      	beq.n	80026d4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	2203      	movs	r2, #3
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	43db      	mvns	r3, r3
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	4013      	ands	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f003 0303 	and.w	r3, r3, #3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d123      	bne.n	8002728 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	08da      	lsrs	r2, r3, #3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	3208      	adds	r2, #8
 80026e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	f003 0307 	and.w	r3, r3, #7
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	220f      	movs	r2, #15
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	43db      	mvns	r3, r3
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	4013      	ands	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	691a      	ldr	r2, [r3, #16]
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	f003 0307 	and.w	r3, r3, #7
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	4313      	orrs	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	08da      	lsrs	r2, r3, #3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	3208      	adds	r2, #8
 8002722:	69b9      	ldr	r1, [r7, #24]
 8002724:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	2203      	movs	r2, #3
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	43db      	mvns	r3, r3
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	4013      	ands	r3, r2
 800273e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f003 0203 	and.w	r2, r3, #3
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	4313      	orrs	r3, r2
 8002754:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002764:	2b00      	cmp	r3, #0
 8002766:	f000 80a2 	beq.w	80028ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800276a:	2300      	movs	r3, #0
 800276c:	60fb      	str	r3, [r7, #12]
 800276e:	4b57      	ldr	r3, [pc, #348]	; (80028cc <HAL_GPIO_Init+0x2e8>)
 8002770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002772:	4a56      	ldr	r2, [pc, #344]	; (80028cc <HAL_GPIO_Init+0x2e8>)
 8002774:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002778:	6453      	str	r3, [r2, #68]	; 0x44
 800277a:	4b54      	ldr	r3, [pc, #336]	; (80028cc <HAL_GPIO_Init+0x2e8>)
 800277c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002782:	60fb      	str	r3, [r7, #12]
 8002784:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002786:	4a52      	ldr	r2, [pc, #328]	; (80028d0 <HAL_GPIO_Init+0x2ec>)
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	089b      	lsrs	r3, r3, #2
 800278c:	3302      	adds	r3, #2
 800278e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002792:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	f003 0303 	and.w	r3, r3, #3
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	220f      	movs	r2, #15
 800279e:	fa02 f303 	lsl.w	r3, r2, r3
 80027a2:	43db      	mvns	r3, r3
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	4013      	ands	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a49      	ldr	r2, [pc, #292]	; (80028d4 <HAL_GPIO_Init+0x2f0>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d019      	beq.n	80027e6 <HAL_GPIO_Init+0x202>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a48      	ldr	r2, [pc, #288]	; (80028d8 <HAL_GPIO_Init+0x2f4>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d013      	beq.n	80027e2 <HAL_GPIO_Init+0x1fe>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a47      	ldr	r2, [pc, #284]	; (80028dc <HAL_GPIO_Init+0x2f8>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d00d      	beq.n	80027de <HAL_GPIO_Init+0x1fa>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a46      	ldr	r2, [pc, #280]	; (80028e0 <HAL_GPIO_Init+0x2fc>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d007      	beq.n	80027da <HAL_GPIO_Init+0x1f6>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a45      	ldr	r2, [pc, #276]	; (80028e4 <HAL_GPIO_Init+0x300>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d101      	bne.n	80027d6 <HAL_GPIO_Init+0x1f2>
 80027d2:	2304      	movs	r3, #4
 80027d4:	e008      	b.n	80027e8 <HAL_GPIO_Init+0x204>
 80027d6:	2307      	movs	r3, #7
 80027d8:	e006      	b.n	80027e8 <HAL_GPIO_Init+0x204>
 80027da:	2303      	movs	r3, #3
 80027dc:	e004      	b.n	80027e8 <HAL_GPIO_Init+0x204>
 80027de:	2302      	movs	r3, #2
 80027e0:	e002      	b.n	80027e8 <HAL_GPIO_Init+0x204>
 80027e2:	2301      	movs	r3, #1
 80027e4:	e000      	b.n	80027e8 <HAL_GPIO_Init+0x204>
 80027e6:	2300      	movs	r3, #0
 80027e8:	69fa      	ldr	r2, [r7, #28]
 80027ea:	f002 0203 	and.w	r2, r2, #3
 80027ee:	0092      	lsls	r2, r2, #2
 80027f0:	4093      	lsls	r3, r2
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027f8:	4935      	ldr	r1, [pc, #212]	; (80028d0 <HAL_GPIO_Init+0x2ec>)
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	089b      	lsrs	r3, r3, #2
 80027fe:	3302      	adds	r3, #2
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002806:	4b38      	ldr	r3, [pc, #224]	; (80028e8 <HAL_GPIO_Init+0x304>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	43db      	mvns	r3, r3
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	4013      	ands	r3, r2
 8002814:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d003      	beq.n	800282a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	4313      	orrs	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800282a:	4a2f      	ldr	r2, [pc, #188]	; (80028e8 <HAL_GPIO_Init+0x304>)
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002830:	4b2d      	ldr	r3, [pc, #180]	; (80028e8 <HAL_GPIO_Init+0x304>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	43db      	mvns	r3, r3
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4013      	ands	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d003      	beq.n	8002854 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	4313      	orrs	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002854:	4a24      	ldr	r2, [pc, #144]	; (80028e8 <HAL_GPIO_Init+0x304>)
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800285a:	4b23      	ldr	r3, [pc, #140]	; (80028e8 <HAL_GPIO_Init+0x304>)
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	43db      	mvns	r3, r3
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	4013      	ands	r3, r2
 8002868:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d003      	beq.n	800287e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002876:	69ba      	ldr	r2, [r7, #24]
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	4313      	orrs	r3, r2
 800287c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800287e:	4a1a      	ldr	r2, [pc, #104]	; (80028e8 <HAL_GPIO_Init+0x304>)
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002884:	4b18      	ldr	r3, [pc, #96]	; (80028e8 <HAL_GPIO_Init+0x304>)
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	43db      	mvns	r3, r3
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	4013      	ands	r3, r2
 8002892:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d003      	beq.n	80028a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028a8:	4a0f      	ldr	r2, [pc, #60]	; (80028e8 <HAL_GPIO_Init+0x304>)
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	3301      	adds	r3, #1
 80028b2:	61fb      	str	r3, [r7, #28]
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	2b0f      	cmp	r3, #15
 80028b8:	f67f aea2 	bls.w	8002600 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028bc:	bf00      	nop
 80028be:	bf00      	nop
 80028c0:	3724      	adds	r7, #36	; 0x24
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	40023800 	.word	0x40023800
 80028d0:	40013800 	.word	0x40013800
 80028d4:	40020000 	.word	0x40020000
 80028d8:	40020400 	.word	0x40020400
 80028dc:	40020800 	.word	0x40020800
 80028e0:	40020c00 	.word	0x40020c00
 80028e4:	40021000 	.word	0x40021000
 80028e8:	40013c00 	.word	0x40013c00

080028ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e264      	b.n	8002dc8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	2b00      	cmp	r3, #0
 8002908:	d075      	beq.n	80029f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800290a:	4ba3      	ldr	r3, [pc, #652]	; (8002b98 <HAL_RCC_OscConfig+0x2ac>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f003 030c 	and.w	r3, r3, #12
 8002912:	2b04      	cmp	r3, #4
 8002914:	d00c      	beq.n	8002930 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002916:	4ba0      	ldr	r3, [pc, #640]	; (8002b98 <HAL_RCC_OscConfig+0x2ac>)
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800291e:	2b08      	cmp	r3, #8
 8002920:	d112      	bne.n	8002948 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002922:	4b9d      	ldr	r3, [pc, #628]	; (8002b98 <HAL_RCC_OscConfig+0x2ac>)
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800292a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800292e:	d10b      	bne.n	8002948 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002930:	4b99      	ldr	r3, [pc, #612]	; (8002b98 <HAL_RCC_OscConfig+0x2ac>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d05b      	beq.n	80029f4 <HAL_RCC_OscConfig+0x108>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d157      	bne.n	80029f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e23f      	b.n	8002dc8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002950:	d106      	bne.n	8002960 <HAL_RCC_OscConfig+0x74>
 8002952:	4b91      	ldr	r3, [pc, #580]	; (8002b98 <HAL_RCC_OscConfig+0x2ac>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a90      	ldr	r2, [pc, #576]	; (8002b98 <HAL_RCC_OscConfig+0x2ac>)
 8002958:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800295c:	6013      	str	r3, [r2, #0]
 800295e:	e01d      	b.n	800299c <HAL_RCC_OscConfig+0xb0>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002968:	d10c      	bne.n	8002984 <HAL_RCC_OscConfig+0x98>
 800296a:	4b8b      	ldr	r3, [pc, #556]	; (8002b98 <HAL_RCC_OscConfig+0x2ac>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a8a      	ldr	r2, [pc, #552]	; (8002b98 <HAL_RCC_OscConfig+0x2ac>)
 8002970:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002974:	6013      	str	r3, [r2, #0]
 8002976:	4b88      	ldr	r3, [pc, #544]	; (8002b98 <HAL_RCC_OscConfig+0x2ac>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a87      	ldr	r2, [pc, #540]	; (8002b98 <HAL_RCC_OscConfig+0x2ac>)
 800297c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002980:	6013      	str	r3, [r2, #0]
 8002982:	e00b      	b.n	800299c <HAL_RCC_OscConfig+0xb0>
 8002984:	4b84      	ldr	r3, [pc, #528]	; (8002b98 <HAL_RCC_OscConfig+0x2ac>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a83      	ldr	r2, [pc, #524]	; (8002b98 <HAL_RCC_OscConfig+0x2ac>)
 800298a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800298e:	6013      	str	r3, [r2, #0]
 8002990:	4b81      	ldr	r3, [pc, #516]	; (8002b98 <HAL_RCC_OscConfig+0x2ac>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a80      	ldr	r2, [pc, #512]	; (8002b98 <HAL_RCC_OscConfig+0x2ac>)
 8002996:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800299a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d013      	beq.n	80029cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a4:	f7fe fd6a 	bl	800147c <HAL_GetTick>
 80029a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029aa:	e008      	b.n	80029be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029ac:	f7fe fd66 	bl	800147c <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b64      	cmp	r3, #100	; 0x64
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e204      	b.n	8002dc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029be:	4b76      	ldr	r3, [pc, #472]	; (8002b98 <HAL_RCC_OscConfig+0x2ac>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d0f0      	beq.n	80029ac <HAL_RCC_OscConfig+0xc0>
 80029ca:	e014      	b.n	80029f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029cc:	f7fe fd56 	bl	800147c <HAL_GetTick>
 80029d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029d2:	e008      	b.n	80029e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029d4:	f7fe fd52 	bl	800147c <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b64      	cmp	r3, #100	; 0x64
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e1f0      	b.n	8002dc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029e6:	4b6c      	ldr	r3, [pc, #432]	; (8002b98 <HAL_RCC_OscConfig+0x2ac>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d1f0      	bne.n	80029d4 <HAL_RCC_OscConfig+0xe8>
 80029f2:	e000      	b.n	80029f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d063      	beq.n	8002aca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a02:	4b65      	ldr	r3, [pc, #404]	; (8002b98 <HAL_RCC_OscConfig+0x2ac>)
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f003 030c 	and.w	r3, r3, #12
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00b      	beq.n	8002a26 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a0e:	4b62      	ldr	r3, [pc, #392]	; (8002b98 <HAL_RCC_OscConfig+0x2ac>)
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a16:	2b08      	cmp	r3, #8
 8002a18:	d11c      	bne.n	8002a54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a1a:	4b5f      	ldr	r3, [pc, #380]	; (8002b98 <HAL_RCC_OscConfig+0x2ac>)
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d116      	bne.n	8002a54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a26:	4b5c      	ldr	r3, [pc, #368]	; (8002b98 <HAL_RCC_OscConfig+0x2ac>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d005      	beq.n	8002a3e <HAL_RCC_OscConfig+0x152>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d001      	beq.n	8002a3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e1c4      	b.n	8002dc8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a3e:	4b56      	ldr	r3, [pc, #344]	; (8002b98 <HAL_RCC_OscConfig+0x2ac>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	4952      	ldr	r1, [pc, #328]	; (8002b98 <HAL_RCC_OscConfig+0x2ac>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a52:	e03a      	b.n	8002aca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d020      	beq.n	8002a9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a5c:	4b4f      	ldr	r3, [pc, #316]	; (8002b9c <HAL_RCC_OscConfig+0x2b0>)
 8002a5e:	2201      	movs	r2, #1
 8002a60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a62:	f7fe fd0b 	bl	800147c <HAL_GetTick>
 8002a66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a68:	e008      	b.n	8002a7c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a6a:	f7fe fd07 	bl	800147c <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d901      	bls.n	8002a7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e1a5      	b.n	8002dc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a7c:	4b46      	ldr	r3, [pc, #280]	; (8002b98 <HAL_RCC_OscConfig+0x2ac>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0302 	and.w	r3, r3, #2
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d0f0      	beq.n	8002a6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a88:	4b43      	ldr	r3, [pc, #268]	; (8002b98 <HAL_RCC_OscConfig+0x2ac>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	691b      	ldr	r3, [r3, #16]
 8002a94:	00db      	lsls	r3, r3, #3
 8002a96:	4940      	ldr	r1, [pc, #256]	; (8002b98 <HAL_RCC_OscConfig+0x2ac>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	600b      	str	r3, [r1, #0]
 8002a9c:	e015      	b.n	8002aca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a9e:	4b3f      	ldr	r3, [pc, #252]	; (8002b9c <HAL_RCC_OscConfig+0x2b0>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa4:	f7fe fcea 	bl	800147c <HAL_GetTick>
 8002aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aaa:	e008      	b.n	8002abe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002aac:	f7fe fce6 	bl	800147c <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d901      	bls.n	8002abe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e184      	b.n	8002dc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002abe:	4b36      	ldr	r3, [pc, #216]	; (8002b98 <HAL_RCC_OscConfig+0x2ac>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d1f0      	bne.n	8002aac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0308 	and.w	r3, r3, #8
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d030      	beq.n	8002b38 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d016      	beq.n	8002b0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ade:	4b30      	ldr	r3, [pc, #192]	; (8002ba0 <HAL_RCC_OscConfig+0x2b4>)
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ae4:	f7fe fcca 	bl	800147c <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aea:	e008      	b.n	8002afe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002aec:	f7fe fcc6 	bl	800147c <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e164      	b.n	8002dc8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002afe:	4b26      	ldr	r3, [pc, #152]	; (8002b98 <HAL_RCC_OscConfig+0x2ac>)
 8002b00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d0f0      	beq.n	8002aec <HAL_RCC_OscConfig+0x200>
 8002b0a:	e015      	b.n	8002b38 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b0c:	4b24      	ldr	r3, [pc, #144]	; (8002ba0 <HAL_RCC_OscConfig+0x2b4>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b12:	f7fe fcb3 	bl	800147c <HAL_GetTick>
 8002b16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b18:	e008      	b.n	8002b2c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b1a:	f7fe fcaf 	bl	800147c <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d901      	bls.n	8002b2c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e14d      	b.n	8002dc8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b2c:	4b1a      	ldr	r3, [pc, #104]	; (8002b98 <HAL_RCC_OscConfig+0x2ac>)
 8002b2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b30:	f003 0302 	and.w	r3, r3, #2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d1f0      	bne.n	8002b1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0304 	and.w	r3, r3, #4
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	f000 80a0 	beq.w	8002c86 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b46:	2300      	movs	r3, #0
 8002b48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b4a:	4b13      	ldr	r3, [pc, #76]	; (8002b98 <HAL_RCC_OscConfig+0x2ac>)
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d10f      	bne.n	8002b76 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b56:	2300      	movs	r3, #0
 8002b58:	60bb      	str	r3, [r7, #8]
 8002b5a:	4b0f      	ldr	r3, [pc, #60]	; (8002b98 <HAL_RCC_OscConfig+0x2ac>)
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	4a0e      	ldr	r2, [pc, #56]	; (8002b98 <HAL_RCC_OscConfig+0x2ac>)
 8002b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b64:	6413      	str	r3, [r2, #64]	; 0x40
 8002b66:	4b0c      	ldr	r3, [pc, #48]	; (8002b98 <HAL_RCC_OscConfig+0x2ac>)
 8002b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b6e:	60bb      	str	r3, [r7, #8]
 8002b70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b72:	2301      	movs	r3, #1
 8002b74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b76:	4b0b      	ldr	r3, [pc, #44]	; (8002ba4 <HAL_RCC_OscConfig+0x2b8>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d121      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b82:	4b08      	ldr	r3, [pc, #32]	; (8002ba4 <HAL_RCC_OscConfig+0x2b8>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a07      	ldr	r2, [pc, #28]	; (8002ba4 <HAL_RCC_OscConfig+0x2b8>)
 8002b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b8e:	f7fe fc75 	bl	800147c <HAL_GetTick>
 8002b92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b94:	e011      	b.n	8002bba <HAL_RCC_OscConfig+0x2ce>
 8002b96:	bf00      	nop
 8002b98:	40023800 	.word	0x40023800
 8002b9c:	42470000 	.word	0x42470000
 8002ba0:	42470e80 	.word	0x42470e80
 8002ba4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ba8:	f7fe fc68 	bl	800147c <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e106      	b.n	8002dc8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bba:	4b85      	ldr	r3, [pc, #532]	; (8002dd0 <HAL_RCC_OscConfig+0x4e4>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d0f0      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d106      	bne.n	8002bdc <HAL_RCC_OscConfig+0x2f0>
 8002bce:	4b81      	ldr	r3, [pc, #516]	; (8002dd4 <HAL_RCC_OscConfig+0x4e8>)
 8002bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd2:	4a80      	ldr	r2, [pc, #512]	; (8002dd4 <HAL_RCC_OscConfig+0x4e8>)
 8002bd4:	f043 0301 	orr.w	r3, r3, #1
 8002bd8:	6713      	str	r3, [r2, #112]	; 0x70
 8002bda:	e01c      	b.n	8002c16 <HAL_RCC_OscConfig+0x32a>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	2b05      	cmp	r3, #5
 8002be2:	d10c      	bne.n	8002bfe <HAL_RCC_OscConfig+0x312>
 8002be4:	4b7b      	ldr	r3, [pc, #492]	; (8002dd4 <HAL_RCC_OscConfig+0x4e8>)
 8002be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be8:	4a7a      	ldr	r2, [pc, #488]	; (8002dd4 <HAL_RCC_OscConfig+0x4e8>)
 8002bea:	f043 0304 	orr.w	r3, r3, #4
 8002bee:	6713      	str	r3, [r2, #112]	; 0x70
 8002bf0:	4b78      	ldr	r3, [pc, #480]	; (8002dd4 <HAL_RCC_OscConfig+0x4e8>)
 8002bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf4:	4a77      	ldr	r2, [pc, #476]	; (8002dd4 <HAL_RCC_OscConfig+0x4e8>)
 8002bf6:	f043 0301 	orr.w	r3, r3, #1
 8002bfa:	6713      	str	r3, [r2, #112]	; 0x70
 8002bfc:	e00b      	b.n	8002c16 <HAL_RCC_OscConfig+0x32a>
 8002bfe:	4b75      	ldr	r3, [pc, #468]	; (8002dd4 <HAL_RCC_OscConfig+0x4e8>)
 8002c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c02:	4a74      	ldr	r2, [pc, #464]	; (8002dd4 <HAL_RCC_OscConfig+0x4e8>)
 8002c04:	f023 0301 	bic.w	r3, r3, #1
 8002c08:	6713      	str	r3, [r2, #112]	; 0x70
 8002c0a:	4b72      	ldr	r3, [pc, #456]	; (8002dd4 <HAL_RCC_OscConfig+0x4e8>)
 8002c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c0e:	4a71      	ldr	r2, [pc, #452]	; (8002dd4 <HAL_RCC_OscConfig+0x4e8>)
 8002c10:	f023 0304 	bic.w	r3, r3, #4
 8002c14:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d015      	beq.n	8002c4a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c1e:	f7fe fc2d 	bl	800147c <HAL_GetTick>
 8002c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c24:	e00a      	b.n	8002c3c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c26:	f7fe fc29 	bl	800147c <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d901      	bls.n	8002c3c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e0c5      	b.n	8002dc8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c3c:	4b65      	ldr	r3, [pc, #404]	; (8002dd4 <HAL_RCC_OscConfig+0x4e8>)
 8002c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c40:	f003 0302 	and.w	r3, r3, #2
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d0ee      	beq.n	8002c26 <HAL_RCC_OscConfig+0x33a>
 8002c48:	e014      	b.n	8002c74 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c4a:	f7fe fc17 	bl	800147c <HAL_GetTick>
 8002c4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c50:	e00a      	b.n	8002c68 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c52:	f7fe fc13 	bl	800147c <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d901      	bls.n	8002c68 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e0af      	b.n	8002dc8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c68:	4b5a      	ldr	r3, [pc, #360]	; (8002dd4 <HAL_RCC_OscConfig+0x4e8>)
 8002c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d1ee      	bne.n	8002c52 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c74:	7dfb      	ldrb	r3, [r7, #23]
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d105      	bne.n	8002c86 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c7a:	4b56      	ldr	r3, [pc, #344]	; (8002dd4 <HAL_RCC_OscConfig+0x4e8>)
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	4a55      	ldr	r2, [pc, #340]	; (8002dd4 <HAL_RCC_OscConfig+0x4e8>)
 8002c80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c84:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f000 809b 	beq.w	8002dc6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c90:	4b50      	ldr	r3, [pc, #320]	; (8002dd4 <HAL_RCC_OscConfig+0x4e8>)
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f003 030c 	and.w	r3, r3, #12
 8002c98:	2b08      	cmp	r3, #8
 8002c9a:	d05c      	beq.n	8002d56 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d141      	bne.n	8002d28 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ca4:	4b4c      	ldr	r3, [pc, #304]	; (8002dd8 <HAL_RCC_OscConfig+0x4ec>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002caa:	f7fe fbe7 	bl	800147c <HAL_GetTick>
 8002cae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cb0:	e008      	b.n	8002cc4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cb2:	f7fe fbe3 	bl	800147c <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d901      	bls.n	8002cc4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e081      	b.n	8002dc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cc4:	4b43      	ldr	r3, [pc, #268]	; (8002dd4 <HAL_RCC_OscConfig+0x4e8>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d1f0      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	69da      	ldr	r2, [r3, #28]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a1b      	ldr	r3, [r3, #32]
 8002cd8:	431a      	orrs	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cde:	019b      	lsls	r3, r3, #6
 8002ce0:	431a      	orrs	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce6:	085b      	lsrs	r3, r3, #1
 8002ce8:	3b01      	subs	r3, #1
 8002cea:	041b      	lsls	r3, r3, #16
 8002cec:	431a      	orrs	r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf2:	061b      	lsls	r3, r3, #24
 8002cf4:	4937      	ldr	r1, [pc, #220]	; (8002dd4 <HAL_RCC_OscConfig+0x4e8>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cfa:	4b37      	ldr	r3, [pc, #220]	; (8002dd8 <HAL_RCC_OscConfig+0x4ec>)
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d00:	f7fe fbbc 	bl	800147c <HAL_GetTick>
 8002d04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d06:	e008      	b.n	8002d1a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d08:	f7fe fbb8 	bl	800147c <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e056      	b.n	8002dc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d1a:	4b2e      	ldr	r3, [pc, #184]	; (8002dd4 <HAL_RCC_OscConfig+0x4e8>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d0f0      	beq.n	8002d08 <HAL_RCC_OscConfig+0x41c>
 8002d26:	e04e      	b.n	8002dc6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d28:	4b2b      	ldr	r3, [pc, #172]	; (8002dd8 <HAL_RCC_OscConfig+0x4ec>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d2e:	f7fe fba5 	bl	800147c <HAL_GetTick>
 8002d32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d34:	e008      	b.n	8002d48 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d36:	f7fe fba1 	bl	800147c <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d901      	bls.n	8002d48 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e03f      	b.n	8002dc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d48:	4b22      	ldr	r3, [pc, #136]	; (8002dd4 <HAL_RCC_OscConfig+0x4e8>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d1f0      	bne.n	8002d36 <HAL_RCC_OscConfig+0x44a>
 8002d54:	e037      	b.n	8002dc6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	699b      	ldr	r3, [r3, #24]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d101      	bne.n	8002d62 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e032      	b.n	8002dc8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d62:	4b1c      	ldr	r3, [pc, #112]	; (8002dd4 <HAL_RCC_OscConfig+0x4e8>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d028      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d121      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d11a      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d92:	4013      	ands	r3, r2
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d98:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d111      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da8:	085b      	lsrs	r3, r3, #1
 8002daa:	3b01      	subs	r3, #1
 8002dac:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d107      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dbc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d001      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e000      	b.n	8002dc8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3718      	adds	r7, #24
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	40007000 	.word	0x40007000
 8002dd4:	40023800 	.word	0x40023800
 8002dd8:	42470060 	.word	0x42470060

08002ddc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d101      	bne.n	8002df0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e0cc      	b.n	8002f8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002df0:	4b68      	ldr	r3, [pc, #416]	; (8002f94 <HAL_RCC_ClockConfig+0x1b8>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0307 	and.w	r3, r3, #7
 8002df8:	683a      	ldr	r2, [r7, #0]
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d90c      	bls.n	8002e18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dfe:	4b65      	ldr	r3, [pc, #404]	; (8002f94 <HAL_RCC_ClockConfig+0x1b8>)
 8002e00:	683a      	ldr	r2, [r7, #0]
 8002e02:	b2d2      	uxtb	r2, r2
 8002e04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e06:	4b63      	ldr	r3, [pc, #396]	; (8002f94 <HAL_RCC_ClockConfig+0x1b8>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0307 	and.w	r3, r3, #7
 8002e0e:	683a      	ldr	r2, [r7, #0]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d001      	beq.n	8002e18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e0b8      	b.n	8002f8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0302 	and.w	r3, r3, #2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d020      	beq.n	8002e66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0304 	and.w	r3, r3, #4
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d005      	beq.n	8002e3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e30:	4b59      	ldr	r3, [pc, #356]	; (8002f98 <HAL_RCC_ClockConfig+0x1bc>)
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	4a58      	ldr	r2, [pc, #352]	; (8002f98 <HAL_RCC_ClockConfig+0x1bc>)
 8002e36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0308 	and.w	r3, r3, #8
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d005      	beq.n	8002e54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e48:	4b53      	ldr	r3, [pc, #332]	; (8002f98 <HAL_RCC_ClockConfig+0x1bc>)
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	4a52      	ldr	r2, [pc, #328]	; (8002f98 <HAL_RCC_ClockConfig+0x1bc>)
 8002e4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e54:	4b50      	ldr	r3, [pc, #320]	; (8002f98 <HAL_RCC_ClockConfig+0x1bc>)
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	494d      	ldr	r1, [pc, #308]	; (8002f98 <HAL_RCC_ClockConfig+0x1bc>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d044      	beq.n	8002efc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d107      	bne.n	8002e8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e7a:	4b47      	ldr	r3, [pc, #284]	; (8002f98 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d119      	bne.n	8002eba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e07f      	b.n	8002f8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d003      	beq.n	8002e9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e96:	2b03      	cmp	r3, #3
 8002e98:	d107      	bne.n	8002eaa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e9a:	4b3f      	ldr	r3, [pc, #252]	; (8002f98 <HAL_RCC_ClockConfig+0x1bc>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d109      	bne.n	8002eba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e06f      	b.n	8002f8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eaa:	4b3b      	ldr	r3, [pc, #236]	; (8002f98 <HAL_RCC_ClockConfig+0x1bc>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d101      	bne.n	8002eba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e067      	b.n	8002f8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002eba:	4b37      	ldr	r3, [pc, #220]	; (8002f98 <HAL_RCC_ClockConfig+0x1bc>)
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f023 0203 	bic.w	r2, r3, #3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	4934      	ldr	r1, [pc, #208]	; (8002f98 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ecc:	f7fe fad6 	bl	800147c <HAL_GetTick>
 8002ed0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ed2:	e00a      	b.n	8002eea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ed4:	f7fe fad2 	bl	800147c <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e04f      	b.n	8002f8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eea:	4b2b      	ldr	r3, [pc, #172]	; (8002f98 <HAL_RCC_ClockConfig+0x1bc>)
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f003 020c 	and.w	r2, r3, #12
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d1eb      	bne.n	8002ed4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002efc:	4b25      	ldr	r3, [pc, #148]	; (8002f94 <HAL_RCC_ClockConfig+0x1b8>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0307 	and.w	r3, r3, #7
 8002f04:	683a      	ldr	r2, [r7, #0]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d20c      	bcs.n	8002f24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f0a:	4b22      	ldr	r3, [pc, #136]	; (8002f94 <HAL_RCC_ClockConfig+0x1b8>)
 8002f0c:	683a      	ldr	r2, [r7, #0]
 8002f0e:	b2d2      	uxtb	r2, r2
 8002f10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f12:	4b20      	ldr	r3, [pc, #128]	; (8002f94 <HAL_RCC_ClockConfig+0x1b8>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0307 	and.w	r3, r3, #7
 8002f1a:	683a      	ldr	r2, [r7, #0]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d001      	beq.n	8002f24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e032      	b.n	8002f8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0304 	and.w	r3, r3, #4
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d008      	beq.n	8002f42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f30:	4b19      	ldr	r3, [pc, #100]	; (8002f98 <HAL_RCC_ClockConfig+0x1bc>)
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	4916      	ldr	r1, [pc, #88]	; (8002f98 <HAL_RCC_ClockConfig+0x1bc>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0308 	and.w	r3, r3, #8
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d009      	beq.n	8002f62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f4e:	4b12      	ldr	r3, [pc, #72]	; (8002f98 <HAL_RCC_ClockConfig+0x1bc>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	00db      	lsls	r3, r3, #3
 8002f5c:	490e      	ldr	r1, [pc, #56]	; (8002f98 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f62:	f000 f821 	bl	8002fa8 <HAL_RCC_GetSysClockFreq>
 8002f66:	4602      	mov	r2, r0
 8002f68:	4b0b      	ldr	r3, [pc, #44]	; (8002f98 <HAL_RCC_ClockConfig+0x1bc>)
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	091b      	lsrs	r3, r3, #4
 8002f6e:	f003 030f 	and.w	r3, r3, #15
 8002f72:	490a      	ldr	r1, [pc, #40]	; (8002f9c <HAL_RCC_ClockConfig+0x1c0>)
 8002f74:	5ccb      	ldrb	r3, [r1, r3]
 8002f76:	fa22 f303 	lsr.w	r3, r2, r3
 8002f7a:	4a09      	ldr	r2, [pc, #36]	; (8002fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f7e:	4b09      	ldr	r3, [pc, #36]	; (8002fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7fe fa36 	bl	80013f4 <HAL_InitTick>

  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3710      	adds	r7, #16
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	40023c00 	.word	0x40023c00
 8002f98:	40023800 	.word	0x40023800
 8002f9c:	080040b0 	.word	0x080040b0
 8002fa0:	20000000 	.word	0x20000000
 8002fa4:	20000004 	.word	0x20000004

08002fa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fa8:	b5b0      	push	{r4, r5, r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002fae:	2100      	movs	r1, #0
 8002fb0:	6079      	str	r1, [r7, #4]
 8002fb2:	2100      	movs	r1, #0
 8002fb4:	60f9      	str	r1, [r7, #12]
 8002fb6:	2100      	movs	r1, #0
 8002fb8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002fba:	2100      	movs	r1, #0
 8002fbc:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fbe:	4952      	ldr	r1, [pc, #328]	; (8003108 <HAL_RCC_GetSysClockFreq+0x160>)
 8002fc0:	6889      	ldr	r1, [r1, #8]
 8002fc2:	f001 010c 	and.w	r1, r1, #12
 8002fc6:	2908      	cmp	r1, #8
 8002fc8:	d00d      	beq.n	8002fe6 <HAL_RCC_GetSysClockFreq+0x3e>
 8002fca:	2908      	cmp	r1, #8
 8002fcc:	f200 8094 	bhi.w	80030f8 <HAL_RCC_GetSysClockFreq+0x150>
 8002fd0:	2900      	cmp	r1, #0
 8002fd2:	d002      	beq.n	8002fda <HAL_RCC_GetSysClockFreq+0x32>
 8002fd4:	2904      	cmp	r1, #4
 8002fd6:	d003      	beq.n	8002fe0 <HAL_RCC_GetSysClockFreq+0x38>
 8002fd8:	e08e      	b.n	80030f8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fda:	4b4c      	ldr	r3, [pc, #304]	; (800310c <HAL_RCC_GetSysClockFreq+0x164>)
 8002fdc:	60bb      	str	r3, [r7, #8]
       break;
 8002fde:	e08e      	b.n	80030fe <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fe0:	4b4b      	ldr	r3, [pc, #300]	; (8003110 <HAL_RCC_GetSysClockFreq+0x168>)
 8002fe2:	60bb      	str	r3, [r7, #8]
      break;
 8002fe4:	e08b      	b.n	80030fe <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fe6:	4948      	ldr	r1, [pc, #288]	; (8003108 <HAL_RCC_GetSysClockFreq+0x160>)
 8002fe8:	6849      	ldr	r1, [r1, #4]
 8002fea:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002fee:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ff0:	4945      	ldr	r1, [pc, #276]	; (8003108 <HAL_RCC_GetSysClockFreq+0x160>)
 8002ff2:	6849      	ldr	r1, [r1, #4]
 8002ff4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002ff8:	2900      	cmp	r1, #0
 8002ffa:	d024      	beq.n	8003046 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ffc:	4942      	ldr	r1, [pc, #264]	; (8003108 <HAL_RCC_GetSysClockFreq+0x160>)
 8002ffe:	6849      	ldr	r1, [r1, #4]
 8003000:	0989      	lsrs	r1, r1, #6
 8003002:	4608      	mov	r0, r1
 8003004:	f04f 0100 	mov.w	r1, #0
 8003008:	f240 14ff 	movw	r4, #511	; 0x1ff
 800300c:	f04f 0500 	mov.w	r5, #0
 8003010:	ea00 0204 	and.w	r2, r0, r4
 8003014:	ea01 0305 	and.w	r3, r1, r5
 8003018:	493d      	ldr	r1, [pc, #244]	; (8003110 <HAL_RCC_GetSysClockFreq+0x168>)
 800301a:	fb01 f003 	mul.w	r0, r1, r3
 800301e:	2100      	movs	r1, #0
 8003020:	fb01 f102 	mul.w	r1, r1, r2
 8003024:	1844      	adds	r4, r0, r1
 8003026:	493a      	ldr	r1, [pc, #232]	; (8003110 <HAL_RCC_GetSysClockFreq+0x168>)
 8003028:	fba2 0101 	umull	r0, r1, r2, r1
 800302c:	1863      	adds	r3, r4, r1
 800302e:	4619      	mov	r1, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	461a      	mov	r2, r3
 8003034:	f04f 0300 	mov.w	r3, #0
 8003038:	f7fd fb6e 	bl	8000718 <__aeabi_uldivmod>
 800303c:	4602      	mov	r2, r0
 800303e:	460b      	mov	r3, r1
 8003040:	4613      	mov	r3, r2
 8003042:	60fb      	str	r3, [r7, #12]
 8003044:	e04a      	b.n	80030dc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003046:	4b30      	ldr	r3, [pc, #192]	; (8003108 <HAL_RCC_GetSysClockFreq+0x160>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	099b      	lsrs	r3, r3, #6
 800304c:	461a      	mov	r2, r3
 800304e:	f04f 0300 	mov.w	r3, #0
 8003052:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003056:	f04f 0100 	mov.w	r1, #0
 800305a:	ea02 0400 	and.w	r4, r2, r0
 800305e:	ea03 0501 	and.w	r5, r3, r1
 8003062:	4620      	mov	r0, r4
 8003064:	4629      	mov	r1, r5
 8003066:	f04f 0200 	mov.w	r2, #0
 800306a:	f04f 0300 	mov.w	r3, #0
 800306e:	014b      	lsls	r3, r1, #5
 8003070:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003074:	0142      	lsls	r2, r0, #5
 8003076:	4610      	mov	r0, r2
 8003078:	4619      	mov	r1, r3
 800307a:	1b00      	subs	r0, r0, r4
 800307c:	eb61 0105 	sbc.w	r1, r1, r5
 8003080:	f04f 0200 	mov.w	r2, #0
 8003084:	f04f 0300 	mov.w	r3, #0
 8003088:	018b      	lsls	r3, r1, #6
 800308a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800308e:	0182      	lsls	r2, r0, #6
 8003090:	1a12      	subs	r2, r2, r0
 8003092:	eb63 0301 	sbc.w	r3, r3, r1
 8003096:	f04f 0000 	mov.w	r0, #0
 800309a:	f04f 0100 	mov.w	r1, #0
 800309e:	00d9      	lsls	r1, r3, #3
 80030a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80030a4:	00d0      	lsls	r0, r2, #3
 80030a6:	4602      	mov	r2, r0
 80030a8:	460b      	mov	r3, r1
 80030aa:	1912      	adds	r2, r2, r4
 80030ac:	eb45 0303 	adc.w	r3, r5, r3
 80030b0:	f04f 0000 	mov.w	r0, #0
 80030b4:	f04f 0100 	mov.w	r1, #0
 80030b8:	0299      	lsls	r1, r3, #10
 80030ba:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80030be:	0290      	lsls	r0, r2, #10
 80030c0:	4602      	mov	r2, r0
 80030c2:	460b      	mov	r3, r1
 80030c4:	4610      	mov	r0, r2
 80030c6:	4619      	mov	r1, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	461a      	mov	r2, r3
 80030cc:	f04f 0300 	mov.w	r3, #0
 80030d0:	f7fd fb22 	bl	8000718 <__aeabi_uldivmod>
 80030d4:	4602      	mov	r2, r0
 80030d6:	460b      	mov	r3, r1
 80030d8:	4613      	mov	r3, r2
 80030da:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80030dc:	4b0a      	ldr	r3, [pc, #40]	; (8003108 <HAL_RCC_GetSysClockFreq+0x160>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	0c1b      	lsrs	r3, r3, #16
 80030e2:	f003 0303 	and.w	r3, r3, #3
 80030e6:	3301      	adds	r3, #1
 80030e8:	005b      	lsls	r3, r3, #1
 80030ea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80030ec:	68fa      	ldr	r2, [r7, #12]
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f4:	60bb      	str	r3, [r7, #8]
      break;
 80030f6:	e002      	b.n	80030fe <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030f8:	4b04      	ldr	r3, [pc, #16]	; (800310c <HAL_RCC_GetSysClockFreq+0x164>)
 80030fa:	60bb      	str	r3, [r7, #8]
      break;
 80030fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030fe:	68bb      	ldr	r3, [r7, #8]
}
 8003100:	4618      	mov	r0, r3
 8003102:	3710      	adds	r7, #16
 8003104:	46bd      	mov	sp, r7
 8003106:	bdb0      	pop	{r4, r5, r7, pc}
 8003108:	40023800 	.word	0x40023800
 800310c:	00f42400 	.word	0x00f42400
 8003110:	017d7840 	.word	0x017d7840

08003114 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003114:	b480      	push	{r7}
 8003116:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003118:	4b03      	ldr	r3, [pc, #12]	; (8003128 <HAL_RCC_GetHCLKFreq+0x14>)
 800311a:	681b      	ldr	r3, [r3, #0]
}
 800311c:	4618      	mov	r0, r3
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	20000000 	.word	0x20000000

0800312c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003130:	f7ff fff0 	bl	8003114 <HAL_RCC_GetHCLKFreq>
 8003134:	4602      	mov	r2, r0
 8003136:	4b05      	ldr	r3, [pc, #20]	; (800314c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	0a9b      	lsrs	r3, r3, #10
 800313c:	f003 0307 	and.w	r3, r3, #7
 8003140:	4903      	ldr	r1, [pc, #12]	; (8003150 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003142:	5ccb      	ldrb	r3, [r1, r3]
 8003144:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003148:	4618      	mov	r0, r3
 800314a:	bd80      	pop	{r7, pc}
 800314c:	40023800 	.word	0x40023800
 8003150:	080040c0 	.word	0x080040c0

08003154 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003158:	f7ff ffdc 	bl	8003114 <HAL_RCC_GetHCLKFreq>
 800315c:	4602      	mov	r2, r0
 800315e:	4b05      	ldr	r3, [pc, #20]	; (8003174 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	0b5b      	lsrs	r3, r3, #13
 8003164:	f003 0307 	and.w	r3, r3, #7
 8003168:	4903      	ldr	r1, [pc, #12]	; (8003178 <HAL_RCC_GetPCLK2Freq+0x24>)
 800316a:	5ccb      	ldrb	r3, [r1, r3]
 800316c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003170:	4618      	mov	r0, r3
 8003172:	bd80      	pop	{r7, pc}
 8003174:	40023800 	.word	0x40023800
 8003178:	080040c0 	.word	0x080040c0

0800317c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e03f      	b.n	800320e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d106      	bne.n	80031a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f7fe f816 	bl	80011d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2224      	movs	r2, #36	; 0x24
 80031ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	68da      	ldr	r2, [r3, #12]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f000 f905 	bl	80033d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	691a      	ldr	r2, [r3, #16]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	695a      	ldr	r2, [r3, #20]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68da      	ldr	r2, [r3, #12]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2220      	movs	r2, #32
 8003200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2220      	movs	r2, #32
 8003208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3708      	adds	r7, #8
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}

08003216 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003216:	b580      	push	{r7, lr}
 8003218:	b08a      	sub	sp, #40	; 0x28
 800321a:	af02      	add	r7, sp, #8
 800321c:	60f8      	str	r0, [r7, #12]
 800321e:	60b9      	str	r1, [r7, #8]
 8003220:	603b      	str	r3, [r7, #0]
 8003222:	4613      	mov	r3, r2
 8003224:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003226:	2300      	movs	r3, #0
 8003228:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003230:	b2db      	uxtb	r3, r3
 8003232:	2b20      	cmp	r3, #32
 8003234:	d17c      	bne.n	8003330 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d002      	beq.n	8003242 <HAL_UART_Transmit+0x2c>
 800323c:	88fb      	ldrh	r3, [r7, #6]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d101      	bne.n	8003246 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e075      	b.n	8003332 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800324c:	2b01      	cmp	r3, #1
 800324e:	d101      	bne.n	8003254 <HAL_UART_Transmit+0x3e>
 8003250:	2302      	movs	r3, #2
 8003252:	e06e      	b.n	8003332 <HAL_UART_Transmit+0x11c>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2221      	movs	r2, #33	; 0x21
 8003266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800326a:	f7fe f907 	bl	800147c <HAL_GetTick>
 800326e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	88fa      	ldrh	r2, [r7, #6]
 8003274:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	88fa      	ldrh	r2, [r7, #6]
 800327a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003284:	d108      	bne.n	8003298 <HAL_UART_Transmit+0x82>
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d104      	bne.n	8003298 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800328e:	2300      	movs	r3, #0
 8003290:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	61bb      	str	r3, [r7, #24]
 8003296:	e003      	b.n	80032a0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800329c:	2300      	movs	r3, #0
 800329e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80032a8:	e02a      	b.n	8003300 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	9300      	str	r3, [sp, #0]
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	2200      	movs	r2, #0
 80032b2:	2180      	movs	r1, #128	; 0x80
 80032b4:	68f8      	ldr	r0, [r7, #12]
 80032b6:	f000 f840 	bl	800333a <UART_WaitOnFlagUntilTimeout>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d001      	beq.n	80032c4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e036      	b.n	8003332 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d10b      	bne.n	80032e2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	881b      	ldrh	r3, [r3, #0]
 80032ce:	461a      	mov	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	3302      	adds	r3, #2
 80032de:	61bb      	str	r3, [r7, #24]
 80032e0:	e007      	b.n	80032f2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	781a      	ldrb	r2, [r3, #0]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	3301      	adds	r3, #1
 80032f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	3b01      	subs	r3, #1
 80032fa:	b29a      	uxth	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003304:	b29b      	uxth	r3, r3
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1cf      	bne.n	80032aa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	9300      	str	r3, [sp, #0]
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	2200      	movs	r2, #0
 8003312:	2140      	movs	r1, #64	; 0x40
 8003314:	68f8      	ldr	r0, [r7, #12]
 8003316:	f000 f810 	bl	800333a <UART_WaitOnFlagUntilTimeout>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d001      	beq.n	8003324 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e006      	b.n	8003332 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2220      	movs	r2, #32
 8003328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800332c:	2300      	movs	r3, #0
 800332e:	e000      	b.n	8003332 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003330:	2302      	movs	r3, #2
  }
}
 8003332:	4618      	mov	r0, r3
 8003334:	3720      	adds	r7, #32
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b084      	sub	sp, #16
 800333e:	af00      	add	r7, sp, #0
 8003340:	60f8      	str	r0, [r7, #12]
 8003342:	60b9      	str	r1, [r7, #8]
 8003344:	603b      	str	r3, [r7, #0]
 8003346:	4613      	mov	r3, r2
 8003348:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800334a:	e02c      	b.n	80033a6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003352:	d028      	beq.n	80033a6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d007      	beq.n	800336a <UART_WaitOnFlagUntilTimeout+0x30>
 800335a:	f7fe f88f 	bl	800147c <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	429a      	cmp	r2, r3
 8003368:	d21d      	bcs.n	80033a6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68da      	ldr	r2, [r3, #12]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003378:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	695a      	ldr	r2, [r3, #20]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f022 0201 	bic.w	r2, r2, #1
 8003388:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2220      	movs	r2, #32
 800338e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2220      	movs	r2, #32
 8003396:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e00f      	b.n	80033c6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	4013      	ands	r3, r2
 80033b0:	68ba      	ldr	r2, [r7, #8]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	bf0c      	ite	eq
 80033b6:	2301      	moveq	r3, #1
 80033b8:	2300      	movne	r3, #0
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	461a      	mov	r2, r3
 80033be:	79fb      	ldrb	r3, [r7, #7]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d0c3      	beq.n	800334c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
	...

080033d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033d4:	b09f      	sub	sp, #124	; 0x7c
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	691b      	ldr	r3, [r3, #16]
 80033e0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80033e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033e6:	68d9      	ldr	r1, [r3, #12]
 80033e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	ea40 0301 	orr.w	r3, r0, r1
 80033f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80033f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033f4:	689a      	ldr	r2, [r3, #8]
 80033f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	431a      	orrs	r2, r3
 80033fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033fe:	695b      	ldr	r3, [r3, #20]
 8003400:	431a      	orrs	r2, r3
 8003402:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003404:	69db      	ldr	r3, [r3, #28]
 8003406:	4313      	orrs	r3, r2
 8003408:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800340a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003414:	f021 010c 	bic.w	r1, r1, #12
 8003418:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800341e:	430b      	orrs	r3, r1
 8003420:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003422:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	695b      	ldr	r3, [r3, #20]
 8003428:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800342c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800342e:	6999      	ldr	r1, [r3, #24]
 8003430:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	ea40 0301 	orr.w	r3, r0, r1
 8003438:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800343a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	4bc5      	ldr	r3, [pc, #788]	; (8003754 <UART_SetConfig+0x384>)
 8003440:	429a      	cmp	r2, r3
 8003442:	d004      	beq.n	800344e <UART_SetConfig+0x7e>
 8003444:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	4bc3      	ldr	r3, [pc, #780]	; (8003758 <UART_SetConfig+0x388>)
 800344a:	429a      	cmp	r2, r3
 800344c:	d103      	bne.n	8003456 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800344e:	f7ff fe81 	bl	8003154 <HAL_RCC_GetPCLK2Freq>
 8003452:	6778      	str	r0, [r7, #116]	; 0x74
 8003454:	e002      	b.n	800345c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003456:	f7ff fe69 	bl	800312c <HAL_RCC_GetPCLK1Freq>
 800345a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800345c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800345e:	69db      	ldr	r3, [r3, #28]
 8003460:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003464:	f040 80b6 	bne.w	80035d4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003468:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800346a:	461c      	mov	r4, r3
 800346c:	f04f 0500 	mov.w	r5, #0
 8003470:	4622      	mov	r2, r4
 8003472:	462b      	mov	r3, r5
 8003474:	1891      	adds	r1, r2, r2
 8003476:	6439      	str	r1, [r7, #64]	; 0x40
 8003478:	415b      	adcs	r3, r3
 800347a:	647b      	str	r3, [r7, #68]	; 0x44
 800347c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003480:	1912      	adds	r2, r2, r4
 8003482:	eb45 0303 	adc.w	r3, r5, r3
 8003486:	f04f 0000 	mov.w	r0, #0
 800348a:	f04f 0100 	mov.w	r1, #0
 800348e:	00d9      	lsls	r1, r3, #3
 8003490:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003494:	00d0      	lsls	r0, r2, #3
 8003496:	4602      	mov	r2, r0
 8003498:	460b      	mov	r3, r1
 800349a:	1911      	adds	r1, r2, r4
 800349c:	6639      	str	r1, [r7, #96]	; 0x60
 800349e:	416b      	adcs	r3, r5
 80034a0:	667b      	str	r3, [r7, #100]	; 0x64
 80034a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	461a      	mov	r2, r3
 80034a8:	f04f 0300 	mov.w	r3, #0
 80034ac:	1891      	adds	r1, r2, r2
 80034ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80034b0:	415b      	adcs	r3, r3
 80034b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80034b8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80034bc:	f7fd f92c 	bl	8000718 <__aeabi_uldivmod>
 80034c0:	4602      	mov	r2, r0
 80034c2:	460b      	mov	r3, r1
 80034c4:	4ba5      	ldr	r3, [pc, #660]	; (800375c <UART_SetConfig+0x38c>)
 80034c6:	fba3 2302 	umull	r2, r3, r3, r2
 80034ca:	095b      	lsrs	r3, r3, #5
 80034cc:	011e      	lsls	r6, r3, #4
 80034ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034d0:	461c      	mov	r4, r3
 80034d2:	f04f 0500 	mov.w	r5, #0
 80034d6:	4622      	mov	r2, r4
 80034d8:	462b      	mov	r3, r5
 80034da:	1891      	adds	r1, r2, r2
 80034dc:	6339      	str	r1, [r7, #48]	; 0x30
 80034de:	415b      	adcs	r3, r3
 80034e0:	637b      	str	r3, [r7, #52]	; 0x34
 80034e2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80034e6:	1912      	adds	r2, r2, r4
 80034e8:	eb45 0303 	adc.w	r3, r5, r3
 80034ec:	f04f 0000 	mov.w	r0, #0
 80034f0:	f04f 0100 	mov.w	r1, #0
 80034f4:	00d9      	lsls	r1, r3, #3
 80034f6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80034fa:	00d0      	lsls	r0, r2, #3
 80034fc:	4602      	mov	r2, r0
 80034fe:	460b      	mov	r3, r1
 8003500:	1911      	adds	r1, r2, r4
 8003502:	65b9      	str	r1, [r7, #88]	; 0x58
 8003504:	416b      	adcs	r3, r5
 8003506:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003508:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	461a      	mov	r2, r3
 800350e:	f04f 0300 	mov.w	r3, #0
 8003512:	1891      	adds	r1, r2, r2
 8003514:	62b9      	str	r1, [r7, #40]	; 0x28
 8003516:	415b      	adcs	r3, r3
 8003518:	62fb      	str	r3, [r7, #44]	; 0x2c
 800351a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800351e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003522:	f7fd f8f9 	bl	8000718 <__aeabi_uldivmod>
 8003526:	4602      	mov	r2, r0
 8003528:	460b      	mov	r3, r1
 800352a:	4b8c      	ldr	r3, [pc, #560]	; (800375c <UART_SetConfig+0x38c>)
 800352c:	fba3 1302 	umull	r1, r3, r3, r2
 8003530:	095b      	lsrs	r3, r3, #5
 8003532:	2164      	movs	r1, #100	; 0x64
 8003534:	fb01 f303 	mul.w	r3, r1, r3
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	00db      	lsls	r3, r3, #3
 800353c:	3332      	adds	r3, #50	; 0x32
 800353e:	4a87      	ldr	r2, [pc, #540]	; (800375c <UART_SetConfig+0x38c>)
 8003540:	fba2 2303 	umull	r2, r3, r2, r3
 8003544:	095b      	lsrs	r3, r3, #5
 8003546:	005b      	lsls	r3, r3, #1
 8003548:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800354c:	441e      	add	r6, r3
 800354e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003550:	4618      	mov	r0, r3
 8003552:	f04f 0100 	mov.w	r1, #0
 8003556:	4602      	mov	r2, r0
 8003558:	460b      	mov	r3, r1
 800355a:	1894      	adds	r4, r2, r2
 800355c:	623c      	str	r4, [r7, #32]
 800355e:	415b      	adcs	r3, r3
 8003560:	627b      	str	r3, [r7, #36]	; 0x24
 8003562:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003566:	1812      	adds	r2, r2, r0
 8003568:	eb41 0303 	adc.w	r3, r1, r3
 800356c:	f04f 0400 	mov.w	r4, #0
 8003570:	f04f 0500 	mov.w	r5, #0
 8003574:	00dd      	lsls	r5, r3, #3
 8003576:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800357a:	00d4      	lsls	r4, r2, #3
 800357c:	4622      	mov	r2, r4
 800357e:	462b      	mov	r3, r5
 8003580:	1814      	adds	r4, r2, r0
 8003582:	653c      	str	r4, [r7, #80]	; 0x50
 8003584:	414b      	adcs	r3, r1
 8003586:	657b      	str	r3, [r7, #84]	; 0x54
 8003588:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	461a      	mov	r2, r3
 800358e:	f04f 0300 	mov.w	r3, #0
 8003592:	1891      	adds	r1, r2, r2
 8003594:	61b9      	str	r1, [r7, #24]
 8003596:	415b      	adcs	r3, r3
 8003598:	61fb      	str	r3, [r7, #28]
 800359a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800359e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80035a2:	f7fd f8b9 	bl	8000718 <__aeabi_uldivmod>
 80035a6:	4602      	mov	r2, r0
 80035a8:	460b      	mov	r3, r1
 80035aa:	4b6c      	ldr	r3, [pc, #432]	; (800375c <UART_SetConfig+0x38c>)
 80035ac:	fba3 1302 	umull	r1, r3, r3, r2
 80035b0:	095b      	lsrs	r3, r3, #5
 80035b2:	2164      	movs	r1, #100	; 0x64
 80035b4:	fb01 f303 	mul.w	r3, r1, r3
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	00db      	lsls	r3, r3, #3
 80035bc:	3332      	adds	r3, #50	; 0x32
 80035be:	4a67      	ldr	r2, [pc, #412]	; (800375c <UART_SetConfig+0x38c>)
 80035c0:	fba2 2303 	umull	r2, r3, r2, r3
 80035c4:	095b      	lsrs	r3, r3, #5
 80035c6:	f003 0207 	and.w	r2, r3, #7
 80035ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4432      	add	r2, r6
 80035d0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80035d2:	e0b9      	b.n	8003748 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035d6:	461c      	mov	r4, r3
 80035d8:	f04f 0500 	mov.w	r5, #0
 80035dc:	4622      	mov	r2, r4
 80035de:	462b      	mov	r3, r5
 80035e0:	1891      	adds	r1, r2, r2
 80035e2:	6139      	str	r1, [r7, #16]
 80035e4:	415b      	adcs	r3, r3
 80035e6:	617b      	str	r3, [r7, #20]
 80035e8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80035ec:	1912      	adds	r2, r2, r4
 80035ee:	eb45 0303 	adc.w	r3, r5, r3
 80035f2:	f04f 0000 	mov.w	r0, #0
 80035f6:	f04f 0100 	mov.w	r1, #0
 80035fa:	00d9      	lsls	r1, r3, #3
 80035fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003600:	00d0      	lsls	r0, r2, #3
 8003602:	4602      	mov	r2, r0
 8003604:	460b      	mov	r3, r1
 8003606:	eb12 0804 	adds.w	r8, r2, r4
 800360a:	eb43 0905 	adc.w	r9, r3, r5
 800360e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	4618      	mov	r0, r3
 8003614:	f04f 0100 	mov.w	r1, #0
 8003618:	f04f 0200 	mov.w	r2, #0
 800361c:	f04f 0300 	mov.w	r3, #0
 8003620:	008b      	lsls	r3, r1, #2
 8003622:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003626:	0082      	lsls	r2, r0, #2
 8003628:	4640      	mov	r0, r8
 800362a:	4649      	mov	r1, r9
 800362c:	f7fd f874 	bl	8000718 <__aeabi_uldivmod>
 8003630:	4602      	mov	r2, r0
 8003632:	460b      	mov	r3, r1
 8003634:	4b49      	ldr	r3, [pc, #292]	; (800375c <UART_SetConfig+0x38c>)
 8003636:	fba3 2302 	umull	r2, r3, r3, r2
 800363a:	095b      	lsrs	r3, r3, #5
 800363c:	011e      	lsls	r6, r3, #4
 800363e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003640:	4618      	mov	r0, r3
 8003642:	f04f 0100 	mov.w	r1, #0
 8003646:	4602      	mov	r2, r0
 8003648:	460b      	mov	r3, r1
 800364a:	1894      	adds	r4, r2, r2
 800364c:	60bc      	str	r4, [r7, #8]
 800364e:	415b      	adcs	r3, r3
 8003650:	60fb      	str	r3, [r7, #12]
 8003652:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003656:	1812      	adds	r2, r2, r0
 8003658:	eb41 0303 	adc.w	r3, r1, r3
 800365c:	f04f 0400 	mov.w	r4, #0
 8003660:	f04f 0500 	mov.w	r5, #0
 8003664:	00dd      	lsls	r5, r3, #3
 8003666:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800366a:	00d4      	lsls	r4, r2, #3
 800366c:	4622      	mov	r2, r4
 800366e:	462b      	mov	r3, r5
 8003670:	1814      	adds	r4, r2, r0
 8003672:	64bc      	str	r4, [r7, #72]	; 0x48
 8003674:	414b      	adcs	r3, r1
 8003676:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003678:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	4618      	mov	r0, r3
 800367e:	f04f 0100 	mov.w	r1, #0
 8003682:	f04f 0200 	mov.w	r2, #0
 8003686:	f04f 0300 	mov.w	r3, #0
 800368a:	008b      	lsls	r3, r1, #2
 800368c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003690:	0082      	lsls	r2, r0, #2
 8003692:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003696:	f7fd f83f 	bl	8000718 <__aeabi_uldivmod>
 800369a:	4602      	mov	r2, r0
 800369c:	460b      	mov	r3, r1
 800369e:	4b2f      	ldr	r3, [pc, #188]	; (800375c <UART_SetConfig+0x38c>)
 80036a0:	fba3 1302 	umull	r1, r3, r3, r2
 80036a4:	095b      	lsrs	r3, r3, #5
 80036a6:	2164      	movs	r1, #100	; 0x64
 80036a8:	fb01 f303 	mul.w	r3, r1, r3
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	011b      	lsls	r3, r3, #4
 80036b0:	3332      	adds	r3, #50	; 0x32
 80036b2:	4a2a      	ldr	r2, [pc, #168]	; (800375c <UART_SetConfig+0x38c>)
 80036b4:	fba2 2303 	umull	r2, r3, r2, r3
 80036b8:	095b      	lsrs	r3, r3, #5
 80036ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036be:	441e      	add	r6, r3
 80036c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036c2:	4618      	mov	r0, r3
 80036c4:	f04f 0100 	mov.w	r1, #0
 80036c8:	4602      	mov	r2, r0
 80036ca:	460b      	mov	r3, r1
 80036cc:	1894      	adds	r4, r2, r2
 80036ce:	603c      	str	r4, [r7, #0]
 80036d0:	415b      	adcs	r3, r3
 80036d2:	607b      	str	r3, [r7, #4]
 80036d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80036d8:	1812      	adds	r2, r2, r0
 80036da:	eb41 0303 	adc.w	r3, r1, r3
 80036de:	f04f 0400 	mov.w	r4, #0
 80036e2:	f04f 0500 	mov.w	r5, #0
 80036e6:	00dd      	lsls	r5, r3, #3
 80036e8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80036ec:	00d4      	lsls	r4, r2, #3
 80036ee:	4622      	mov	r2, r4
 80036f0:	462b      	mov	r3, r5
 80036f2:	eb12 0a00 	adds.w	sl, r2, r0
 80036f6:	eb43 0b01 	adc.w	fp, r3, r1
 80036fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	4618      	mov	r0, r3
 8003700:	f04f 0100 	mov.w	r1, #0
 8003704:	f04f 0200 	mov.w	r2, #0
 8003708:	f04f 0300 	mov.w	r3, #0
 800370c:	008b      	lsls	r3, r1, #2
 800370e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003712:	0082      	lsls	r2, r0, #2
 8003714:	4650      	mov	r0, sl
 8003716:	4659      	mov	r1, fp
 8003718:	f7fc fffe 	bl	8000718 <__aeabi_uldivmod>
 800371c:	4602      	mov	r2, r0
 800371e:	460b      	mov	r3, r1
 8003720:	4b0e      	ldr	r3, [pc, #56]	; (800375c <UART_SetConfig+0x38c>)
 8003722:	fba3 1302 	umull	r1, r3, r3, r2
 8003726:	095b      	lsrs	r3, r3, #5
 8003728:	2164      	movs	r1, #100	; 0x64
 800372a:	fb01 f303 	mul.w	r3, r1, r3
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	011b      	lsls	r3, r3, #4
 8003732:	3332      	adds	r3, #50	; 0x32
 8003734:	4a09      	ldr	r2, [pc, #36]	; (800375c <UART_SetConfig+0x38c>)
 8003736:	fba2 2303 	umull	r2, r3, r2, r3
 800373a:	095b      	lsrs	r3, r3, #5
 800373c:	f003 020f 	and.w	r2, r3, #15
 8003740:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4432      	add	r2, r6
 8003746:	609a      	str	r2, [r3, #8]
}
 8003748:	bf00      	nop
 800374a:	377c      	adds	r7, #124	; 0x7c
 800374c:	46bd      	mov	sp, r7
 800374e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003752:	bf00      	nop
 8003754:	40011000 	.word	0x40011000
 8003758:	40011400 	.word	0x40011400
 800375c:	51eb851f 	.word	0x51eb851f

08003760 <__errno>:
 8003760:	4b01      	ldr	r3, [pc, #4]	; (8003768 <__errno+0x8>)
 8003762:	6818      	ldr	r0, [r3, #0]
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop
 8003768:	2000000c 	.word	0x2000000c

0800376c <__libc_init_array>:
 800376c:	b570      	push	{r4, r5, r6, lr}
 800376e:	4d0d      	ldr	r5, [pc, #52]	; (80037a4 <__libc_init_array+0x38>)
 8003770:	4c0d      	ldr	r4, [pc, #52]	; (80037a8 <__libc_init_array+0x3c>)
 8003772:	1b64      	subs	r4, r4, r5
 8003774:	10a4      	asrs	r4, r4, #2
 8003776:	2600      	movs	r6, #0
 8003778:	42a6      	cmp	r6, r4
 800377a:	d109      	bne.n	8003790 <__libc_init_array+0x24>
 800377c:	4d0b      	ldr	r5, [pc, #44]	; (80037ac <__libc_init_array+0x40>)
 800377e:	4c0c      	ldr	r4, [pc, #48]	; (80037b0 <__libc_init_array+0x44>)
 8003780:	f000 fc4e 	bl	8004020 <_init>
 8003784:	1b64      	subs	r4, r4, r5
 8003786:	10a4      	asrs	r4, r4, #2
 8003788:	2600      	movs	r6, #0
 800378a:	42a6      	cmp	r6, r4
 800378c:	d105      	bne.n	800379a <__libc_init_array+0x2e>
 800378e:	bd70      	pop	{r4, r5, r6, pc}
 8003790:	f855 3b04 	ldr.w	r3, [r5], #4
 8003794:	4798      	blx	r3
 8003796:	3601      	adds	r6, #1
 8003798:	e7ee      	b.n	8003778 <__libc_init_array+0xc>
 800379a:	f855 3b04 	ldr.w	r3, [r5], #4
 800379e:	4798      	blx	r3
 80037a0:	3601      	adds	r6, #1
 80037a2:	e7f2      	b.n	800378a <__libc_init_array+0x1e>
 80037a4:	0800410c 	.word	0x0800410c
 80037a8:	0800410c 	.word	0x0800410c
 80037ac:	0800410c 	.word	0x0800410c
 80037b0:	08004110 	.word	0x08004110

080037b4 <memset>:
 80037b4:	4402      	add	r2, r0
 80037b6:	4603      	mov	r3, r0
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d100      	bne.n	80037be <memset+0xa>
 80037bc:	4770      	bx	lr
 80037be:	f803 1b01 	strb.w	r1, [r3], #1
 80037c2:	e7f9      	b.n	80037b8 <memset+0x4>

080037c4 <siprintf>:
 80037c4:	b40e      	push	{r1, r2, r3}
 80037c6:	b500      	push	{lr}
 80037c8:	b09c      	sub	sp, #112	; 0x70
 80037ca:	ab1d      	add	r3, sp, #116	; 0x74
 80037cc:	9002      	str	r0, [sp, #8]
 80037ce:	9006      	str	r0, [sp, #24]
 80037d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80037d4:	4809      	ldr	r0, [pc, #36]	; (80037fc <siprintf+0x38>)
 80037d6:	9107      	str	r1, [sp, #28]
 80037d8:	9104      	str	r1, [sp, #16]
 80037da:	4909      	ldr	r1, [pc, #36]	; (8003800 <siprintf+0x3c>)
 80037dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80037e0:	9105      	str	r1, [sp, #20]
 80037e2:	6800      	ldr	r0, [r0, #0]
 80037e4:	9301      	str	r3, [sp, #4]
 80037e6:	a902      	add	r1, sp, #8
 80037e8:	f000 f868 	bl	80038bc <_svfiprintf_r>
 80037ec:	9b02      	ldr	r3, [sp, #8]
 80037ee:	2200      	movs	r2, #0
 80037f0:	701a      	strb	r2, [r3, #0]
 80037f2:	b01c      	add	sp, #112	; 0x70
 80037f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80037f8:	b003      	add	sp, #12
 80037fa:	4770      	bx	lr
 80037fc:	2000000c 	.word	0x2000000c
 8003800:	ffff0208 	.word	0xffff0208

08003804 <__ssputs_r>:
 8003804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003808:	688e      	ldr	r6, [r1, #8]
 800380a:	429e      	cmp	r6, r3
 800380c:	4682      	mov	sl, r0
 800380e:	460c      	mov	r4, r1
 8003810:	4690      	mov	r8, r2
 8003812:	461f      	mov	r7, r3
 8003814:	d838      	bhi.n	8003888 <__ssputs_r+0x84>
 8003816:	898a      	ldrh	r2, [r1, #12]
 8003818:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800381c:	d032      	beq.n	8003884 <__ssputs_r+0x80>
 800381e:	6825      	ldr	r5, [r4, #0]
 8003820:	6909      	ldr	r1, [r1, #16]
 8003822:	eba5 0901 	sub.w	r9, r5, r1
 8003826:	6965      	ldr	r5, [r4, #20]
 8003828:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800382c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003830:	3301      	adds	r3, #1
 8003832:	444b      	add	r3, r9
 8003834:	106d      	asrs	r5, r5, #1
 8003836:	429d      	cmp	r5, r3
 8003838:	bf38      	it	cc
 800383a:	461d      	movcc	r5, r3
 800383c:	0553      	lsls	r3, r2, #21
 800383e:	d531      	bpl.n	80038a4 <__ssputs_r+0xa0>
 8003840:	4629      	mov	r1, r5
 8003842:	f000 fb47 	bl	8003ed4 <_malloc_r>
 8003846:	4606      	mov	r6, r0
 8003848:	b950      	cbnz	r0, 8003860 <__ssputs_r+0x5c>
 800384a:	230c      	movs	r3, #12
 800384c:	f8ca 3000 	str.w	r3, [sl]
 8003850:	89a3      	ldrh	r3, [r4, #12]
 8003852:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003856:	81a3      	strh	r3, [r4, #12]
 8003858:	f04f 30ff 	mov.w	r0, #4294967295
 800385c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003860:	6921      	ldr	r1, [r4, #16]
 8003862:	464a      	mov	r2, r9
 8003864:	f000 fabe 	bl	8003de4 <memcpy>
 8003868:	89a3      	ldrh	r3, [r4, #12]
 800386a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800386e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003872:	81a3      	strh	r3, [r4, #12]
 8003874:	6126      	str	r6, [r4, #16]
 8003876:	6165      	str	r5, [r4, #20]
 8003878:	444e      	add	r6, r9
 800387a:	eba5 0509 	sub.w	r5, r5, r9
 800387e:	6026      	str	r6, [r4, #0]
 8003880:	60a5      	str	r5, [r4, #8]
 8003882:	463e      	mov	r6, r7
 8003884:	42be      	cmp	r6, r7
 8003886:	d900      	bls.n	800388a <__ssputs_r+0x86>
 8003888:	463e      	mov	r6, r7
 800388a:	4632      	mov	r2, r6
 800388c:	6820      	ldr	r0, [r4, #0]
 800388e:	4641      	mov	r1, r8
 8003890:	f000 fab6 	bl	8003e00 <memmove>
 8003894:	68a3      	ldr	r3, [r4, #8]
 8003896:	6822      	ldr	r2, [r4, #0]
 8003898:	1b9b      	subs	r3, r3, r6
 800389a:	4432      	add	r2, r6
 800389c:	60a3      	str	r3, [r4, #8]
 800389e:	6022      	str	r2, [r4, #0]
 80038a0:	2000      	movs	r0, #0
 80038a2:	e7db      	b.n	800385c <__ssputs_r+0x58>
 80038a4:	462a      	mov	r2, r5
 80038a6:	f000 fb6f 	bl	8003f88 <_realloc_r>
 80038aa:	4606      	mov	r6, r0
 80038ac:	2800      	cmp	r0, #0
 80038ae:	d1e1      	bne.n	8003874 <__ssputs_r+0x70>
 80038b0:	6921      	ldr	r1, [r4, #16]
 80038b2:	4650      	mov	r0, sl
 80038b4:	f000 fabe 	bl	8003e34 <_free_r>
 80038b8:	e7c7      	b.n	800384a <__ssputs_r+0x46>
	...

080038bc <_svfiprintf_r>:
 80038bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038c0:	4698      	mov	r8, r3
 80038c2:	898b      	ldrh	r3, [r1, #12]
 80038c4:	061b      	lsls	r3, r3, #24
 80038c6:	b09d      	sub	sp, #116	; 0x74
 80038c8:	4607      	mov	r7, r0
 80038ca:	460d      	mov	r5, r1
 80038cc:	4614      	mov	r4, r2
 80038ce:	d50e      	bpl.n	80038ee <_svfiprintf_r+0x32>
 80038d0:	690b      	ldr	r3, [r1, #16]
 80038d2:	b963      	cbnz	r3, 80038ee <_svfiprintf_r+0x32>
 80038d4:	2140      	movs	r1, #64	; 0x40
 80038d6:	f000 fafd 	bl	8003ed4 <_malloc_r>
 80038da:	6028      	str	r0, [r5, #0]
 80038dc:	6128      	str	r0, [r5, #16]
 80038de:	b920      	cbnz	r0, 80038ea <_svfiprintf_r+0x2e>
 80038e0:	230c      	movs	r3, #12
 80038e2:	603b      	str	r3, [r7, #0]
 80038e4:	f04f 30ff 	mov.w	r0, #4294967295
 80038e8:	e0d1      	b.n	8003a8e <_svfiprintf_r+0x1d2>
 80038ea:	2340      	movs	r3, #64	; 0x40
 80038ec:	616b      	str	r3, [r5, #20]
 80038ee:	2300      	movs	r3, #0
 80038f0:	9309      	str	r3, [sp, #36]	; 0x24
 80038f2:	2320      	movs	r3, #32
 80038f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80038f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80038fc:	2330      	movs	r3, #48	; 0x30
 80038fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003aa8 <_svfiprintf_r+0x1ec>
 8003902:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003906:	f04f 0901 	mov.w	r9, #1
 800390a:	4623      	mov	r3, r4
 800390c:	469a      	mov	sl, r3
 800390e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003912:	b10a      	cbz	r2, 8003918 <_svfiprintf_r+0x5c>
 8003914:	2a25      	cmp	r2, #37	; 0x25
 8003916:	d1f9      	bne.n	800390c <_svfiprintf_r+0x50>
 8003918:	ebba 0b04 	subs.w	fp, sl, r4
 800391c:	d00b      	beq.n	8003936 <_svfiprintf_r+0x7a>
 800391e:	465b      	mov	r3, fp
 8003920:	4622      	mov	r2, r4
 8003922:	4629      	mov	r1, r5
 8003924:	4638      	mov	r0, r7
 8003926:	f7ff ff6d 	bl	8003804 <__ssputs_r>
 800392a:	3001      	adds	r0, #1
 800392c:	f000 80aa 	beq.w	8003a84 <_svfiprintf_r+0x1c8>
 8003930:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003932:	445a      	add	r2, fp
 8003934:	9209      	str	r2, [sp, #36]	; 0x24
 8003936:	f89a 3000 	ldrb.w	r3, [sl]
 800393a:	2b00      	cmp	r3, #0
 800393c:	f000 80a2 	beq.w	8003a84 <_svfiprintf_r+0x1c8>
 8003940:	2300      	movs	r3, #0
 8003942:	f04f 32ff 	mov.w	r2, #4294967295
 8003946:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800394a:	f10a 0a01 	add.w	sl, sl, #1
 800394e:	9304      	str	r3, [sp, #16]
 8003950:	9307      	str	r3, [sp, #28]
 8003952:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003956:	931a      	str	r3, [sp, #104]	; 0x68
 8003958:	4654      	mov	r4, sl
 800395a:	2205      	movs	r2, #5
 800395c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003960:	4851      	ldr	r0, [pc, #324]	; (8003aa8 <_svfiprintf_r+0x1ec>)
 8003962:	f7fc fc45 	bl	80001f0 <memchr>
 8003966:	9a04      	ldr	r2, [sp, #16]
 8003968:	b9d8      	cbnz	r0, 80039a2 <_svfiprintf_r+0xe6>
 800396a:	06d0      	lsls	r0, r2, #27
 800396c:	bf44      	itt	mi
 800396e:	2320      	movmi	r3, #32
 8003970:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003974:	0711      	lsls	r1, r2, #28
 8003976:	bf44      	itt	mi
 8003978:	232b      	movmi	r3, #43	; 0x2b
 800397a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800397e:	f89a 3000 	ldrb.w	r3, [sl]
 8003982:	2b2a      	cmp	r3, #42	; 0x2a
 8003984:	d015      	beq.n	80039b2 <_svfiprintf_r+0xf6>
 8003986:	9a07      	ldr	r2, [sp, #28]
 8003988:	4654      	mov	r4, sl
 800398a:	2000      	movs	r0, #0
 800398c:	f04f 0c0a 	mov.w	ip, #10
 8003990:	4621      	mov	r1, r4
 8003992:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003996:	3b30      	subs	r3, #48	; 0x30
 8003998:	2b09      	cmp	r3, #9
 800399a:	d94e      	bls.n	8003a3a <_svfiprintf_r+0x17e>
 800399c:	b1b0      	cbz	r0, 80039cc <_svfiprintf_r+0x110>
 800399e:	9207      	str	r2, [sp, #28]
 80039a0:	e014      	b.n	80039cc <_svfiprintf_r+0x110>
 80039a2:	eba0 0308 	sub.w	r3, r0, r8
 80039a6:	fa09 f303 	lsl.w	r3, r9, r3
 80039aa:	4313      	orrs	r3, r2
 80039ac:	9304      	str	r3, [sp, #16]
 80039ae:	46a2      	mov	sl, r4
 80039b0:	e7d2      	b.n	8003958 <_svfiprintf_r+0x9c>
 80039b2:	9b03      	ldr	r3, [sp, #12]
 80039b4:	1d19      	adds	r1, r3, #4
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	9103      	str	r1, [sp, #12]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	bfbb      	ittet	lt
 80039be:	425b      	neglt	r3, r3
 80039c0:	f042 0202 	orrlt.w	r2, r2, #2
 80039c4:	9307      	strge	r3, [sp, #28]
 80039c6:	9307      	strlt	r3, [sp, #28]
 80039c8:	bfb8      	it	lt
 80039ca:	9204      	strlt	r2, [sp, #16]
 80039cc:	7823      	ldrb	r3, [r4, #0]
 80039ce:	2b2e      	cmp	r3, #46	; 0x2e
 80039d0:	d10c      	bne.n	80039ec <_svfiprintf_r+0x130>
 80039d2:	7863      	ldrb	r3, [r4, #1]
 80039d4:	2b2a      	cmp	r3, #42	; 0x2a
 80039d6:	d135      	bne.n	8003a44 <_svfiprintf_r+0x188>
 80039d8:	9b03      	ldr	r3, [sp, #12]
 80039da:	1d1a      	adds	r2, r3, #4
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	9203      	str	r2, [sp, #12]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	bfb8      	it	lt
 80039e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80039e8:	3402      	adds	r4, #2
 80039ea:	9305      	str	r3, [sp, #20]
 80039ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003ab8 <_svfiprintf_r+0x1fc>
 80039f0:	7821      	ldrb	r1, [r4, #0]
 80039f2:	2203      	movs	r2, #3
 80039f4:	4650      	mov	r0, sl
 80039f6:	f7fc fbfb 	bl	80001f0 <memchr>
 80039fa:	b140      	cbz	r0, 8003a0e <_svfiprintf_r+0x152>
 80039fc:	2340      	movs	r3, #64	; 0x40
 80039fe:	eba0 000a 	sub.w	r0, r0, sl
 8003a02:	fa03 f000 	lsl.w	r0, r3, r0
 8003a06:	9b04      	ldr	r3, [sp, #16]
 8003a08:	4303      	orrs	r3, r0
 8003a0a:	3401      	adds	r4, #1
 8003a0c:	9304      	str	r3, [sp, #16]
 8003a0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a12:	4826      	ldr	r0, [pc, #152]	; (8003aac <_svfiprintf_r+0x1f0>)
 8003a14:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a18:	2206      	movs	r2, #6
 8003a1a:	f7fc fbe9 	bl	80001f0 <memchr>
 8003a1e:	2800      	cmp	r0, #0
 8003a20:	d038      	beq.n	8003a94 <_svfiprintf_r+0x1d8>
 8003a22:	4b23      	ldr	r3, [pc, #140]	; (8003ab0 <_svfiprintf_r+0x1f4>)
 8003a24:	bb1b      	cbnz	r3, 8003a6e <_svfiprintf_r+0x1b2>
 8003a26:	9b03      	ldr	r3, [sp, #12]
 8003a28:	3307      	adds	r3, #7
 8003a2a:	f023 0307 	bic.w	r3, r3, #7
 8003a2e:	3308      	adds	r3, #8
 8003a30:	9303      	str	r3, [sp, #12]
 8003a32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a34:	4433      	add	r3, r6
 8003a36:	9309      	str	r3, [sp, #36]	; 0x24
 8003a38:	e767      	b.n	800390a <_svfiprintf_r+0x4e>
 8003a3a:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a3e:	460c      	mov	r4, r1
 8003a40:	2001      	movs	r0, #1
 8003a42:	e7a5      	b.n	8003990 <_svfiprintf_r+0xd4>
 8003a44:	2300      	movs	r3, #0
 8003a46:	3401      	adds	r4, #1
 8003a48:	9305      	str	r3, [sp, #20]
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	f04f 0c0a 	mov.w	ip, #10
 8003a50:	4620      	mov	r0, r4
 8003a52:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a56:	3a30      	subs	r2, #48	; 0x30
 8003a58:	2a09      	cmp	r2, #9
 8003a5a:	d903      	bls.n	8003a64 <_svfiprintf_r+0x1a8>
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d0c5      	beq.n	80039ec <_svfiprintf_r+0x130>
 8003a60:	9105      	str	r1, [sp, #20]
 8003a62:	e7c3      	b.n	80039ec <_svfiprintf_r+0x130>
 8003a64:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a68:	4604      	mov	r4, r0
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e7f0      	b.n	8003a50 <_svfiprintf_r+0x194>
 8003a6e:	ab03      	add	r3, sp, #12
 8003a70:	9300      	str	r3, [sp, #0]
 8003a72:	462a      	mov	r2, r5
 8003a74:	4b0f      	ldr	r3, [pc, #60]	; (8003ab4 <_svfiprintf_r+0x1f8>)
 8003a76:	a904      	add	r1, sp, #16
 8003a78:	4638      	mov	r0, r7
 8003a7a:	f3af 8000 	nop.w
 8003a7e:	1c42      	adds	r2, r0, #1
 8003a80:	4606      	mov	r6, r0
 8003a82:	d1d6      	bne.n	8003a32 <_svfiprintf_r+0x176>
 8003a84:	89ab      	ldrh	r3, [r5, #12]
 8003a86:	065b      	lsls	r3, r3, #25
 8003a88:	f53f af2c 	bmi.w	80038e4 <_svfiprintf_r+0x28>
 8003a8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a8e:	b01d      	add	sp, #116	; 0x74
 8003a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a94:	ab03      	add	r3, sp, #12
 8003a96:	9300      	str	r3, [sp, #0]
 8003a98:	462a      	mov	r2, r5
 8003a9a:	4b06      	ldr	r3, [pc, #24]	; (8003ab4 <_svfiprintf_r+0x1f8>)
 8003a9c:	a904      	add	r1, sp, #16
 8003a9e:	4638      	mov	r0, r7
 8003aa0:	f000 f87a 	bl	8003b98 <_printf_i>
 8003aa4:	e7eb      	b.n	8003a7e <_svfiprintf_r+0x1c2>
 8003aa6:	bf00      	nop
 8003aa8:	080040d0 	.word	0x080040d0
 8003aac:	080040da 	.word	0x080040da
 8003ab0:	00000000 	.word	0x00000000
 8003ab4:	08003805 	.word	0x08003805
 8003ab8:	080040d6 	.word	0x080040d6

08003abc <_printf_common>:
 8003abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ac0:	4616      	mov	r6, r2
 8003ac2:	4699      	mov	r9, r3
 8003ac4:	688a      	ldr	r2, [r1, #8]
 8003ac6:	690b      	ldr	r3, [r1, #16]
 8003ac8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003acc:	4293      	cmp	r3, r2
 8003ace:	bfb8      	it	lt
 8003ad0:	4613      	movlt	r3, r2
 8003ad2:	6033      	str	r3, [r6, #0]
 8003ad4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ad8:	4607      	mov	r7, r0
 8003ada:	460c      	mov	r4, r1
 8003adc:	b10a      	cbz	r2, 8003ae2 <_printf_common+0x26>
 8003ade:	3301      	adds	r3, #1
 8003ae0:	6033      	str	r3, [r6, #0]
 8003ae2:	6823      	ldr	r3, [r4, #0]
 8003ae4:	0699      	lsls	r1, r3, #26
 8003ae6:	bf42      	ittt	mi
 8003ae8:	6833      	ldrmi	r3, [r6, #0]
 8003aea:	3302      	addmi	r3, #2
 8003aec:	6033      	strmi	r3, [r6, #0]
 8003aee:	6825      	ldr	r5, [r4, #0]
 8003af0:	f015 0506 	ands.w	r5, r5, #6
 8003af4:	d106      	bne.n	8003b04 <_printf_common+0x48>
 8003af6:	f104 0a19 	add.w	sl, r4, #25
 8003afa:	68e3      	ldr	r3, [r4, #12]
 8003afc:	6832      	ldr	r2, [r6, #0]
 8003afe:	1a9b      	subs	r3, r3, r2
 8003b00:	42ab      	cmp	r3, r5
 8003b02:	dc26      	bgt.n	8003b52 <_printf_common+0x96>
 8003b04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003b08:	1e13      	subs	r3, r2, #0
 8003b0a:	6822      	ldr	r2, [r4, #0]
 8003b0c:	bf18      	it	ne
 8003b0e:	2301      	movne	r3, #1
 8003b10:	0692      	lsls	r2, r2, #26
 8003b12:	d42b      	bmi.n	8003b6c <_printf_common+0xb0>
 8003b14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b18:	4649      	mov	r1, r9
 8003b1a:	4638      	mov	r0, r7
 8003b1c:	47c0      	blx	r8
 8003b1e:	3001      	adds	r0, #1
 8003b20:	d01e      	beq.n	8003b60 <_printf_common+0xa4>
 8003b22:	6823      	ldr	r3, [r4, #0]
 8003b24:	68e5      	ldr	r5, [r4, #12]
 8003b26:	6832      	ldr	r2, [r6, #0]
 8003b28:	f003 0306 	and.w	r3, r3, #6
 8003b2c:	2b04      	cmp	r3, #4
 8003b2e:	bf08      	it	eq
 8003b30:	1aad      	subeq	r5, r5, r2
 8003b32:	68a3      	ldr	r3, [r4, #8]
 8003b34:	6922      	ldr	r2, [r4, #16]
 8003b36:	bf0c      	ite	eq
 8003b38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b3c:	2500      	movne	r5, #0
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	bfc4      	itt	gt
 8003b42:	1a9b      	subgt	r3, r3, r2
 8003b44:	18ed      	addgt	r5, r5, r3
 8003b46:	2600      	movs	r6, #0
 8003b48:	341a      	adds	r4, #26
 8003b4a:	42b5      	cmp	r5, r6
 8003b4c:	d11a      	bne.n	8003b84 <_printf_common+0xc8>
 8003b4e:	2000      	movs	r0, #0
 8003b50:	e008      	b.n	8003b64 <_printf_common+0xa8>
 8003b52:	2301      	movs	r3, #1
 8003b54:	4652      	mov	r2, sl
 8003b56:	4649      	mov	r1, r9
 8003b58:	4638      	mov	r0, r7
 8003b5a:	47c0      	blx	r8
 8003b5c:	3001      	adds	r0, #1
 8003b5e:	d103      	bne.n	8003b68 <_printf_common+0xac>
 8003b60:	f04f 30ff 	mov.w	r0, #4294967295
 8003b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b68:	3501      	adds	r5, #1
 8003b6a:	e7c6      	b.n	8003afa <_printf_common+0x3e>
 8003b6c:	18e1      	adds	r1, r4, r3
 8003b6e:	1c5a      	adds	r2, r3, #1
 8003b70:	2030      	movs	r0, #48	; 0x30
 8003b72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b76:	4422      	add	r2, r4
 8003b78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b80:	3302      	adds	r3, #2
 8003b82:	e7c7      	b.n	8003b14 <_printf_common+0x58>
 8003b84:	2301      	movs	r3, #1
 8003b86:	4622      	mov	r2, r4
 8003b88:	4649      	mov	r1, r9
 8003b8a:	4638      	mov	r0, r7
 8003b8c:	47c0      	blx	r8
 8003b8e:	3001      	adds	r0, #1
 8003b90:	d0e6      	beq.n	8003b60 <_printf_common+0xa4>
 8003b92:	3601      	adds	r6, #1
 8003b94:	e7d9      	b.n	8003b4a <_printf_common+0x8e>
	...

08003b98 <_printf_i>:
 8003b98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b9c:	460c      	mov	r4, r1
 8003b9e:	4691      	mov	r9, r2
 8003ba0:	7e27      	ldrb	r7, [r4, #24]
 8003ba2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003ba4:	2f78      	cmp	r7, #120	; 0x78
 8003ba6:	4680      	mov	r8, r0
 8003ba8:	469a      	mov	sl, r3
 8003baa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003bae:	d807      	bhi.n	8003bc0 <_printf_i+0x28>
 8003bb0:	2f62      	cmp	r7, #98	; 0x62
 8003bb2:	d80a      	bhi.n	8003bca <_printf_i+0x32>
 8003bb4:	2f00      	cmp	r7, #0
 8003bb6:	f000 80d8 	beq.w	8003d6a <_printf_i+0x1d2>
 8003bba:	2f58      	cmp	r7, #88	; 0x58
 8003bbc:	f000 80a3 	beq.w	8003d06 <_printf_i+0x16e>
 8003bc0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003bc4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003bc8:	e03a      	b.n	8003c40 <_printf_i+0xa8>
 8003bca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003bce:	2b15      	cmp	r3, #21
 8003bd0:	d8f6      	bhi.n	8003bc0 <_printf_i+0x28>
 8003bd2:	a001      	add	r0, pc, #4	; (adr r0, 8003bd8 <_printf_i+0x40>)
 8003bd4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003bd8:	08003c31 	.word	0x08003c31
 8003bdc:	08003c45 	.word	0x08003c45
 8003be0:	08003bc1 	.word	0x08003bc1
 8003be4:	08003bc1 	.word	0x08003bc1
 8003be8:	08003bc1 	.word	0x08003bc1
 8003bec:	08003bc1 	.word	0x08003bc1
 8003bf0:	08003c45 	.word	0x08003c45
 8003bf4:	08003bc1 	.word	0x08003bc1
 8003bf8:	08003bc1 	.word	0x08003bc1
 8003bfc:	08003bc1 	.word	0x08003bc1
 8003c00:	08003bc1 	.word	0x08003bc1
 8003c04:	08003d51 	.word	0x08003d51
 8003c08:	08003c75 	.word	0x08003c75
 8003c0c:	08003d33 	.word	0x08003d33
 8003c10:	08003bc1 	.word	0x08003bc1
 8003c14:	08003bc1 	.word	0x08003bc1
 8003c18:	08003d73 	.word	0x08003d73
 8003c1c:	08003bc1 	.word	0x08003bc1
 8003c20:	08003c75 	.word	0x08003c75
 8003c24:	08003bc1 	.word	0x08003bc1
 8003c28:	08003bc1 	.word	0x08003bc1
 8003c2c:	08003d3b 	.word	0x08003d3b
 8003c30:	680b      	ldr	r3, [r1, #0]
 8003c32:	1d1a      	adds	r2, r3, #4
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	600a      	str	r2, [r1, #0]
 8003c38:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003c3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c40:	2301      	movs	r3, #1
 8003c42:	e0a3      	b.n	8003d8c <_printf_i+0x1f4>
 8003c44:	6825      	ldr	r5, [r4, #0]
 8003c46:	6808      	ldr	r0, [r1, #0]
 8003c48:	062e      	lsls	r6, r5, #24
 8003c4a:	f100 0304 	add.w	r3, r0, #4
 8003c4e:	d50a      	bpl.n	8003c66 <_printf_i+0xce>
 8003c50:	6805      	ldr	r5, [r0, #0]
 8003c52:	600b      	str	r3, [r1, #0]
 8003c54:	2d00      	cmp	r5, #0
 8003c56:	da03      	bge.n	8003c60 <_printf_i+0xc8>
 8003c58:	232d      	movs	r3, #45	; 0x2d
 8003c5a:	426d      	negs	r5, r5
 8003c5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c60:	485e      	ldr	r0, [pc, #376]	; (8003ddc <_printf_i+0x244>)
 8003c62:	230a      	movs	r3, #10
 8003c64:	e019      	b.n	8003c9a <_printf_i+0x102>
 8003c66:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003c6a:	6805      	ldr	r5, [r0, #0]
 8003c6c:	600b      	str	r3, [r1, #0]
 8003c6e:	bf18      	it	ne
 8003c70:	b22d      	sxthne	r5, r5
 8003c72:	e7ef      	b.n	8003c54 <_printf_i+0xbc>
 8003c74:	680b      	ldr	r3, [r1, #0]
 8003c76:	6825      	ldr	r5, [r4, #0]
 8003c78:	1d18      	adds	r0, r3, #4
 8003c7a:	6008      	str	r0, [r1, #0]
 8003c7c:	0628      	lsls	r0, r5, #24
 8003c7e:	d501      	bpl.n	8003c84 <_printf_i+0xec>
 8003c80:	681d      	ldr	r5, [r3, #0]
 8003c82:	e002      	b.n	8003c8a <_printf_i+0xf2>
 8003c84:	0669      	lsls	r1, r5, #25
 8003c86:	d5fb      	bpl.n	8003c80 <_printf_i+0xe8>
 8003c88:	881d      	ldrh	r5, [r3, #0]
 8003c8a:	4854      	ldr	r0, [pc, #336]	; (8003ddc <_printf_i+0x244>)
 8003c8c:	2f6f      	cmp	r7, #111	; 0x6f
 8003c8e:	bf0c      	ite	eq
 8003c90:	2308      	moveq	r3, #8
 8003c92:	230a      	movne	r3, #10
 8003c94:	2100      	movs	r1, #0
 8003c96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c9a:	6866      	ldr	r6, [r4, #4]
 8003c9c:	60a6      	str	r6, [r4, #8]
 8003c9e:	2e00      	cmp	r6, #0
 8003ca0:	bfa2      	ittt	ge
 8003ca2:	6821      	ldrge	r1, [r4, #0]
 8003ca4:	f021 0104 	bicge.w	r1, r1, #4
 8003ca8:	6021      	strge	r1, [r4, #0]
 8003caa:	b90d      	cbnz	r5, 8003cb0 <_printf_i+0x118>
 8003cac:	2e00      	cmp	r6, #0
 8003cae:	d04d      	beq.n	8003d4c <_printf_i+0x1b4>
 8003cb0:	4616      	mov	r6, r2
 8003cb2:	fbb5 f1f3 	udiv	r1, r5, r3
 8003cb6:	fb03 5711 	mls	r7, r3, r1, r5
 8003cba:	5dc7      	ldrb	r7, [r0, r7]
 8003cbc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003cc0:	462f      	mov	r7, r5
 8003cc2:	42bb      	cmp	r3, r7
 8003cc4:	460d      	mov	r5, r1
 8003cc6:	d9f4      	bls.n	8003cb2 <_printf_i+0x11a>
 8003cc8:	2b08      	cmp	r3, #8
 8003cca:	d10b      	bne.n	8003ce4 <_printf_i+0x14c>
 8003ccc:	6823      	ldr	r3, [r4, #0]
 8003cce:	07df      	lsls	r7, r3, #31
 8003cd0:	d508      	bpl.n	8003ce4 <_printf_i+0x14c>
 8003cd2:	6923      	ldr	r3, [r4, #16]
 8003cd4:	6861      	ldr	r1, [r4, #4]
 8003cd6:	4299      	cmp	r1, r3
 8003cd8:	bfde      	ittt	le
 8003cda:	2330      	movle	r3, #48	; 0x30
 8003cdc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003ce0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003ce4:	1b92      	subs	r2, r2, r6
 8003ce6:	6122      	str	r2, [r4, #16]
 8003ce8:	f8cd a000 	str.w	sl, [sp]
 8003cec:	464b      	mov	r3, r9
 8003cee:	aa03      	add	r2, sp, #12
 8003cf0:	4621      	mov	r1, r4
 8003cf2:	4640      	mov	r0, r8
 8003cf4:	f7ff fee2 	bl	8003abc <_printf_common>
 8003cf8:	3001      	adds	r0, #1
 8003cfa:	d14c      	bne.n	8003d96 <_printf_i+0x1fe>
 8003cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8003d00:	b004      	add	sp, #16
 8003d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d06:	4835      	ldr	r0, [pc, #212]	; (8003ddc <_printf_i+0x244>)
 8003d08:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003d0c:	6823      	ldr	r3, [r4, #0]
 8003d0e:	680e      	ldr	r6, [r1, #0]
 8003d10:	061f      	lsls	r7, r3, #24
 8003d12:	f856 5b04 	ldr.w	r5, [r6], #4
 8003d16:	600e      	str	r6, [r1, #0]
 8003d18:	d514      	bpl.n	8003d44 <_printf_i+0x1ac>
 8003d1a:	07d9      	lsls	r1, r3, #31
 8003d1c:	bf44      	itt	mi
 8003d1e:	f043 0320 	orrmi.w	r3, r3, #32
 8003d22:	6023      	strmi	r3, [r4, #0]
 8003d24:	b91d      	cbnz	r5, 8003d2e <_printf_i+0x196>
 8003d26:	6823      	ldr	r3, [r4, #0]
 8003d28:	f023 0320 	bic.w	r3, r3, #32
 8003d2c:	6023      	str	r3, [r4, #0]
 8003d2e:	2310      	movs	r3, #16
 8003d30:	e7b0      	b.n	8003c94 <_printf_i+0xfc>
 8003d32:	6823      	ldr	r3, [r4, #0]
 8003d34:	f043 0320 	orr.w	r3, r3, #32
 8003d38:	6023      	str	r3, [r4, #0]
 8003d3a:	2378      	movs	r3, #120	; 0x78
 8003d3c:	4828      	ldr	r0, [pc, #160]	; (8003de0 <_printf_i+0x248>)
 8003d3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003d42:	e7e3      	b.n	8003d0c <_printf_i+0x174>
 8003d44:	065e      	lsls	r6, r3, #25
 8003d46:	bf48      	it	mi
 8003d48:	b2ad      	uxthmi	r5, r5
 8003d4a:	e7e6      	b.n	8003d1a <_printf_i+0x182>
 8003d4c:	4616      	mov	r6, r2
 8003d4e:	e7bb      	b.n	8003cc8 <_printf_i+0x130>
 8003d50:	680b      	ldr	r3, [r1, #0]
 8003d52:	6826      	ldr	r6, [r4, #0]
 8003d54:	6960      	ldr	r0, [r4, #20]
 8003d56:	1d1d      	adds	r5, r3, #4
 8003d58:	600d      	str	r5, [r1, #0]
 8003d5a:	0635      	lsls	r5, r6, #24
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	d501      	bpl.n	8003d64 <_printf_i+0x1cc>
 8003d60:	6018      	str	r0, [r3, #0]
 8003d62:	e002      	b.n	8003d6a <_printf_i+0x1d2>
 8003d64:	0671      	lsls	r1, r6, #25
 8003d66:	d5fb      	bpl.n	8003d60 <_printf_i+0x1c8>
 8003d68:	8018      	strh	r0, [r3, #0]
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	6123      	str	r3, [r4, #16]
 8003d6e:	4616      	mov	r6, r2
 8003d70:	e7ba      	b.n	8003ce8 <_printf_i+0x150>
 8003d72:	680b      	ldr	r3, [r1, #0]
 8003d74:	1d1a      	adds	r2, r3, #4
 8003d76:	600a      	str	r2, [r1, #0]
 8003d78:	681e      	ldr	r6, [r3, #0]
 8003d7a:	6862      	ldr	r2, [r4, #4]
 8003d7c:	2100      	movs	r1, #0
 8003d7e:	4630      	mov	r0, r6
 8003d80:	f7fc fa36 	bl	80001f0 <memchr>
 8003d84:	b108      	cbz	r0, 8003d8a <_printf_i+0x1f2>
 8003d86:	1b80      	subs	r0, r0, r6
 8003d88:	6060      	str	r0, [r4, #4]
 8003d8a:	6863      	ldr	r3, [r4, #4]
 8003d8c:	6123      	str	r3, [r4, #16]
 8003d8e:	2300      	movs	r3, #0
 8003d90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d94:	e7a8      	b.n	8003ce8 <_printf_i+0x150>
 8003d96:	6923      	ldr	r3, [r4, #16]
 8003d98:	4632      	mov	r2, r6
 8003d9a:	4649      	mov	r1, r9
 8003d9c:	4640      	mov	r0, r8
 8003d9e:	47d0      	blx	sl
 8003da0:	3001      	adds	r0, #1
 8003da2:	d0ab      	beq.n	8003cfc <_printf_i+0x164>
 8003da4:	6823      	ldr	r3, [r4, #0]
 8003da6:	079b      	lsls	r3, r3, #30
 8003da8:	d413      	bmi.n	8003dd2 <_printf_i+0x23a>
 8003daa:	68e0      	ldr	r0, [r4, #12]
 8003dac:	9b03      	ldr	r3, [sp, #12]
 8003dae:	4298      	cmp	r0, r3
 8003db0:	bfb8      	it	lt
 8003db2:	4618      	movlt	r0, r3
 8003db4:	e7a4      	b.n	8003d00 <_printf_i+0x168>
 8003db6:	2301      	movs	r3, #1
 8003db8:	4632      	mov	r2, r6
 8003dba:	4649      	mov	r1, r9
 8003dbc:	4640      	mov	r0, r8
 8003dbe:	47d0      	blx	sl
 8003dc0:	3001      	adds	r0, #1
 8003dc2:	d09b      	beq.n	8003cfc <_printf_i+0x164>
 8003dc4:	3501      	adds	r5, #1
 8003dc6:	68e3      	ldr	r3, [r4, #12]
 8003dc8:	9903      	ldr	r1, [sp, #12]
 8003dca:	1a5b      	subs	r3, r3, r1
 8003dcc:	42ab      	cmp	r3, r5
 8003dce:	dcf2      	bgt.n	8003db6 <_printf_i+0x21e>
 8003dd0:	e7eb      	b.n	8003daa <_printf_i+0x212>
 8003dd2:	2500      	movs	r5, #0
 8003dd4:	f104 0619 	add.w	r6, r4, #25
 8003dd8:	e7f5      	b.n	8003dc6 <_printf_i+0x22e>
 8003dda:	bf00      	nop
 8003ddc:	080040e1 	.word	0x080040e1
 8003de0:	080040f2 	.word	0x080040f2

08003de4 <memcpy>:
 8003de4:	440a      	add	r2, r1
 8003de6:	4291      	cmp	r1, r2
 8003de8:	f100 33ff 	add.w	r3, r0, #4294967295
 8003dec:	d100      	bne.n	8003df0 <memcpy+0xc>
 8003dee:	4770      	bx	lr
 8003df0:	b510      	push	{r4, lr}
 8003df2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003df6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003dfa:	4291      	cmp	r1, r2
 8003dfc:	d1f9      	bne.n	8003df2 <memcpy+0xe>
 8003dfe:	bd10      	pop	{r4, pc}

08003e00 <memmove>:
 8003e00:	4288      	cmp	r0, r1
 8003e02:	b510      	push	{r4, lr}
 8003e04:	eb01 0402 	add.w	r4, r1, r2
 8003e08:	d902      	bls.n	8003e10 <memmove+0x10>
 8003e0a:	4284      	cmp	r4, r0
 8003e0c:	4623      	mov	r3, r4
 8003e0e:	d807      	bhi.n	8003e20 <memmove+0x20>
 8003e10:	1e43      	subs	r3, r0, #1
 8003e12:	42a1      	cmp	r1, r4
 8003e14:	d008      	beq.n	8003e28 <memmove+0x28>
 8003e16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003e1e:	e7f8      	b.n	8003e12 <memmove+0x12>
 8003e20:	4402      	add	r2, r0
 8003e22:	4601      	mov	r1, r0
 8003e24:	428a      	cmp	r2, r1
 8003e26:	d100      	bne.n	8003e2a <memmove+0x2a>
 8003e28:	bd10      	pop	{r4, pc}
 8003e2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003e2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003e32:	e7f7      	b.n	8003e24 <memmove+0x24>

08003e34 <_free_r>:
 8003e34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003e36:	2900      	cmp	r1, #0
 8003e38:	d048      	beq.n	8003ecc <_free_r+0x98>
 8003e3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e3e:	9001      	str	r0, [sp, #4]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	f1a1 0404 	sub.w	r4, r1, #4
 8003e46:	bfb8      	it	lt
 8003e48:	18e4      	addlt	r4, r4, r3
 8003e4a:	f000 f8d3 	bl	8003ff4 <__malloc_lock>
 8003e4e:	4a20      	ldr	r2, [pc, #128]	; (8003ed0 <_free_r+0x9c>)
 8003e50:	9801      	ldr	r0, [sp, #4]
 8003e52:	6813      	ldr	r3, [r2, #0]
 8003e54:	4615      	mov	r5, r2
 8003e56:	b933      	cbnz	r3, 8003e66 <_free_r+0x32>
 8003e58:	6063      	str	r3, [r4, #4]
 8003e5a:	6014      	str	r4, [r2, #0]
 8003e5c:	b003      	add	sp, #12
 8003e5e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003e62:	f000 b8cd 	b.w	8004000 <__malloc_unlock>
 8003e66:	42a3      	cmp	r3, r4
 8003e68:	d90b      	bls.n	8003e82 <_free_r+0x4e>
 8003e6a:	6821      	ldr	r1, [r4, #0]
 8003e6c:	1862      	adds	r2, r4, r1
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	bf04      	itt	eq
 8003e72:	681a      	ldreq	r2, [r3, #0]
 8003e74:	685b      	ldreq	r3, [r3, #4]
 8003e76:	6063      	str	r3, [r4, #4]
 8003e78:	bf04      	itt	eq
 8003e7a:	1852      	addeq	r2, r2, r1
 8003e7c:	6022      	streq	r2, [r4, #0]
 8003e7e:	602c      	str	r4, [r5, #0]
 8003e80:	e7ec      	b.n	8003e5c <_free_r+0x28>
 8003e82:	461a      	mov	r2, r3
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	b10b      	cbz	r3, 8003e8c <_free_r+0x58>
 8003e88:	42a3      	cmp	r3, r4
 8003e8a:	d9fa      	bls.n	8003e82 <_free_r+0x4e>
 8003e8c:	6811      	ldr	r1, [r2, #0]
 8003e8e:	1855      	adds	r5, r2, r1
 8003e90:	42a5      	cmp	r5, r4
 8003e92:	d10b      	bne.n	8003eac <_free_r+0x78>
 8003e94:	6824      	ldr	r4, [r4, #0]
 8003e96:	4421      	add	r1, r4
 8003e98:	1854      	adds	r4, r2, r1
 8003e9a:	42a3      	cmp	r3, r4
 8003e9c:	6011      	str	r1, [r2, #0]
 8003e9e:	d1dd      	bne.n	8003e5c <_free_r+0x28>
 8003ea0:	681c      	ldr	r4, [r3, #0]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	6053      	str	r3, [r2, #4]
 8003ea6:	4421      	add	r1, r4
 8003ea8:	6011      	str	r1, [r2, #0]
 8003eaa:	e7d7      	b.n	8003e5c <_free_r+0x28>
 8003eac:	d902      	bls.n	8003eb4 <_free_r+0x80>
 8003eae:	230c      	movs	r3, #12
 8003eb0:	6003      	str	r3, [r0, #0]
 8003eb2:	e7d3      	b.n	8003e5c <_free_r+0x28>
 8003eb4:	6825      	ldr	r5, [r4, #0]
 8003eb6:	1961      	adds	r1, r4, r5
 8003eb8:	428b      	cmp	r3, r1
 8003eba:	bf04      	itt	eq
 8003ebc:	6819      	ldreq	r1, [r3, #0]
 8003ebe:	685b      	ldreq	r3, [r3, #4]
 8003ec0:	6063      	str	r3, [r4, #4]
 8003ec2:	bf04      	itt	eq
 8003ec4:	1949      	addeq	r1, r1, r5
 8003ec6:	6021      	streq	r1, [r4, #0]
 8003ec8:	6054      	str	r4, [r2, #4]
 8003eca:	e7c7      	b.n	8003e5c <_free_r+0x28>
 8003ecc:	b003      	add	sp, #12
 8003ece:	bd30      	pop	{r4, r5, pc}
 8003ed0:	20000090 	.word	0x20000090

08003ed4 <_malloc_r>:
 8003ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ed6:	1ccd      	adds	r5, r1, #3
 8003ed8:	f025 0503 	bic.w	r5, r5, #3
 8003edc:	3508      	adds	r5, #8
 8003ede:	2d0c      	cmp	r5, #12
 8003ee0:	bf38      	it	cc
 8003ee2:	250c      	movcc	r5, #12
 8003ee4:	2d00      	cmp	r5, #0
 8003ee6:	4606      	mov	r6, r0
 8003ee8:	db01      	blt.n	8003eee <_malloc_r+0x1a>
 8003eea:	42a9      	cmp	r1, r5
 8003eec:	d903      	bls.n	8003ef6 <_malloc_r+0x22>
 8003eee:	230c      	movs	r3, #12
 8003ef0:	6033      	str	r3, [r6, #0]
 8003ef2:	2000      	movs	r0, #0
 8003ef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ef6:	f000 f87d 	bl	8003ff4 <__malloc_lock>
 8003efa:	4921      	ldr	r1, [pc, #132]	; (8003f80 <_malloc_r+0xac>)
 8003efc:	680a      	ldr	r2, [r1, #0]
 8003efe:	4614      	mov	r4, r2
 8003f00:	b99c      	cbnz	r4, 8003f2a <_malloc_r+0x56>
 8003f02:	4f20      	ldr	r7, [pc, #128]	; (8003f84 <_malloc_r+0xb0>)
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	b923      	cbnz	r3, 8003f12 <_malloc_r+0x3e>
 8003f08:	4621      	mov	r1, r4
 8003f0a:	4630      	mov	r0, r6
 8003f0c:	f000 f862 	bl	8003fd4 <_sbrk_r>
 8003f10:	6038      	str	r0, [r7, #0]
 8003f12:	4629      	mov	r1, r5
 8003f14:	4630      	mov	r0, r6
 8003f16:	f000 f85d 	bl	8003fd4 <_sbrk_r>
 8003f1a:	1c43      	adds	r3, r0, #1
 8003f1c:	d123      	bne.n	8003f66 <_malloc_r+0x92>
 8003f1e:	230c      	movs	r3, #12
 8003f20:	6033      	str	r3, [r6, #0]
 8003f22:	4630      	mov	r0, r6
 8003f24:	f000 f86c 	bl	8004000 <__malloc_unlock>
 8003f28:	e7e3      	b.n	8003ef2 <_malloc_r+0x1e>
 8003f2a:	6823      	ldr	r3, [r4, #0]
 8003f2c:	1b5b      	subs	r3, r3, r5
 8003f2e:	d417      	bmi.n	8003f60 <_malloc_r+0x8c>
 8003f30:	2b0b      	cmp	r3, #11
 8003f32:	d903      	bls.n	8003f3c <_malloc_r+0x68>
 8003f34:	6023      	str	r3, [r4, #0]
 8003f36:	441c      	add	r4, r3
 8003f38:	6025      	str	r5, [r4, #0]
 8003f3a:	e004      	b.n	8003f46 <_malloc_r+0x72>
 8003f3c:	6863      	ldr	r3, [r4, #4]
 8003f3e:	42a2      	cmp	r2, r4
 8003f40:	bf0c      	ite	eq
 8003f42:	600b      	streq	r3, [r1, #0]
 8003f44:	6053      	strne	r3, [r2, #4]
 8003f46:	4630      	mov	r0, r6
 8003f48:	f000 f85a 	bl	8004000 <__malloc_unlock>
 8003f4c:	f104 000b 	add.w	r0, r4, #11
 8003f50:	1d23      	adds	r3, r4, #4
 8003f52:	f020 0007 	bic.w	r0, r0, #7
 8003f56:	1ac2      	subs	r2, r0, r3
 8003f58:	d0cc      	beq.n	8003ef4 <_malloc_r+0x20>
 8003f5a:	1a1b      	subs	r3, r3, r0
 8003f5c:	50a3      	str	r3, [r4, r2]
 8003f5e:	e7c9      	b.n	8003ef4 <_malloc_r+0x20>
 8003f60:	4622      	mov	r2, r4
 8003f62:	6864      	ldr	r4, [r4, #4]
 8003f64:	e7cc      	b.n	8003f00 <_malloc_r+0x2c>
 8003f66:	1cc4      	adds	r4, r0, #3
 8003f68:	f024 0403 	bic.w	r4, r4, #3
 8003f6c:	42a0      	cmp	r0, r4
 8003f6e:	d0e3      	beq.n	8003f38 <_malloc_r+0x64>
 8003f70:	1a21      	subs	r1, r4, r0
 8003f72:	4630      	mov	r0, r6
 8003f74:	f000 f82e 	bl	8003fd4 <_sbrk_r>
 8003f78:	3001      	adds	r0, #1
 8003f7a:	d1dd      	bne.n	8003f38 <_malloc_r+0x64>
 8003f7c:	e7cf      	b.n	8003f1e <_malloc_r+0x4a>
 8003f7e:	bf00      	nop
 8003f80:	20000090 	.word	0x20000090
 8003f84:	20000094 	.word	0x20000094

08003f88 <_realloc_r>:
 8003f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f8a:	4607      	mov	r7, r0
 8003f8c:	4614      	mov	r4, r2
 8003f8e:	460e      	mov	r6, r1
 8003f90:	b921      	cbnz	r1, 8003f9c <_realloc_r+0x14>
 8003f92:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003f96:	4611      	mov	r1, r2
 8003f98:	f7ff bf9c 	b.w	8003ed4 <_malloc_r>
 8003f9c:	b922      	cbnz	r2, 8003fa8 <_realloc_r+0x20>
 8003f9e:	f7ff ff49 	bl	8003e34 <_free_r>
 8003fa2:	4625      	mov	r5, r4
 8003fa4:	4628      	mov	r0, r5
 8003fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fa8:	f000 f830 	bl	800400c <_malloc_usable_size_r>
 8003fac:	42a0      	cmp	r0, r4
 8003fae:	d20f      	bcs.n	8003fd0 <_realloc_r+0x48>
 8003fb0:	4621      	mov	r1, r4
 8003fb2:	4638      	mov	r0, r7
 8003fb4:	f7ff ff8e 	bl	8003ed4 <_malloc_r>
 8003fb8:	4605      	mov	r5, r0
 8003fba:	2800      	cmp	r0, #0
 8003fbc:	d0f2      	beq.n	8003fa4 <_realloc_r+0x1c>
 8003fbe:	4631      	mov	r1, r6
 8003fc0:	4622      	mov	r2, r4
 8003fc2:	f7ff ff0f 	bl	8003de4 <memcpy>
 8003fc6:	4631      	mov	r1, r6
 8003fc8:	4638      	mov	r0, r7
 8003fca:	f7ff ff33 	bl	8003e34 <_free_r>
 8003fce:	e7e9      	b.n	8003fa4 <_realloc_r+0x1c>
 8003fd0:	4635      	mov	r5, r6
 8003fd2:	e7e7      	b.n	8003fa4 <_realloc_r+0x1c>

08003fd4 <_sbrk_r>:
 8003fd4:	b538      	push	{r3, r4, r5, lr}
 8003fd6:	4d06      	ldr	r5, [pc, #24]	; (8003ff0 <_sbrk_r+0x1c>)
 8003fd8:	2300      	movs	r3, #0
 8003fda:	4604      	mov	r4, r0
 8003fdc:	4608      	mov	r0, r1
 8003fde:	602b      	str	r3, [r5, #0]
 8003fe0:	f7fd f974 	bl	80012cc <_sbrk>
 8003fe4:	1c43      	adds	r3, r0, #1
 8003fe6:	d102      	bne.n	8003fee <_sbrk_r+0x1a>
 8003fe8:	682b      	ldr	r3, [r5, #0]
 8003fea:	b103      	cbz	r3, 8003fee <_sbrk_r+0x1a>
 8003fec:	6023      	str	r3, [r4, #0]
 8003fee:	bd38      	pop	{r3, r4, r5, pc}
 8003ff0:	20000204 	.word	0x20000204

08003ff4 <__malloc_lock>:
 8003ff4:	4801      	ldr	r0, [pc, #4]	; (8003ffc <__malloc_lock+0x8>)
 8003ff6:	f000 b811 	b.w	800401c <__retarget_lock_acquire_recursive>
 8003ffa:	bf00      	nop
 8003ffc:	2000020c 	.word	0x2000020c

08004000 <__malloc_unlock>:
 8004000:	4801      	ldr	r0, [pc, #4]	; (8004008 <__malloc_unlock+0x8>)
 8004002:	f000 b80c 	b.w	800401e <__retarget_lock_release_recursive>
 8004006:	bf00      	nop
 8004008:	2000020c 	.word	0x2000020c

0800400c <_malloc_usable_size_r>:
 800400c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004010:	1f18      	subs	r0, r3, #4
 8004012:	2b00      	cmp	r3, #0
 8004014:	bfbc      	itt	lt
 8004016:	580b      	ldrlt	r3, [r1, r0]
 8004018:	18c0      	addlt	r0, r0, r3
 800401a:	4770      	bx	lr

0800401c <__retarget_lock_acquire_recursive>:
 800401c:	4770      	bx	lr

0800401e <__retarget_lock_release_recursive>:
 800401e:	4770      	bx	lr

08004020 <_init>:
 8004020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004022:	bf00      	nop
 8004024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004026:	bc08      	pop	{r3}
 8004028:	469e      	mov	lr, r3
 800402a:	4770      	bx	lr

0800402c <_fini>:
 800402c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800402e:	bf00      	nop
 8004030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004032:	bc08      	pop	{r3}
 8004034:	469e      	mov	lr, r3
 8004036:	4770      	bx	lr
