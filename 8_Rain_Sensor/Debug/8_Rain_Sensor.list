
8_Rain_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b54  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08003cf4  08003cf4  00013cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003db8  08003db8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003db8  08003db8  00013db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003dc0  08003dc0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003dc0  08003dc0  00013dc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003dc4  08003dc4  00013dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003dc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  20000070  08003e38  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000214  08003e38  00020214  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a4e6  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ba8  00000000  00000000  0002a586  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000818  00000000  00000000  0002c130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000770  00000000  00000000  0002c948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f7e  00000000  00000000  0002d0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009a1d  00000000  00000000  00044036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000916f7  00000000  00000000  0004da53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000df14a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002424  00000000  00000000  000df1a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003cdc 	.word	0x08003cdc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08003cdc 	.word	0x08003cdc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <SendUnsignedNumber>:
#include "Uart.h"
void SendUnsignedNumber(uint32_t number,UART_HandleTypeDef _huart)
{
 8000588:	b084      	sub	sp, #16
 800058a:	b580      	push	{r7, lr}
 800058c:	b084      	sub	sp, #16
 800058e:	af00      	add	r7, sp, #0
 8000590:	6078      	str	r0, [r7, #4]
 8000592:	f107 001c 	add.w	r0, r7, #28
 8000596:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	memset(uartBuffer,0,50);
 800059a:	2232      	movs	r2, #50	; 0x32
 800059c:	2100      	movs	r1, #0
 800059e:	480d      	ldr	r0, [pc, #52]	; (80005d4 <SendUnsignedNumber+0x4c>)
 80005a0:	f002 ff66 	bl	8003470 <memset>
	uint8_t l = sprintf(uartBuffer,"%lu",number);
 80005a4:	687a      	ldr	r2, [r7, #4]
 80005a6:	490c      	ldr	r1, [pc, #48]	; (80005d8 <SendUnsignedNumber+0x50>)
 80005a8:	480a      	ldr	r0, [pc, #40]	; (80005d4 <SendUnsignedNumber+0x4c>)
 80005aa:	f002 ff69 	bl	8003480 <siprintf>
 80005ae:	4603      	mov	r3, r0
 80005b0:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&_huart, (uint8_t *)uartBuffer, l, 500);
 80005b2:	7bfb      	ldrb	r3, [r7, #15]
 80005b4:	b29a      	uxth	r2, r3
 80005b6:	f107 001c 	add.w	r0, r7, #28
 80005ba:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80005be:	4905      	ldr	r1, [pc, #20]	; (80005d4 <SendUnsignedNumber+0x4c>)
 80005c0:	f002 fc87 	bl	8002ed2 <HAL_UART_Transmit>
}
 80005c4:	bf00      	nop
 80005c6:	3710      	adds	r7, #16
 80005c8:	46bd      	mov	sp, r7
 80005ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005ce:	b004      	add	sp, #16
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	20000120 	.word	0x20000120
 80005d8:	08003cf4 	.word	0x08003cf4

080005dc <SendConstChar>:
	HAL_UART_Transmit(&_huart, (uint8_t *)uartBuffer, l, 500);
	HAL_UART_Transmit(&_huart, (uint8_t *)"\n", 2, 50);

}
void SendConstChar(const char* constChar,UART_HandleTypeDef _huart)
{
 80005dc:	b084      	sub	sp, #16
 80005de:	b580      	push	{r7, lr}
 80005e0:	b082      	sub	sp, #8
 80005e2:	af00      	add	r7, sp, #0
 80005e4:	6078      	str	r0, [r7, #4]
 80005e6:	f107 0014 	add.w	r0, r7, #20
 80005ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	memset(uartBuffer,0,50);
 80005ee:	2232      	movs	r2, #50	; 0x32
 80005f0:	2100      	movs	r1, #0
 80005f2:	480a      	ldr	r0, [pc, #40]	; (800061c <SendConstChar+0x40>)
 80005f4:	f002 ff3c 	bl	8003470 <memset>
	HAL_UART_Transmit(&_huart,(uint8_t *)constChar,strlen((const char*)constChar),200);
 80005f8:	6878      	ldr	r0, [r7, #4]
 80005fa:	f7ff fdf1 	bl	80001e0 <strlen>
 80005fe:	4603      	mov	r3, r0
 8000600:	b29a      	uxth	r2, r3
 8000602:	f107 0014 	add.w	r0, r7, #20
 8000606:	23c8      	movs	r3, #200	; 0xc8
 8000608:	6879      	ldr	r1, [r7, #4]
 800060a:	f002 fc62 	bl	8002ed2 <HAL_UART_Transmit>
}
 800060e:	bf00      	nop
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000618:	b004      	add	sp, #16
 800061a:	4770      	bx	lr
 800061c:	20000120 	.word	0x20000120

08000620 <SendConstCharLn>:
void SendConstCharLn(const char* constChar,UART_HandleTypeDef _huart)
{
 8000620:	b084      	sub	sp, #16
 8000622:	b580      	push	{r7, lr}
 8000624:	b082      	sub	sp, #8
 8000626:	af00      	add	r7, sp, #0
 8000628:	6078      	str	r0, [r7, #4]
 800062a:	f107 0014 	add.w	r0, r7, #20
 800062e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	memset(uartBuffer,0,50);
 8000632:	2232      	movs	r2, #50	; 0x32
 8000634:	2100      	movs	r1, #0
 8000636:	480e      	ldr	r0, [pc, #56]	; (8000670 <SendConstCharLn+0x50>)
 8000638:	f002 ff1a 	bl	8003470 <memset>
	HAL_UART_Transmit(&_huart,(uint8_t *)constChar,strlen((const char*)constChar),200);
 800063c:	6878      	ldr	r0, [r7, #4]
 800063e:	f7ff fdcf 	bl	80001e0 <strlen>
 8000642:	4603      	mov	r3, r0
 8000644:	b29a      	uxth	r2, r3
 8000646:	f107 0014 	add.w	r0, r7, #20
 800064a:	23c8      	movs	r3, #200	; 0xc8
 800064c:	6879      	ldr	r1, [r7, #4]
 800064e:	f002 fc40 	bl	8002ed2 <HAL_UART_Transmit>
		HAL_UART_Transmit(&_huart, (uint8_t *)"\n", 2, 50);
 8000652:	f107 0014 	add.w	r0, r7, #20
 8000656:	2332      	movs	r3, #50	; 0x32
 8000658:	2202      	movs	r2, #2
 800065a:	4906      	ldr	r1, [pc, #24]	; (8000674 <SendConstCharLn+0x54>)
 800065c:	f002 fc39 	bl	8002ed2 <HAL_UART_Transmit>
}
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800066a:	b004      	add	sp, #16
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	20000120 	.word	0x20000120
 8000674:	08003cf8 	.word	0x08003cf8

08000678 <SendFloat>:
void SendFloat(float num,UART_HandleTypeDef _huart)
{
 8000678:	b084      	sub	sp, #16
 800067a:	b580      	push	{r7, lr}
 800067c:	b086      	sub	sp, #24
 800067e:	af00      	add	r7, sp, #0
 8000680:	ed87 0a01 	vstr	s0, [r7, #4]
 8000684:	f107 0c20 	add.w	ip, r7, #32
 8000688:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memset(uartBuffer,0,50);
 800068c:	2232      	movs	r2, #50	; 0x32
 800068e:	2100      	movs	r1, #0
 8000690:	481f      	ldr	r0, [pc, #124]	; (8000710 <SendFloat+0x98>)
 8000692:	f002 feed 	bl	8003470 <memset>
	uint16_t intPart = (uint16_t)num;
 8000696:	edd7 7a01 	vldr	s15, [r7, #4]
 800069a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800069e:	ee17 3a90 	vmov	r3, s15
 80006a2:	82fb      	strh	r3, [r7, #22]
	float  decPart  = (float )num - intPart;
 80006a4:	8afb      	ldrh	r3, [r7, #22]
 80006a6:	ee07 3a90 	vmov	s15, r3
 80006aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006ae:	ed97 7a01 	vldr	s14, [r7, #4]
 80006b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80006b6:	edc7 7a04 	vstr	s15, [r7, #16]
	uint16_t decPart2 = (decPart*100)/10;
 80006ba:	edd7 7a04 	vldr	s15, [r7, #16]
 80006be:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000714 <SendFloat+0x9c>
 80006c2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80006c6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80006ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006d2:	ee17 3a90 	vmov	r3, s15
 80006d6:	81fb      	strh	r3, [r7, #14]
	sprintf(uartBuffer,"%d.%d",intPart,decPart2);
 80006d8:	8afa      	ldrh	r2, [r7, #22]
 80006da:	89fb      	ldrh	r3, [r7, #14]
 80006dc:	490e      	ldr	r1, [pc, #56]	; (8000718 <SendFloat+0xa0>)
 80006de:	480c      	ldr	r0, [pc, #48]	; (8000710 <SendFloat+0x98>)
 80006e0:	f002 fece 	bl	8003480 <siprintf>
	HAL_UART_Transmit(&_huart, (uint8_t *)uartBuffer, sprintf(uartBuffer,"%d.%d",intPart,decPart2), 400);
 80006e4:	8afa      	ldrh	r2, [r7, #22]
 80006e6:	89fb      	ldrh	r3, [r7, #14]
 80006e8:	490b      	ldr	r1, [pc, #44]	; (8000718 <SendFloat+0xa0>)
 80006ea:	4809      	ldr	r0, [pc, #36]	; (8000710 <SendFloat+0x98>)
 80006ec:	f002 fec8 	bl	8003480 <siprintf>
 80006f0:	4603      	mov	r3, r0
 80006f2:	b29a      	uxth	r2, r3
 80006f4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80006f8:	4905      	ldr	r1, [pc, #20]	; (8000710 <SendFloat+0x98>)
 80006fa:	f107 0020 	add.w	r0, r7, #32
 80006fe:	f002 fbe8 	bl	8002ed2 <HAL_UART_Transmit>
}
 8000702:	bf00      	nop
 8000704:	3718      	adds	r7, #24
 8000706:	46bd      	mov	sp, r7
 8000708:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800070c:	b004      	add	sp, #16
 800070e:	4770      	bx	lr
 8000710:	20000120 	.word	0x20000120
 8000714:	42c80000 	.word	0x42c80000
 8000718:	08003cfc 	.word	0x08003cfc

0800071c <SendFloatLn>:
void SendFloatLn(float num,UART_HandleTypeDef _huart)
{
 800071c:	b084      	sub	sp, #16
 800071e:	b5b0      	push	{r4, r5, r7, lr}
 8000720:	b090      	sub	sp, #64	; 0x40
 8000722:	af0e      	add	r7, sp, #56	; 0x38
 8000724:	ed87 0a01 	vstr	s0, [r7, #4]
 8000728:	f107 0418 	add.w	r4, r7, #24
 800072c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	memset(uartBuffer,0,50);
 8000730:	2232      	movs	r2, #50	; 0x32
 8000732:	2100      	movs	r1, #0
 8000734:	4811      	ldr	r0, [pc, #68]	; (800077c <SendFloatLn+0x60>)
 8000736:	f002 fe9b 	bl	8003470 <memset>
	SendFloat(num,_huart);
 800073a:	466d      	mov	r5, sp
 800073c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8000740:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000742:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000744:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000746:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000748:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800074a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800074c:	6823      	ldr	r3, [r4, #0]
 800074e:	602b      	str	r3, [r5, #0]
 8000750:	f107 0318 	add.w	r3, r7, #24
 8000754:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000756:	ed97 0a01 	vldr	s0, [r7, #4]
 800075a:	f7ff ff8d 	bl	8000678 <SendFloat>
	HAL_UART_Transmit(&_huart, (uint8_t *)"\n", 2, 50);
 800075e:	2332      	movs	r3, #50	; 0x32
 8000760:	2202      	movs	r2, #2
 8000762:	4907      	ldr	r1, [pc, #28]	; (8000780 <SendFloatLn+0x64>)
 8000764:	f107 0018 	add.w	r0, r7, #24
 8000768:	f002 fbb3 	bl	8002ed2 <HAL_UART_Transmit>
}
 800076c:	bf00      	nop
 800076e:	3708      	adds	r7, #8
 8000770:	46bd      	mov	sp, r7
 8000772:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000776:	b004      	add	sp, #16
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	20000120 	.word	0x20000120
 8000780:	08003cf8 	.word	0x08003cf8

08000784 <map>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
long map(long x, long in_min, long in_max, long out_min, long out_max) {
 8000784:	b480      	push	{r7}
 8000786:	b085      	sub	sp, #20
 8000788:	af00      	add	r7, sp, #0
 800078a:	60f8      	str	r0, [r7, #12]
 800078c:	60b9      	str	r1, [r7, #8]
 800078e:	607a      	str	r2, [r7, #4]
 8000790:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000792:	68fa      	ldr	r2, [r7, #12]
 8000794:	68bb      	ldr	r3, [r7, #8]
 8000796:	1ad3      	subs	r3, r2, r3
 8000798:	69b9      	ldr	r1, [r7, #24]
 800079a:	683a      	ldr	r2, [r7, #0]
 800079c:	1a8a      	subs	r2, r1, r2
 800079e:	fb02 f203 	mul.w	r2, r2, r3
 80007a2:	6879      	ldr	r1, [r7, #4]
 80007a4:	68bb      	ldr	r3, [r7, #8]
 80007a6:	1acb      	subs	r3, r1, r3
 80007a8:	fb92 f2f3 	sdiv	r2, r2, r3
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	4413      	add	r3, r2
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3714      	adds	r7, #20
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr

080007bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007be:	b095      	sub	sp, #84	; 0x54
 80007c0:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c2:	f000 fc39 	bl	8001038 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c6:	f000 f967 	bl	8000a98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ca:	f000 fa5f 	bl	8000c8c <MX_GPIO_Init>
  MX_DMA_Init();
 80007ce:	f000 fa3d 	bl	8000c4c <MX_DMA_Init>
  MX_ADC1_Init();
 80007d2:	f000 f9bf 	bl	8000b54 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80007d6:	f000 fa0f 	bl	8000bf8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, adc, 1);
 80007da:	2201      	movs	r2, #1
 80007dc:	49a0      	ldr	r1, [pc, #640]	; (8000a60 <main+0x2a4>)
 80007de:	48a1      	ldr	r0, [pc, #644]	; (8000a64 <main+0x2a8>)
 80007e0:	f000 fd04 	bl	80011ec <HAL_ADC_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  float virtueVoltage = *adc*3.3f/4095;
 80007e4:	4b9e      	ldr	r3, [pc, #632]	; (8000a60 <main+0x2a4>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	ee07 3a90 	vmov	s15, r3
 80007ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007f0:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 8000a68 <main+0x2ac>
 80007f4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80007f8:	eddf 6a9c 	vldr	s13, [pc, #624]	; 8000a6c <main+0x2b0>
 80007fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000800:	edc7 7a05 	vstr	s15, [r7, #20]
	  		float realisticVoltage = 1.67f*virtueVoltage;
 8000804:	edd7 7a05 	vldr	s15, [r7, #20]
 8000808:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8000a70 <main+0x2b4>
 800080c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000810:	edc7 7a04 	vstr	s15, [r7, #16]
	  		uint16_t realisticAdc = realisticVoltage*4095/5 ;//Vin = Vref*adc/4098
 8000814:	edd7 7a04 	vldr	s15, [r7, #16]
 8000818:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8000a6c <main+0x2b0>
 800081c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000820:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8000824:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000828:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800082c:	ee17 3a90 	vmov	r3, s15
 8000830:	81fb      	strh	r3, [r7, #14]

	  		SendConstChar("virtue ADC: ", huart2);
 8000832:	4e90      	ldr	r6, [pc, #576]	; (8000a74 <main+0x2b8>)
 8000834:	466d      	mov	r5, sp
 8000836:	f106 040c 	add.w	r4, r6, #12
 800083a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800083c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800083e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000840:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000842:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000844:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000846:	e894 0003 	ldmia.w	r4, {r0, r1}
 800084a:	e885 0003 	stmia.w	r5, {r0, r1}
 800084e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000852:	4889      	ldr	r0, [pc, #548]	; (8000a78 <main+0x2bc>)
 8000854:	f7ff fec2 	bl	80005dc <SendConstChar>
	  		SendUnsignedNumber(*adc, huart2);
 8000858:	4b81      	ldr	r3, [pc, #516]	; (8000a60 <main+0x2a4>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	4e85      	ldr	r6, [pc, #532]	; (8000a74 <main+0x2b8>)
 8000860:	466d      	mov	r5, sp
 8000862:	f106 040c 	add.w	r4, r6, #12
 8000866:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000868:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800086a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800086c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800086e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000870:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000872:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000876:	e885 0003 	stmia.w	r5, {r0, r1}
 800087a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800087e:	6878      	ldr	r0, [r7, #4]
 8000880:	f7ff fe82 	bl	8000588 <SendUnsignedNumber>
	  		SendConstChar("\n ", huart2);
 8000884:	4e7b      	ldr	r6, [pc, #492]	; (8000a74 <main+0x2b8>)
 8000886:	466d      	mov	r5, sp
 8000888:	f106 040c 	add.w	r4, r6, #12
 800088c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800088e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000890:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000892:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000894:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000896:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000898:	e894 0003 	ldmia.w	r4, {r0, r1}
 800089c:	e885 0003 	stmia.w	r5, {r0, r1}
 80008a0:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80008a4:	4875      	ldr	r0, [pc, #468]	; (8000a7c <main+0x2c0>)
 80008a6:	f7ff fe99 	bl	80005dc <SendConstChar>
	  		SendConstChar("virtue Voltage: ", huart2);
 80008aa:	4e72      	ldr	r6, [pc, #456]	; (8000a74 <main+0x2b8>)
 80008ac:	466d      	mov	r5, sp
 80008ae:	f106 040c 	add.w	r4, r6, #12
 80008b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80008c2:	e885 0003 	stmia.w	r5, {r0, r1}
 80008c6:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80008ca:	486d      	ldr	r0, [pc, #436]	; (8000a80 <main+0x2c4>)
 80008cc:	f7ff fe86 	bl	80005dc <SendConstChar>
	  		SendFloatLn(virtueVoltage, huart2);
 80008d0:	4e68      	ldr	r6, [pc, #416]	; (8000a74 <main+0x2b8>)
 80008d2:	466d      	mov	r5, sp
 80008d4:	f106 0410 	add.w	r4, r6, #16
 80008d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008e4:	6823      	ldr	r3, [r4, #0]
 80008e6:	602b      	str	r3, [r5, #0]
 80008e8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80008ec:	ed97 0a05 	vldr	s0, [r7, #20]
 80008f0:	f7ff ff14 	bl	800071c <SendFloatLn>

	  		SendConstChar("realistic ADC: ", huart2);
 80008f4:	4e5f      	ldr	r6, [pc, #380]	; (8000a74 <main+0x2b8>)
 80008f6:	466d      	mov	r5, sp
 80008f8:	f106 040c 	add.w	r4, r6, #12
 80008fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000900:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000902:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000904:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000906:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000908:	e894 0003 	ldmia.w	r4, {r0, r1}
 800090c:	e885 0003 	stmia.w	r5, {r0, r1}
 8000910:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000914:	485b      	ldr	r0, [pc, #364]	; (8000a84 <main+0x2c8>)
 8000916:	f7ff fe61 	bl	80005dc <SendConstChar>
	  		SendUnsignedNumber((uint32_t)realisticAdc, huart2);
 800091a:	f8b7 c00e 	ldrh.w	ip, [r7, #14]
 800091e:	4e55      	ldr	r6, [pc, #340]	; (8000a74 <main+0x2b8>)
 8000920:	466d      	mov	r5, sp
 8000922:	f106 040c 	add.w	r4, r6, #12
 8000926:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000928:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800092a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800092c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800092e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000930:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000932:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000936:	e885 0003 	stmia.w	r5, {r0, r1}
 800093a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800093e:	4660      	mov	r0, ip
 8000940:	f7ff fe22 	bl	8000588 <SendUnsignedNumber>
	  		SendConstChar("\n ", huart2);
 8000944:	4e4b      	ldr	r6, [pc, #300]	; (8000a74 <main+0x2b8>)
 8000946:	466d      	mov	r5, sp
 8000948:	f106 040c 	add.w	r4, r6, #12
 800094c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800094e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000950:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000952:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000954:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000956:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000958:	e894 0003 	ldmia.w	r4, {r0, r1}
 800095c:	e885 0003 	stmia.w	r5, {r0, r1}
 8000960:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000964:	4845      	ldr	r0, [pc, #276]	; (8000a7c <main+0x2c0>)
 8000966:	f7ff fe39 	bl	80005dc <SendConstChar>
	  		SendConstChar("Realistic Voltage: ", huart2);
 800096a:	4e42      	ldr	r6, [pc, #264]	; (8000a74 <main+0x2b8>)
 800096c:	466d      	mov	r5, sp
 800096e:	f106 040c 	add.w	r4, r6, #12
 8000972:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000974:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000976:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000978:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800097a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800097c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800097e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000982:	e885 0003 	stmia.w	r5, {r0, r1}
 8000986:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800098a:	483f      	ldr	r0, [pc, #252]	; (8000a88 <main+0x2cc>)
 800098c:	f7ff fe26 	bl	80005dc <SendConstChar>
	  		SendFloatLn(realisticVoltage, huart2);
 8000990:	4e38      	ldr	r6, [pc, #224]	; (8000a74 <main+0x2b8>)
 8000992:	466d      	mov	r5, sp
 8000994:	f106 0410 	add.w	r4, r6, #16
 8000998:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800099a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800099c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800099e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009a4:	6823      	ldr	r3, [r4, #0]
 80009a6:	602b      	str	r3, [r5, #0]
 80009a8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80009ac:	ed97 0a04 	vldr	s0, [r7, #16]
 80009b0:	f7ff feb4 	bl	800071c <SendFloatLn>
	  		uint8_t range = (uint8_t)map(realisticAdc,0,4095,0,3);
 80009b4:	89f8      	ldrh	r0, [r7, #14]
 80009b6:	2303      	movs	r3, #3
 80009b8:	9300      	str	r3, [sp, #0]
 80009ba:	2300      	movs	r3, #0
 80009bc:	f640 72ff 	movw	r2, #4095	; 0xfff
 80009c0:	2100      	movs	r1, #0
 80009c2:	f7ff fedf 	bl	8000784 <map>
 80009c6:	4603      	mov	r3, r0
 80009c8:	737b      	strb	r3, [r7, #13]
	  		switch(range)
 80009ca:	7b7b      	ldrb	r3, [r7, #13]
 80009cc:	2b02      	cmp	r3, #2
 80009ce:	d02e      	beq.n	8000a2e <main+0x272>
 80009d0:	2b02      	cmp	r3, #2
 80009d2:	dc40      	bgt.n	8000a56 <main+0x29a>
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d002      	beq.n	80009de <main+0x222>
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d014      	beq.n	8000a06 <main+0x24a>
 80009dc:	e03b      	b.n	8000a56 <main+0x29a>
	  		{
	  		case 0:
		  		SendConstCharLn("Flood", huart2);
 80009de:	4e25      	ldr	r6, [pc, #148]	; (8000a74 <main+0x2b8>)
 80009e0:	466d      	mov	r5, sp
 80009e2:	f106 040c 	add.w	r4, r6, #12
 80009e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80009f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80009fa:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80009fe:	4823      	ldr	r0, [pc, #140]	; (8000a8c <main+0x2d0>)
 8000a00:	f7ff fe0e 	bl	8000620 <SendConstCharLn>
	  			break;
 8000a04:	e027      	b.n	8000a56 <main+0x29a>
	  		case 1:
		  		SendConstCharLn("Rain", huart2);
 8000a06:	4e1b      	ldr	r6, [pc, #108]	; (8000a74 <main+0x2b8>)
 8000a08:	466d      	mov	r5, sp
 8000a0a:	f106 040c 	add.w	r4, r6, #12
 8000a0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a1a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000a1e:	e885 0003 	stmia.w	r5, {r0, r1}
 8000a22:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000a26:	481a      	ldr	r0, [pc, #104]	; (8000a90 <main+0x2d4>)
 8000a28:	f7ff fdfa 	bl	8000620 <SendConstCharLn>
	  			break;
 8000a2c:	e013      	b.n	8000a56 <main+0x29a>
	  		case 2:
		  		SendConstCharLn("Dry", huart2);
 8000a2e:	4e11      	ldr	r6, [pc, #68]	; (8000a74 <main+0x2b8>)
 8000a30:	466d      	mov	r5, sp
 8000a32:	f106 040c 	add.w	r4, r6, #12
 8000a36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a42:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000a46:	e885 0003 	stmia.w	r5, {r0, r1}
 8000a4a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000a4e:	4811      	ldr	r0, [pc, #68]	; (8000a94 <main+0x2d8>)
 8000a50:	f7ff fde6 	bl	8000620 <SendConstCharLn>
	  			break;
 8000a54:	bf00      	nop
	  		}
	  HAL_Delay(1000);
 8000a56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a5a:	f000 fb5f 	bl	800111c <HAL_Delay>
  {
 8000a5e:	e6c1      	b.n	80007e4 <main+0x28>
 8000a60:	2000019c 	.word	0x2000019c
 8000a64:	20000154 	.word	0x20000154
 8000a68:	40533333 	.word	0x40533333
 8000a6c:	457ff000 	.word	0x457ff000
 8000a70:	3fd5c28f 	.word	0x3fd5c28f
 8000a74:	200000dc 	.word	0x200000dc
 8000a78:	08003d04 	.word	0x08003d04
 8000a7c:	08003d14 	.word	0x08003d14
 8000a80:	08003d18 	.word	0x08003d18
 8000a84:	08003d2c 	.word	0x08003d2c
 8000a88:	08003d3c 	.word	0x08003d3c
 8000a8c:	08003d50 	.word	0x08003d50
 8000a90:	08003d58 	.word	0x08003d58
 8000a94:	08003d60 	.word	0x08003d60

08000a98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b094      	sub	sp, #80	; 0x50
 8000a9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a9e:	f107 0320 	add.w	r3, r7, #32
 8000aa2:	2230      	movs	r2, #48	; 0x30
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f002 fce2 	bl	8003470 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aac:	f107 030c 	add.w	r3, r7, #12
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]
 8000ab8:	60da      	str	r2, [r3, #12]
 8000aba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000abc:	2300      	movs	r3, #0
 8000abe:	60bb      	str	r3, [r7, #8]
 8000ac0:	4b22      	ldr	r3, [pc, #136]	; (8000b4c <SystemClock_Config+0xb4>)
 8000ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac4:	4a21      	ldr	r2, [pc, #132]	; (8000b4c <SystemClock_Config+0xb4>)
 8000ac6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aca:	6413      	str	r3, [r2, #64]	; 0x40
 8000acc:	4b1f      	ldr	r3, [pc, #124]	; (8000b4c <SystemClock_Config+0xb4>)
 8000ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ad4:	60bb      	str	r3, [r7, #8]
 8000ad6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ad8:	2300      	movs	r3, #0
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	4b1c      	ldr	r3, [pc, #112]	; (8000b50 <SystemClock_Config+0xb8>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a1b      	ldr	r2, [pc, #108]	; (8000b50 <SystemClock_Config+0xb8>)
 8000ae2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ae6:	6013      	str	r3, [r2, #0]
 8000ae8:	4b19      	ldr	r3, [pc, #100]	; (8000b50 <SystemClock_Config+0xb8>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000af4:	2302      	movs	r3, #2
 8000af6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000af8:	2301      	movs	r3, #1
 8000afa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000afc:	2310      	movs	r3, #16
 8000afe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b00:	2300      	movs	r3, #0
 8000b02:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b04:	f107 0320 	add.w	r3, r7, #32
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f001 fd4d 	bl	80025a8 <HAL_RCC_OscConfig>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000b14:	f000 f8fc 	bl	8000d10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b18:	230f      	movs	r3, #15
 8000b1a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b20:	2300      	movs	r3, #0
 8000b22:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b24:	2300      	movs	r3, #0
 8000b26:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b2c:	f107 030c 	add.w	r3, r7, #12
 8000b30:	2100      	movs	r1, #0
 8000b32:	4618      	mov	r0, r3
 8000b34:	f001 ffb0 	bl	8002a98 <HAL_RCC_ClockConfig>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000b3e:	f000 f8e7 	bl	8000d10 <Error_Handler>
  }
}
 8000b42:	bf00      	nop
 8000b44:	3750      	adds	r7, #80	; 0x50
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40023800 	.word	0x40023800
 8000b50:	40007000 	.word	0x40007000

08000b54 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b5a:	463b      	mov	r3, r7
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b66:	4b21      	ldr	r3, [pc, #132]	; (8000bec <MX_ADC1_Init+0x98>)
 8000b68:	4a21      	ldr	r2, [pc, #132]	; (8000bf0 <MX_ADC1_Init+0x9c>)
 8000b6a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000b6c:	4b1f      	ldr	r3, [pc, #124]	; (8000bec <MX_ADC1_Init+0x98>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b72:	4b1e      	ldr	r3, [pc, #120]	; (8000bec <MX_ADC1_Init+0x98>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000b78:	4b1c      	ldr	r3, [pc, #112]	; (8000bec <MX_ADC1_Init+0x98>)
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b7e:	4b1b      	ldr	r3, [pc, #108]	; (8000bec <MX_ADC1_Init+0x98>)
 8000b80:	2201      	movs	r2, #1
 8000b82:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b84:	4b19      	ldr	r3, [pc, #100]	; (8000bec <MX_ADC1_Init+0x98>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b8c:	4b17      	ldr	r3, [pc, #92]	; (8000bec <MX_ADC1_Init+0x98>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b92:	4b16      	ldr	r3, [pc, #88]	; (8000bec <MX_ADC1_Init+0x98>)
 8000b94:	4a17      	ldr	r2, [pc, #92]	; (8000bf4 <MX_ADC1_Init+0xa0>)
 8000b96:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b98:	4b14      	ldr	r3, [pc, #80]	; (8000bec <MX_ADC1_Init+0x98>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000b9e:	4b13      	ldr	r3, [pc, #76]	; (8000bec <MX_ADC1_Init+0x98>)
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000ba4:	4b11      	ldr	r3, [pc, #68]	; (8000bec <MX_ADC1_Init+0x98>)
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bac:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <MX_ADC1_Init+0x98>)
 8000bae:	2201      	movs	r2, #1
 8000bb0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bb2:	480e      	ldr	r0, [pc, #56]	; (8000bec <MX_ADC1_Init+0x98>)
 8000bb4:	f000 fad6 	bl	8001164 <HAL_ADC_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000bbe:	f000 f8a7 	bl	8000d10 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8000bca:	2306      	movs	r3, #6
 8000bcc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bce:	463b      	mov	r3, r7
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4806      	ldr	r0, [pc, #24]	; (8000bec <MX_ADC1_Init+0x98>)
 8000bd4:	f000 fc18 	bl	8001408 <HAL_ADC_ConfigChannel>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000bde:	f000 f897 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000be2:	bf00      	nop
 8000be4:	3710      	adds	r7, #16
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20000154 	.word	0x20000154
 8000bf0:	40012000 	.word	0x40012000
 8000bf4:	0f000001 	.word	0x0f000001

08000bf8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bfc:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <MX_USART2_UART_Init+0x4c>)
 8000bfe:	4a12      	ldr	r2, [pc, #72]	; (8000c48 <MX_USART2_UART_Init+0x50>)
 8000c00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c02:	4b10      	ldr	r3, [pc, #64]	; (8000c44 <MX_USART2_UART_Init+0x4c>)
 8000c04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <MX_USART2_UART_Init+0x4c>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c10:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <MX_USART2_UART_Init+0x4c>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c16:	4b0b      	ldr	r3, [pc, #44]	; (8000c44 <MX_USART2_UART_Init+0x4c>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c1c:	4b09      	ldr	r3, [pc, #36]	; (8000c44 <MX_USART2_UART_Init+0x4c>)
 8000c1e:	220c      	movs	r2, #12
 8000c20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c22:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <MX_USART2_UART_Init+0x4c>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c28:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <MX_USART2_UART_Init+0x4c>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c2e:	4805      	ldr	r0, [pc, #20]	; (8000c44 <MX_USART2_UART_Init+0x4c>)
 8000c30:	f002 f902 	bl	8002e38 <HAL_UART_Init>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c3a:	f000 f869 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	200000dc 	.word	0x200000dc
 8000c48:	40004400 	.word	0x40004400

08000c4c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	607b      	str	r3, [r7, #4]
 8000c56:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <MX_DMA_Init+0x3c>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4a0b      	ldr	r2, [pc, #44]	; (8000c88 <MX_DMA_Init+0x3c>)
 8000c5c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <MX_DMA_Init+0x3c>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2100      	movs	r1, #0
 8000c72:	2038      	movs	r0, #56	; 0x38
 8000c74:	f000 ff53 	bl	8001b1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c78:	2038      	movs	r0, #56	; 0x38
 8000c7a:	f000 ff6c 	bl	8001b56 <HAL_NVIC_EnableIRQ>

}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40023800 	.word	0x40023800

08000c8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b088      	sub	sp, #32
 8000c90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c92:	f107 030c 	add.w	r3, r7, #12
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	609a      	str	r2, [r3, #8]
 8000c9e:	60da      	str	r2, [r3, #12]
 8000ca0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60bb      	str	r3, [r7, #8]
 8000ca6:	4b18      	ldr	r3, [pc, #96]	; (8000d08 <MX_GPIO_Init+0x7c>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4a17      	ldr	r2, [pc, #92]	; (8000d08 <MX_GPIO_Init+0x7c>)
 8000cac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb2:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <MX_GPIO_Init+0x7c>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cba:	60bb      	str	r3, [r7, #8]
 8000cbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	607b      	str	r3, [r7, #4]
 8000cc2:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <MX_GPIO_Init+0x7c>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	4a10      	ldr	r2, [pc, #64]	; (8000d08 <MX_GPIO_Init+0x7c>)
 8000cc8:	f043 0301 	orr.w	r3, r3, #1
 8000ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cce:	4b0e      	ldr	r3, [pc, #56]	; (8000d08 <MX_GPIO_Init+0x7c>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	f003 0301 	and.w	r3, r3, #1
 8000cd6:	607b      	str	r3, [r7, #4]
 8000cd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2102      	movs	r1, #2
 8000cde:	480b      	ldr	r0, [pc, #44]	; (8000d0c <MX_GPIO_Init+0x80>)
 8000ce0:	f001 fc48 	bl	8002574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf4:	f107 030c 	add.w	r3, r7, #12
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4804      	ldr	r0, [pc, #16]	; (8000d0c <MX_GPIO_Init+0x80>)
 8000cfc:	f001 fab6 	bl	800226c <HAL_GPIO_Init>

}
 8000d00:	bf00      	nop
 8000d02:	3720      	adds	r7, #32
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40023800 	.word	0x40023800
 8000d0c:	40020000 	.word	0x40020000

08000d10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d14:	b672      	cpsid	i
}
 8000d16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d18:	e7fe      	b.n	8000d18 <Error_Handler+0x8>
	...

08000d1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	607b      	str	r3, [r7, #4]
 8000d26:	4b10      	ldr	r3, [pc, #64]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2a:	4a0f      	ldr	r2, [pc, #60]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d30:	6453      	str	r3, [r2, #68]	; 0x44
 8000d32:	4b0d      	ldr	r3, [pc, #52]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	603b      	str	r3, [r7, #0]
 8000d42:	4b09      	ldr	r3, [pc, #36]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d46:	4a08      	ldr	r2, [pc, #32]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d4e:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d56:	603b      	str	r3, [r7, #0]
 8000d58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	370c      	adds	r7, #12
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	40023800 	.word	0x40023800

08000d6c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b08a      	sub	sp, #40	; 0x28
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d74:	f107 0314 	add.w	r3, r7, #20
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a2f      	ldr	r2, [pc, #188]	; (8000e48 <HAL_ADC_MspInit+0xdc>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d157      	bne.n	8000e3e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	613b      	str	r3, [r7, #16]
 8000d92:	4b2e      	ldr	r3, [pc, #184]	; (8000e4c <HAL_ADC_MspInit+0xe0>)
 8000d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d96:	4a2d      	ldr	r2, [pc, #180]	; (8000e4c <HAL_ADC_MspInit+0xe0>)
 8000d98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d9e:	4b2b      	ldr	r3, [pc, #172]	; (8000e4c <HAL_ADC_MspInit+0xe0>)
 8000da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000da6:	613b      	str	r3, [r7, #16]
 8000da8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	60fb      	str	r3, [r7, #12]
 8000dae:	4b27      	ldr	r3, [pc, #156]	; (8000e4c <HAL_ADC_MspInit+0xe0>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	4a26      	ldr	r2, [pc, #152]	; (8000e4c <HAL_ADC_MspInit+0xe0>)
 8000db4:	f043 0301 	orr.w	r3, r3, #1
 8000db8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dba:	4b24      	ldr	r3, [pc, #144]	; (8000e4c <HAL_ADC_MspInit+0xe0>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	f003 0301 	and.w	r3, r3, #1
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd2:	f107 0314 	add.w	r3, r7, #20
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	481d      	ldr	r0, [pc, #116]	; (8000e50 <HAL_ADC_MspInit+0xe4>)
 8000dda:	f001 fa47 	bl	800226c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000dde:	4b1d      	ldr	r3, [pc, #116]	; (8000e54 <HAL_ADC_MspInit+0xe8>)
 8000de0:	4a1d      	ldr	r2, [pc, #116]	; (8000e58 <HAL_ADC_MspInit+0xec>)
 8000de2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000de4:	4b1b      	ldr	r3, [pc, #108]	; (8000e54 <HAL_ADC_MspInit+0xe8>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dea:	4b1a      	ldr	r3, [pc, #104]	; (8000e54 <HAL_ADC_MspInit+0xe8>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000df0:	4b18      	ldr	r3, [pc, #96]	; (8000e54 <HAL_ADC_MspInit+0xe8>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000df6:	4b17      	ldr	r3, [pc, #92]	; (8000e54 <HAL_ADC_MspInit+0xe8>)
 8000df8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dfc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000dfe:	4b15      	ldr	r3, [pc, #84]	; (8000e54 <HAL_ADC_MspInit+0xe8>)
 8000e00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e04:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e06:	4b13      	ldr	r3, [pc, #76]	; (8000e54 <HAL_ADC_MspInit+0xe8>)
 8000e08:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e0c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e0e:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <HAL_ADC_MspInit+0xe8>)
 8000e10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e14:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e16:	4b0f      	ldr	r3, [pc, #60]	; (8000e54 <HAL_ADC_MspInit+0xe8>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e1c:	4b0d      	ldr	r3, [pc, #52]	; (8000e54 <HAL_ADC_MspInit+0xe8>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e22:	480c      	ldr	r0, [pc, #48]	; (8000e54 <HAL_ADC_MspInit+0xe8>)
 8000e24:	f000 feb2 	bl	8001b8c <HAL_DMA_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000e2e:	f7ff ff6f 	bl	8000d10 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4a07      	ldr	r2, [pc, #28]	; (8000e54 <HAL_ADC_MspInit+0xe8>)
 8000e36:	639a      	str	r2, [r3, #56]	; 0x38
 8000e38:	4a06      	ldr	r2, [pc, #24]	; (8000e54 <HAL_ADC_MspInit+0xe8>)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e3e:	bf00      	nop
 8000e40:	3728      	adds	r7, #40	; 0x28
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40012000 	.word	0x40012000
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	40020000 	.word	0x40020000
 8000e54:	200001a0 	.word	0x200001a0
 8000e58:	40026410 	.word	0x40026410

08000e5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b08a      	sub	sp, #40	; 0x28
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a19      	ldr	r2, [pc, #100]	; (8000ee0 <HAL_UART_MspInit+0x84>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d12b      	bne.n	8000ed6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	613b      	str	r3, [r7, #16]
 8000e82:	4b18      	ldr	r3, [pc, #96]	; (8000ee4 <HAL_UART_MspInit+0x88>)
 8000e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e86:	4a17      	ldr	r2, [pc, #92]	; (8000ee4 <HAL_UART_MspInit+0x88>)
 8000e88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e8e:	4b15      	ldr	r3, [pc, #84]	; (8000ee4 <HAL_UART_MspInit+0x88>)
 8000e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e96:	613b      	str	r3, [r7, #16]
 8000e98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60fb      	str	r3, [r7, #12]
 8000e9e:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <HAL_UART_MspInit+0x88>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	4a10      	ldr	r2, [pc, #64]	; (8000ee4 <HAL_UART_MspInit+0x88>)
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <HAL_UART_MspInit+0x88>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000eb6:	230c      	movs	r3, #12
 8000eb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ec6:	2307      	movs	r3, #7
 8000ec8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eca:	f107 0314 	add.w	r3, r7, #20
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4805      	ldr	r0, [pc, #20]	; (8000ee8 <HAL_UART_MspInit+0x8c>)
 8000ed2:	f001 f9cb 	bl	800226c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ed6:	bf00      	nop
 8000ed8:	3728      	adds	r7, #40	; 0x28
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40004400 	.word	0x40004400
 8000ee4:	40023800 	.word	0x40023800
 8000ee8:	40020000 	.word	0x40020000

08000eec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ef0:	e7fe      	b.n	8000ef0 <NMI_Handler+0x4>

08000ef2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ef6:	e7fe      	b.n	8000ef6 <HardFault_Handler+0x4>

08000ef8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000efc:	e7fe      	b.n	8000efc <MemManage_Handler+0x4>

08000efe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f02:	e7fe      	b.n	8000f02 <BusFault_Handler+0x4>

08000f04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f08:	e7fe      	b.n	8000f08 <UsageFault_Handler+0x4>

08000f0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f38:	f000 f8d0 	bl	80010dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f3c:	bf00      	nop
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000f44:	4802      	ldr	r0, [pc, #8]	; (8000f50 <DMA2_Stream0_IRQHandler+0x10>)
 8000f46:	f000 ff27 	bl	8001d98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	200001a0 	.word	0x200001a0

08000f54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f5c:	4a14      	ldr	r2, [pc, #80]	; (8000fb0 <_sbrk+0x5c>)
 8000f5e:	4b15      	ldr	r3, [pc, #84]	; (8000fb4 <_sbrk+0x60>)
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f68:	4b13      	ldr	r3, [pc, #76]	; (8000fb8 <_sbrk+0x64>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d102      	bne.n	8000f76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f70:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <_sbrk+0x64>)
 8000f72:	4a12      	ldr	r2, [pc, #72]	; (8000fbc <_sbrk+0x68>)
 8000f74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f76:	4b10      	ldr	r3, [pc, #64]	; (8000fb8 <_sbrk+0x64>)
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d207      	bcs.n	8000f94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f84:	f002 fa4a 	bl	800341c <__errno>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	220c      	movs	r2, #12
 8000f8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f92:	e009      	b.n	8000fa8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f94:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <_sbrk+0x64>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f9a:	4b07      	ldr	r3, [pc, #28]	; (8000fb8 <_sbrk+0x64>)
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	4a05      	ldr	r2, [pc, #20]	; (8000fb8 <_sbrk+0x64>)
 8000fa4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3718      	adds	r7, #24
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20020000 	.word	0x20020000
 8000fb4:	00000400 	.word	0x00000400
 8000fb8:	2000008c 	.word	0x2000008c
 8000fbc:	20000218 	.word	0x20000218

08000fc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fc4:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <SystemInit+0x20>)
 8000fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fca:	4a05      	ldr	r2, [pc, #20]	; (8000fe0 <SystemInit+0x20>)
 8000fcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fe4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800101c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fe8:	480d      	ldr	r0, [pc, #52]	; (8001020 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fea:	490e      	ldr	r1, [pc, #56]	; (8001024 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fec:	4a0e      	ldr	r2, [pc, #56]	; (8001028 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff0:	e002      	b.n	8000ff8 <LoopCopyDataInit>

08000ff2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ff2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ff6:	3304      	adds	r3, #4

08000ff8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ff8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ffa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ffc:	d3f9      	bcc.n	8000ff2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ffe:	4a0b      	ldr	r2, [pc, #44]	; (800102c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001000:	4c0b      	ldr	r4, [pc, #44]	; (8001030 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001002:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001004:	e001      	b.n	800100a <LoopFillZerobss>

08001006 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001006:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001008:	3204      	adds	r2, #4

0800100a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800100a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800100c:	d3fb      	bcc.n	8001006 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800100e:	f7ff ffd7 	bl	8000fc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001012:	f002 fa09 	bl	8003428 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001016:	f7ff fbd1 	bl	80007bc <main>
  bx  lr    
 800101a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800101c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001020:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001024:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001028:	08003dc8 	.word	0x08003dc8
  ldr r2, =_sbss
 800102c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001030:	20000214 	.word	0x20000214

08001034 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001034:	e7fe      	b.n	8001034 <ADC_IRQHandler>
	...

08001038 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800103c:	4b0e      	ldr	r3, [pc, #56]	; (8001078 <HAL_Init+0x40>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a0d      	ldr	r2, [pc, #52]	; (8001078 <HAL_Init+0x40>)
 8001042:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001046:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001048:	4b0b      	ldr	r3, [pc, #44]	; (8001078 <HAL_Init+0x40>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a0a      	ldr	r2, [pc, #40]	; (8001078 <HAL_Init+0x40>)
 800104e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001052:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001054:	4b08      	ldr	r3, [pc, #32]	; (8001078 <HAL_Init+0x40>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a07      	ldr	r2, [pc, #28]	; (8001078 <HAL_Init+0x40>)
 800105a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800105e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001060:	2003      	movs	r0, #3
 8001062:	f000 fd51 	bl	8001b08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001066:	2000      	movs	r0, #0
 8001068:	f000 f808 	bl	800107c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800106c:	f7ff fe56 	bl	8000d1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001070:	2300      	movs	r3, #0
}
 8001072:	4618      	mov	r0, r3
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40023c00 	.word	0x40023c00

0800107c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001084:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <HAL_InitTick+0x54>)
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <HAL_InitTick+0x58>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	4619      	mov	r1, r3
 800108e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001092:	fbb3 f3f1 	udiv	r3, r3, r1
 8001096:	fbb2 f3f3 	udiv	r3, r2, r3
 800109a:	4618      	mov	r0, r3
 800109c:	f000 fd69 	bl	8001b72 <HAL_SYSTICK_Config>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e00e      	b.n	80010c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2b0f      	cmp	r3, #15
 80010ae:	d80a      	bhi.n	80010c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010b0:	2200      	movs	r2, #0
 80010b2:	6879      	ldr	r1, [r7, #4]
 80010b4:	f04f 30ff 	mov.w	r0, #4294967295
 80010b8:	f000 fd31 	bl	8001b1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010bc:	4a06      	ldr	r2, [pc, #24]	; (80010d8 <HAL_InitTick+0x5c>)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010c2:	2300      	movs	r3, #0
 80010c4:	e000      	b.n	80010c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20000000 	.word	0x20000000
 80010d4:	20000008 	.word	0x20000008
 80010d8:	20000004 	.word	0x20000004

080010dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <HAL_IncTick+0x20>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	461a      	mov	r2, r3
 80010e6:	4b06      	ldr	r3, [pc, #24]	; (8001100 <HAL_IncTick+0x24>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4413      	add	r3, r2
 80010ec:	4a04      	ldr	r2, [pc, #16]	; (8001100 <HAL_IncTick+0x24>)
 80010ee:	6013      	str	r3, [r2, #0]
}
 80010f0:	bf00      	nop
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	20000008 	.word	0x20000008
 8001100:	20000200 	.word	0x20000200

08001104 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  return uwTick;
 8001108:	4b03      	ldr	r3, [pc, #12]	; (8001118 <HAL_GetTick+0x14>)
 800110a:	681b      	ldr	r3, [r3, #0]
}
 800110c:	4618      	mov	r0, r3
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	20000200 	.word	0x20000200

0800111c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001124:	f7ff ffee 	bl	8001104 <HAL_GetTick>
 8001128:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001134:	d005      	beq.n	8001142 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001136:	4b0a      	ldr	r3, [pc, #40]	; (8001160 <HAL_Delay+0x44>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	461a      	mov	r2, r3
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	4413      	add	r3, r2
 8001140:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001142:	bf00      	nop
 8001144:	f7ff ffde 	bl	8001104 <HAL_GetTick>
 8001148:	4602      	mov	r2, r0
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	68fa      	ldr	r2, [r7, #12]
 8001150:	429a      	cmp	r2, r3
 8001152:	d8f7      	bhi.n	8001144 <HAL_Delay+0x28>
  {
  }
}
 8001154:	bf00      	nop
 8001156:	bf00      	nop
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000008 	.word	0x20000008

08001164 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800116c:	2300      	movs	r3, #0
 800116e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d101      	bne.n	800117a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e033      	b.n	80011e2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	2b00      	cmp	r3, #0
 8001180:	d109      	bne.n	8001196 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f7ff fdf2 	bl	8000d6c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2200      	movs	r2, #0
 800118c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2200      	movs	r2, #0
 8001192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119a:	f003 0310 	and.w	r3, r3, #16
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d118      	bne.n	80011d4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80011aa:	f023 0302 	bic.w	r3, r3, #2
 80011ae:	f043 0202 	orr.w	r2, r3, #2
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f000 fa58 	bl	800166c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2200      	movs	r2, #0
 80011c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c6:	f023 0303 	bic.w	r3, r3, #3
 80011ca:	f043 0201 	orr.w	r2, r3, #1
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	641a      	str	r2, [r3, #64]	; 0x40
 80011d2:	e001      	b.n	80011d8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2200      	movs	r2, #0
 80011dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80011e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
	...

080011ec <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80011f8:	2300      	movs	r3, #0
 80011fa:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001202:	2b01      	cmp	r3, #1
 8001204:	d101      	bne.n	800120a <HAL_ADC_Start_DMA+0x1e>
 8001206:	2302      	movs	r3, #2
 8001208:	e0ce      	b.n	80013a8 <HAL_ADC_Start_DMA+0x1bc>
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	2201      	movs	r2, #1
 800120e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	f003 0301 	and.w	r3, r3, #1
 800121c:	2b01      	cmp	r3, #1
 800121e:	d018      	beq.n	8001252 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	689a      	ldr	r2, [r3, #8]
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f042 0201 	orr.w	r2, r2, #1
 800122e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001230:	4b5f      	ldr	r3, [pc, #380]	; (80013b0 <HAL_ADC_Start_DMA+0x1c4>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a5f      	ldr	r2, [pc, #380]	; (80013b4 <HAL_ADC_Start_DMA+0x1c8>)
 8001236:	fba2 2303 	umull	r2, r3, r2, r3
 800123a:	0c9a      	lsrs	r2, r3, #18
 800123c:	4613      	mov	r3, r2
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	4413      	add	r3, r2
 8001242:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001244:	e002      	b.n	800124c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	3b01      	subs	r3, #1
 800124a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d1f9      	bne.n	8001246 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800125c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001260:	d107      	bne.n	8001272 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	689a      	ldr	r2, [r3, #8]
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001270:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	f003 0301 	and.w	r3, r3, #1
 800127c:	2b01      	cmp	r3, #1
 800127e:	f040 8086 	bne.w	800138e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001286:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800128a:	f023 0301 	bic.w	r3, r3, #1
 800128e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d007      	beq.n	80012b4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012ac:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012c0:	d106      	bne.n	80012d0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c6:	f023 0206 	bic.w	r2, r3, #6
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	645a      	str	r2, [r3, #68]	; 0x44
 80012ce:	e002      	b.n	80012d6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	2200      	movs	r2, #0
 80012d4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	2200      	movs	r2, #0
 80012da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012de:	4b36      	ldr	r3, [pc, #216]	; (80013b8 <HAL_ADC_Start_DMA+0x1cc>)
 80012e0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012e6:	4a35      	ldr	r2, [pc, #212]	; (80013bc <HAL_ADC_Start_DMA+0x1d0>)
 80012e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012ee:	4a34      	ldr	r2, [pc, #208]	; (80013c0 <HAL_ADC_Start_DMA+0x1d4>)
 80012f0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012f6:	4a33      	ldr	r2, [pc, #204]	; (80013c4 <HAL_ADC_Start_DMA+0x1d8>)
 80012f8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001302:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	685a      	ldr	r2, [r3, #4]
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001312:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	689a      	ldr	r2, [r3, #8]
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001322:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	334c      	adds	r3, #76	; 0x4c
 800132e:	4619      	mov	r1, r3
 8001330:	68ba      	ldr	r2, [r7, #8]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f000 fcd8 	bl	8001ce8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f003 031f 	and.w	r3, r3, #31
 8001340:	2b00      	cmp	r3, #0
 8001342:	d10f      	bne.n	8001364 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d129      	bne.n	80013a6 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	689a      	ldr	r2, [r3, #8]
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	e020      	b.n	80013a6 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a17      	ldr	r2, [pc, #92]	; (80013c8 <HAL_ADC_Start_DMA+0x1dc>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d11b      	bne.n	80013a6 <HAL_ADC_Start_DMA+0x1ba>
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001378:	2b00      	cmp	r3, #0
 800137a:	d114      	bne.n	80013a6 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	689a      	ldr	r2, [r3, #8]
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	e00b      	b.n	80013a6 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	f043 0210 	orr.w	r2, r3, #16
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139e:	f043 0201 	orr.w	r2, r3, #1
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80013a6:	2300      	movs	r3, #0
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3718      	adds	r7, #24
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20000000 	.word	0x20000000
 80013b4:	431bde83 	.word	0x431bde83
 80013b8:	40012300 	.word	0x40012300
 80013bc:	08001865 	.word	0x08001865
 80013c0:	0800191f 	.word	0x0800191f
 80013c4:	0800193b 	.word	0x0800193b
 80013c8:	40012000 	.word	0x40012000

080013cc <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001412:	2300      	movs	r3, #0
 8001414:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800141c:	2b01      	cmp	r3, #1
 800141e:	d101      	bne.n	8001424 <HAL_ADC_ConfigChannel+0x1c>
 8001420:	2302      	movs	r3, #2
 8001422:	e113      	b.n	800164c <HAL_ADC_ConfigChannel+0x244>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2201      	movs	r2, #1
 8001428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2b09      	cmp	r3, #9
 8001432:	d925      	bls.n	8001480 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	68d9      	ldr	r1, [r3, #12]
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	b29b      	uxth	r3, r3
 8001440:	461a      	mov	r2, r3
 8001442:	4613      	mov	r3, r2
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	4413      	add	r3, r2
 8001448:	3b1e      	subs	r3, #30
 800144a:	2207      	movs	r2, #7
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	43da      	mvns	r2, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	400a      	ands	r2, r1
 8001458:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	68d9      	ldr	r1, [r3, #12]
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	689a      	ldr	r2, [r3, #8]
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	b29b      	uxth	r3, r3
 800146a:	4618      	mov	r0, r3
 800146c:	4603      	mov	r3, r0
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	4403      	add	r3, r0
 8001472:	3b1e      	subs	r3, #30
 8001474:	409a      	lsls	r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	430a      	orrs	r2, r1
 800147c:	60da      	str	r2, [r3, #12]
 800147e:	e022      	b.n	80014c6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	6919      	ldr	r1, [r3, #16]
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	b29b      	uxth	r3, r3
 800148c:	461a      	mov	r2, r3
 800148e:	4613      	mov	r3, r2
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	4413      	add	r3, r2
 8001494:	2207      	movs	r2, #7
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	43da      	mvns	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	400a      	ands	r2, r1
 80014a2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	6919      	ldr	r1, [r3, #16]
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	689a      	ldr	r2, [r3, #8]
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	4618      	mov	r0, r3
 80014b6:	4603      	mov	r3, r0
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	4403      	add	r3, r0
 80014bc:	409a      	lsls	r2, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	430a      	orrs	r2, r1
 80014c4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	2b06      	cmp	r3, #6
 80014cc:	d824      	bhi.n	8001518 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685a      	ldr	r2, [r3, #4]
 80014d8:	4613      	mov	r3, r2
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	4413      	add	r3, r2
 80014de:	3b05      	subs	r3, #5
 80014e0:	221f      	movs	r2, #31
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	43da      	mvns	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	400a      	ands	r2, r1
 80014ee:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	4618      	mov	r0, r3
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685a      	ldr	r2, [r3, #4]
 8001502:	4613      	mov	r3, r2
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	4413      	add	r3, r2
 8001508:	3b05      	subs	r3, #5
 800150a:	fa00 f203 	lsl.w	r2, r0, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	430a      	orrs	r2, r1
 8001514:	635a      	str	r2, [r3, #52]	; 0x34
 8001516:	e04c      	b.n	80015b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	2b0c      	cmp	r3, #12
 800151e:	d824      	bhi.n	800156a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685a      	ldr	r2, [r3, #4]
 800152a:	4613      	mov	r3, r2
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	4413      	add	r3, r2
 8001530:	3b23      	subs	r3, #35	; 0x23
 8001532:	221f      	movs	r2, #31
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	43da      	mvns	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	400a      	ands	r2, r1
 8001540:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	b29b      	uxth	r3, r3
 800154e:	4618      	mov	r0, r3
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685a      	ldr	r2, [r3, #4]
 8001554:	4613      	mov	r3, r2
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	4413      	add	r3, r2
 800155a:	3b23      	subs	r3, #35	; 0x23
 800155c:	fa00 f203 	lsl.w	r2, r0, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	430a      	orrs	r2, r1
 8001566:	631a      	str	r2, [r3, #48]	; 0x30
 8001568:	e023      	b.n	80015b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685a      	ldr	r2, [r3, #4]
 8001574:	4613      	mov	r3, r2
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	4413      	add	r3, r2
 800157a:	3b41      	subs	r3, #65	; 0x41
 800157c:	221f      	movs	r2, #31
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	43da      	mvns	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	400a      	ands	r2, r1
 800158a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	b29b      	uxth	r3, r3
 8001598:	4618      	mov	r0, r3
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685a      	ldr	r2, [r3, #4]
 800159e:	4613      	mov	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4413      	add	r3, r2
 80015a4:	3b41      	subs	r3, #65	; 0x41
 80015a6:	fa00 f203 	lsl.w	r2, r0, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	430a      	orrs	r2, r1
 80015b0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015b2:	4b29      	ldr	r3, [pc, #164]	; (8001658 <HAL_ADC_ConfigChannel+0x250>)
 80015b4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a28      	ldr	r2, [pc, #160]	; (800165c <HAL_ADC_ConfigChannel+0x254>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d10f      	bne.n	80015e0 <HAL_ADC_ConfigChannel+0x1d8>
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2b12      	cmp	r3, #18
 80015c6:	d10b      	bne.n	80015e0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a1d      	ldr	r2, [pc, #116]	; (800165c <HAL_ADC_ConfigChannel+0x254>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d12b      	bne.n	8001642 <HAL_ADC_ConfigChannel+0x23a>
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a1c      	ldr	r2, [pc, #112]	; (8001660 <HAL_ADC_ConfigChannel+0x258>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d003      	beq.n	80015fc <HAL_ADC_ConfigChannel+0x1f4>
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2b11      	cmp	r3, #17
 80015fa:	d122      	bne.n	8001642 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a11      	ldr	r2, [pc, #68]	; (8001660 <HAL_ADC_ConfigChannel+0x258>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d111      	bne.n	8001642 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800161e:	4b11      	ldr	r3, [pc, #68]	; (8001664 <HAL_ADC_ConfigChannel+0x25c>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a11      	ldr	r2, [pc, #68]	; (8001668 <HAL_ADC_ConfigChannel+0x260>)
 8001624:	fba2 2303 	umull	r2, r3, r2, r3
 8001628:	0c9a      	lsrs	r2, r3, #18
 800162a:	4613      	mov	r3, r2
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	4413      	add	r3, r2
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001634:	e002      	b.n	800163c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	3b01      	subs	r3, #1
 800163a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1f9      	bne.n	8001636 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800164a:	2300      	movs	r3, #0
}
 800164c:	4618      	mov	r0, r3
 800164e:	3714      	adds	r7, #20
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr
 8001658:	40012300 	.word	0x40012300
 800165c:	40012000 	.word	0x40012000
 8001660:	10000012 	.word	0x10000012
 8001664:	20000000 	.word	0x20000000
 8001668:	431bde83 	.word	0x431bde83

0800166c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800166c:	b480      	push	{r7}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001674:	4b79      	ldr	r3, [pc, #484]	; (800185c <ADC_Init+0x1f0>)
 8001676:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	685a      	ldr	r2, [r3, #4]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	431a      	orrs	r2, r3
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	6859      	ldr	r1, [r3, #4]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	691b      	ldr	r3, [r3, #16]
 80016ac:	021a      	lsls	r2, r3, #8
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	430a      	orrs	r2, r1
 80016b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	685a      	ldr	r2, [r3, #4]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80016c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	6859      	ldr	r1, [r3, #4]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689a      	ldr	r2, [r3, #8]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	430a      	orrs	r2, r1
 80016d6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	689a      	ldr	r2, [r3, #8]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	6899      	ldr	r1, [r3, #8]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	68da      	ldr	r2, [r3, #12]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	430a      	orrs	r2, r1
 80016f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016fe:	4a58      	ldr	r2, [pc, #352]	; (8001860 <ADC_Init+0x1f4>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d022      	beq.n	800174a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	689a      	ldr	r2, [r3, #8]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001712:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	6899      	ldr	r1, [r3, #8]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	430a      	orrs	r2, r1
 8001724:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	689a      	ldr	r2, [r3, #8]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001734:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	6899      	ldr	r1, [r3, #8]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	430a      	orrs	r2, r1
 8001746:	609a      	str	r2, [r3, #8]
 8001748:	e00f      	b.n	800176a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	689a      	ldr	r2, [r3, #8]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001758:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	689a      	ldr	r2, [r3, #8]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001768:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	689a      	ldr	r2, [r3, #8]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f022 0202 	bic.w	r2, r2, #2
 8001778:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	6899      	ldr	r1, [r3, #8]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	7e1b      	ldrb	r3, [r3, #24]
 8001784:	005a      	lsls	r2, r3, #1
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	430a      	orrs	r2, r1
 800178c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d01b      	beq.n	80017d0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	685a      	ldr	r2, [r3, #4]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80017a6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	685a      	ldr	r2, [r3, #4]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80017b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	6859      	ldr	r1, [r3, #4]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c2:	3b01      	subs	r3, #1
 80017c4:	035a      	lsls	r2, r3, #13
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	430a      	orrs	r2, r1
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	e007      	b.n	80017e0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	685a      	ldr	r2, [r3, #4]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017de:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80017ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	69db      	ldr	r3, [r3, #28]
 80017fa:	3b01      	subs	r3, #1
 80017fc:	051a      	lsls	r2, r3, #20
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	430a      	orrs	r2, r1
 8001804:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	689a      	ldr	r2, [r3, #8]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001814:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	6899      	ldr	r1, [r3, #8]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001822:	025a      	lsls	r2, r3, #9
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	430a      	orrs	r2, r1
 800182a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	689a      	ldr	r2, [r3, #8]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800183a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	6899      	ldr	r1, [r3, #8]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	695b      	ldr	r3, [r3, #20]
 8001846:	029a      	lsls	r2, r3, #10
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	430a      	orrs	r2, r1
 800184e:	609a      	str	r2, [r3, #8]
}
 8001850:	bf00      	nop
 8001852:	3714      	adds	r7, #20
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	40012300 	.word	0x40012300
 8001860:	0f000001 	.word	0x0f000001

08001864 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001870:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001876:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800187a:	2b00      	cmp	r3, #0
 800187c:	d13c      	bne.n	80018f8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001882:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d12b      	bne.n	80018f0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800189c:	2b00      	cmp	r3, #0
 800189e:	d127      	bne.n	80018f0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d006      	beq.n	80018bc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d119      	bne.n	80018f0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	685a      	ldr	r2, [r3, #4]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f022 0220 	bic.w	r2, r2, #32
 80018ca:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d105      	bne.n	80018f0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e8:	f043 0201 	orr.w	r2, r3, #1
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80018f0:	68f8      	ldr	r0, [r7, #12]
 80018f2:	f7ff fd6b 	bl	80013cc <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80018f6:	e00e      	b.n	8001916 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fc:	f003 0310 	and.w	r3, r3, #16
 8001900:	2b00      	cmp	r3, #0
 8001902:	d003      	beq.n	800190c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001904:	68f8      	ldr	r0, [r7, #12]
 8001906:	f7ff fd75 	bl	80013f4 <HAL_ADC_ErrorCallback>
}
 800190a:	e004      	b.n	8001916 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	4798      	blx	r3
}
 8001916:	bf00      	nop
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b084      	sub	sp, #16
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800192a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800192c:	68f8      	ldr	r0, [r7, #12]
 800192e:	f7ff fd57 	bl	80013e0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001932:	bf00      	nop
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800193a:	b580      	push	{r7, lr}
 800193c:	b084      	sub	sp, #16
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001946:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2240      	movs	r2, #64	; 0x40
 800194c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001952:	f043 0204 	orr.w	r2, r3, #4
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800195a:	68f8      	ldr	r0, [r7, #12]
 800195c:	f7ff fd4a 	bl	80013f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001960:	bf00      	nop
 8001962:	3710      	adds	r7, #16
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}

08001968 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001978:	4b0c      	ldr	r3, [pc, #48]	; (80019ac <__NVIC_SetPriorityGrouping+0x44>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800197e:	68ba      	ldr	r2, [r7, #8]
 8001980:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001984:	4013      	ands	r3, r2
 8001986:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001990:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001998:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800199a:	4a04      	ldr	r2, [pc, #16]	; (80019ac <__NVIC_SetPriorityGrouping+0x44>)
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	60d3      	str	r3, [r2, #12]
}
 80019a0:	bf00      	nop
 80019a2:	3714      	adds	r7, #20
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019b4:	4b04      	ldr	r3, [pc, #16]	; (80019c8 <__NVIC_GetPriorityGrouping+0x18>)
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	0a1b      	lsrs	r3, r3, #8
 80019ba:	f003 0307 	and.w	r3, r3, #7
}
 80019be:	4618      	mov	r0, r3
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	e000ed00 	.word	0xe000ed00

080019cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	db0b      	blt.n	80019f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019de:	79fb      	ldrb	r3, [r7, #7]
 80019e0:	f003 021f 	and.w	r2, r3, #31
 80019e4:	4907      	ldr	r1, [pc, #28]	; (8001a04 <__NVIC_EnableIRQ+0x38>)
 80019e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ea:	095b      	lsrs	r3, r3, #5
 80019ec:	2001      	movs	r0, #1
 80019ee:	fa00 f202 	lsl.w	r2, r0, r2
 80019f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019f6:	bf00      	nop
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	e000e100 	.word	0xe000e100

08001a08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	6039      	str	r1, [r7, #0]
 8001a12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	db0a      	blt.n	8001a32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	b2da      	uxtb	r2, r3
 8001a20:	490c      	ldr	r1, [pc, #48]	; (8001a54 <__NVIC_SetPriority+0x4c>)
 8001a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a26:	0112      	lsls	r2, r2, #4
 8001a28:	b2d2      	uxtb	r2, r2
 8001a2a:	440b      	add	r3, r1
 8001a2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a30:	e00a      	b.n	8001a48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	b2da      	uxtb	r2, r3
 8001a36:	4908      	ldr	r1, [pc, #32]	; (8001a58 <__NVIC_SetPriority+0x50>)
 8001a38:	79fb      	ldrb	r3, [r7, #7]
 8001a3a:	f003 030f 	and.w	r3, r3, #15
 8001a3e:	3b04      	subs	r3, #4
 8001a40:	0112      	lsls	r2, r2, #4
 8001a42:	b2d2      	uxtb	r2, r2
 8001a44:	440b      	add	r3, r1
 8001a46:	761a      	strb	r2, [r3, #24]
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	e000e100 	.word	0xe000e100
 8001a58:	e000ed00 	.word	0xe000ed00

08001a5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b089      	sub	sp, #36	; 0x24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	f1c3 0307 	rsb	r3, r3, #7
 8001a76:	2b04      	cmp	r3, #4
 8001a78:	bf28      	it	cs
 8001a7a:	2304      	movcs	r3, #4
 8001a7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	3304      	adds	r3, #4
 8001a82:	2b06      	cmp	r3, #6
 8001a84:	d902      	bls.n	8001a8c <NVIC_EncodePriority+0x30>
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	3b03      	subs	r3, #3
 8001a8a:	e000      	b.n	8001a8e <NVIC_EncodePriority+0x32>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a90:	f04f 32ff 	mov.w	r2, #4294967295
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43da      	mvns	r2, r3
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	401a      	ands	r2, r3
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aa4:	f04f 31ff 	mov.w	r1, #4294967295
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8001aae:	43d9      	mvns	r1, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab4:	4313      	orrs	r3, r2
         );
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3724      	adds	r7, #36	; 0x24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
	...

08001ac4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ad4:	d301      	bcc.n	8001ada <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e00f      	b.n	8001afa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ada:	4a0a      	ldr	r2, [pc, #40]	; (8001b04 <SysTick_Config+0x40>)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ae2:	210f      	movs	r1, #15
 8001ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae8:	f7ff ff8e 	bl	8001a08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aec:	4b05      	ldr	r3, [pc, #20]	; (8001b04 <SysTick_Config+0x40>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001af2:	4b04      	ldr	r3, [pc, #16]	; (8001b04 <SysTick_Config+0x40>)
 8001af4:	2207      	movs	r2, #7
 8001af6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	e000e010 	.word	0xe000e010

08001b08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f7ff ff29 	bl	8001968 <__NVIC_SetPriorityGrouping>
}
 8001b16:	bf00      	nop
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b086      	sub	sp, #24
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	4603      	mov	r3, r0
 8001b26:	60b9      	str	r1, [r7, #8]
 8001b28:	607a      	str	r2, [r7, #4]
 8001b2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b30:	f7ff ff3e 	bl	80019b0 <__NVIC_GetPriorityGrouping>
 8001b34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	68b9      	ldr	r1, [r7, #8]
 8001b3a:	6978      	ldr	r0, [r7, #20]
 8001b3c:	f7ff ff8e 	bl	8001a5c <NVIC_EncodePriority>
 8001b40:	4602      	mov	r2, r0
 8001b42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b46:	4611      	mov	r1, r2
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff ff5d 	bl	8001a08 <__NVIC_SetPriority>
}
 8001b4e:	bf00      	nop
 8001b50:	3718      	adds	r7, #24
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b082      	sub	sp, #8
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff ff31 	bl	80019cc <__NVIC_EnableIRQ>
}
 8001b6a:	bf00      	nop
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b082      	sub	sp, #8
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f7ff ffa2 	bl	8001ac4 <SysTick_Config>
 8001b80:	4603      	mov	r3, r0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
	...

08001b8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b94:	2300      	movs	r3, #0
 8001b96:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001b98:	f7ff fab4 	bl	8001104 <HAL_GetTick>
 8001b9c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d101      	bne.n	8001ba8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e099      	b.n	8001cdc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2202      	movs	r2, #2
 8001bb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f022 0201 	bic.w	r2, r2, #1
 8001bc6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bc8:	e00f      	b.n	8001bea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bca:	f7ff fa9b 	bl	8001104 <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	2b05      	cmp	r3, #5
 8001bd6:	d908      	bls.n	8001bea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2220      	movs	r2, #32
 8001bdc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2203      	movs	r2, #3
 8001be2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e078      	b.n	8001cdc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0301 	and.w	r3, r3, #1
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d1e8      	bne.n	8001bca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c00:	697a      	ldr	r2, [r7, #20]
 8001c02:	4b38      	ldr	r3, [pc, #224]	; (8001ce4 <HAL_DMA_Init+0x158>)
 8001c04:	4013      	ands	r3, r2
 8001c06:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685a      	ldr	r2, [r3, #4]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c16:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	691b      	ldr	r3, [r3, #16]
 8001c1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a1b      	ldr	r3, [r3, #32]
 8001c34:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c36:	697a      	ldr	r2, [r7, #20]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c40:	2b04      	cmp	r3, #4
 8001c42:	d107      	bne.n	8001c54 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	697a      	ldr	r2, [r7, #20]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	697a      	ldr	r2, [r7, #20]
 8001c5a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	695b      	ldr	r3, [r3, #20]
 8001c62:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	f023 0307 	bic.w	r3, r3, #7
 8001c6a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c70:	697a      	ldr	r2, [r7, #20]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7a:	2b04      	cmp	r3, #4
 8001c7c:	d117      	bne.n	8001cae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c82:	697a      	ldr	r2, [r7, #20]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d00e      	beq.n	8001cae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f000 fa6f 	bl	8002174 <DMA_CheckFifoParam>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d008      	beq.n	8001cae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2240      	movs	r2, #64	; 0x40
 8001ca0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001caa:	2301      	movs	r3, #1
 8001cac:	e016      	b.n	8001cdc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	697a      	ldr	r2, [r7, #20]
 8001cb4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 fa26 	bl	8002108 <DMA_CalcBaseAndBitshift>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc4:	223f      	movs	r2, #63	; 0x3f
 8001cc6:	409a      	lsls	r2, r3
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3718      	adds	r7, #24
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	f010803f 	.word	0xf010803f

08001ce8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
 8001cf4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cfe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d101      	bne.n	8001d0e <HAL_DMA_Start_IT+0x26>
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	e040      	b.n	8001d90 <HAL_DMA_Start_IT+0xa8>
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2201      	movs	r2, #1
 8001d12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d12f      	bne.n	8001d82 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2202      	movs	r2, #2
 8001d26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	68b9      	ldr	r1, [r7, #8]
 8001d36:	68f8      	ldr	r0, [r7, #12]
 8001d38:	f000 f9b8 	bl	80020ac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d40:	223f      	movs	r2, #63	; 0x3f
 8001d42:	409a      	lsls	r2, r3
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f042 0216 	orr.w	r2, r2, #22
 8001d56:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d007      	beq.n	8001d70 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f042 0208 	orr.w	r2, r2, #8
 8001d6e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f042 0201 	orr.w	r2, r2, #1
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	e005      	b.n	8001d8e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001d8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3718      	adds	r7, #24
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001da0:	2300      	movs	r3, #0
 8001da2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001da4:	4b92      	ldr	r3, [pc, #584]	; (8001ff0 <HAL_DMA_IRQHandler+0x258>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a92      	ldr	r2, [pc, #584]	; (8001ff4 <HAL_DMA_IRQHandler+0x25c>)
 8001daa:	fba2 2303 	umull	r2, r3, r2, r3
 8001dae:	0a9b      	lsrs	r3, r3, #10
 8001db0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc2:	2208      	movs	r2, #8
 8001dc4:	409a      	lsls	r2, r3
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d01a      	beq.n	8001e04 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0304 	and.w	r3, r3, #4
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d013      	beq.n	8001e04 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f022 0204 	bic.w	r2, r2, #4
 8001dea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df0:	2208      	movs	r2, #8
 8001df2:	409a      	lsls	r2, r3
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dfc:	f043 0201 	orr.w	r2, r3, #1
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e08:	2201      	movs	r2, #1
 8001e0a:	409a      	lsls	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d012      	beq.n	8001e3a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	695b      	ldr	r3, [r3, #20]
 8001e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d00b      	beq.n	8001e3a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e26:	2201      	movs	r2, #1
 8001e28:	409a      	lsls	r2, r3
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e32:	f043 0202 	orr.w	r2, r3, #2
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e3e:	2204      	movs	r2, #4
 8001e40:	409a      	lsls	r2, r3
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	4013      	ands	r3, r2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d012      	beq.n	8001e70 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0302 	and.w	r3, r3, #2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d00b      	beq.n	8001e70 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e5c:	2204      	movs	r2, #4
 8001e5e:	409a      	lsls	r2, r3
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e68:	f043 0204 	orr.w	r2, r3, #4
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e74:	2210      	movs	r2, #16
 8001e76:	409a      	lsls	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d043      	beq.n	8001f08 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0308 	and.w	r3, r3, #8
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d03c      	beq.n	8001f08 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e92:	2210      	movs	r2, #16
 8001e94:	409a      	lsls	r2, r3
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d018      	beq.n	8001eda <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d108      	bne.n	8001ec8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d024      	beq.n	8001f08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	4798      	blx	r3
 8001ec6:	e01f      	b.n	8001f08 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d01b      	beq.n	8001f08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	4798      	blx	r3
 8001ed8:	e016      	b.n	8001f08 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d107      	bne.n	8001ef8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f022 0208 	bic.w	r2, r2, #8
 8001ef6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d003      	beq.n	8001f08 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f0c:	2220      	movs	r2, #32
 8001f0e:	409a      	lsls	r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	4013      	ands	r3, r2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	f000 808e 	beq.w	8002036 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0310 	and.w	r3, r3, #16
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	f000 8086 	beq.w	8002036 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f2e:	2220      	movs	r2, #32
 8001f30:	409a      	lsls	r2, r3
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	2b05      	cmp	r3, #5
 8001f40:	d136      	bne.n	8001fb0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f022 0216 	bic.w	r2, r2, #22
 8001f50:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	695a      	ldr	r2, [r3, #20]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f60:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d103      	bne.n	8001f72 <HAL_DMA_IRQHandler+0x1da>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d007      	beq.n	8001f82 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f022 0208 	bic.w	r2, r2, #8
 8001f80:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f86:	223f      	movs	r2, #63	; 0x3f
 8001f88:	409a      	lsls	r2, r3
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d07d      	beq.n	80020a2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	4798      	blx	r3
        }
        return;
 8001fae:	e078      	b.n	80020a2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d01c      	beq.n	8001ff8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d108      	bne.n	8001fde <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d030      	beq.n	8002036 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	4798      	blx	r3
 8001fdc:	e02b      	b.n	8002036 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d027      	beq.n	8002036 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	4798      	blx	r3
 8001fee:	e022      	b.n	8002036 <HAL_DMA_IRQHandler+0x29e>
 8001ff0:	20000000 	.word	0x20000000
 8001ff4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002002:	2b00      	cmp	r3, #0
 8002004:	d10f      	bne.n	8002026 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f022 0210 	bic.w	r2, r2, #16
 8002014:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2201      	movs	r2, #1
 8002022:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800202a:	2b00      	cmp	r3, #0
 800202c:	d003      	beq.n	8002036 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800203a:	2b00      	cmp	r3, #0
 800203c:	d032      	beq.n	80020a4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	2b00      	cmp	r3, #0
 8002048:	d022      	beq.n	8002090 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2205      	movs	r2, #5
 800204e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f022 0201 	bic.w	r2, r2, #1
 8002060:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	3301      	adds	r3, #1
 8002066:	60bb      	str	r3, [r7, #8]
 8002068:	697a      	ldr	r2, [r7, #20]
 800206a:	429a      	cmp	r2, r3
 800206c:	d307      	bcc.n	800207e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0301 	and.w	r3, r3, #1
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1f2      	bne.n	8002062 <HAL_DMA_IRQHandler+0x2ca>
 800207c:	e000      	b.n	8002080 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800207e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002094:	2b00      	cmp	r3, #0
 8002096:	d005      	beq.n	80020a4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	4798      	blx	r3
 80020a0:	e000      	b.n	80020a4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80020a2:	bf00      	nop
    }
  }
}
 80020a4:	3718      	adds	r7, #24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop

080020ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
 80020b8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80020c8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	2b40      	cmp	r3, #64	; 0x40
 80020d8:	d108      	bne.n	80020ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68ba      	ldr	r2, [r7, #8]
 80020e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80020ea:	e007      	b.n	80020fc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	68ba      	ldr	r2, [r7, #8]
 80020f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	60da      	str	r2, [r3, #12]
}
 80020fc:	bf00      	nop
 80020fe:	3714      	adds	r7, #20
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002108:	b480      	push	{r7}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	b2db      	uxtb	r3, r3
 8002116:	3b10      	subs	r3, #16
 8002118:	4a14      	ldr	r2, [pc, #80]	; (800216c <DMA_CalcBaseAndBitshift+0x64>)
 800211a:	fba2 2303 	umull	r2, r3, r2, r3
 800211e:	091b      	lsrs	r3, r3, #4
 8002120:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002122:	4a13      	ldr	r2, [pc, #76]	; (8002170 <DMA_CalcBaseAndBitshift+0x68>)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	4413      	add	r3, r2
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	461a      	mov	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2b03      	cmp	r3, #3
 8002134:	d909      	bls.n	800214a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800213e:	f023 0303 	bic.w	r3, r3, #3
 8002142:	1d1a      	adds	r2, r3, #4
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	659a      	str	r2, [r3, #88]	; 0x58
 8002148:	e007      	b.n	800215a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002152:	f023 0303 	bic.w	r3, r3, #3
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800215e:	4618      	mov	r0, r3
 8002160:	3714      	adds	r7, #20
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	aaaaaaab 	.word	0xaaaaaaab
 8002170:	08003d7c 	.word	0x08003d7c

08002174 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800217c:	2300      	movs	r3, #0
 800217e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002184:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d11f      	bne.n	80021ce <DMA_CheckFifoParam+0x5a>
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	2b03      	cmp	r3, #3
 8002192:	d856      	bhi.n	8002242 <DMA_CheckFifoParam+0xce>
 8002194:	a201      	add	r2, pc, #4	; (adr r2, 800219c <DMA_CheckFifoParam+0x28>)
 8002196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800219a:	bf00      	nop
 800219c:	080021ad 	.word	0x080021ad
 80021a0:	080021bf 	.word	0x080021bf
 80021a4:	080021ad 	.word	0x080021ad
 80021a8:	08002243 	.word	0x08002243
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d046      	beq.n	8002246 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021bc:	e043      	b.n	8002246 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021c6:	d140      	bne.n	800224a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021cc:	e03d      	b.n	800224a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	699b      	ldr	r3, [r3, #24]
 80021d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021d6:	d121      	bne.n	800221c <DMA_CheckFifoParam+0xa8>
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	2b03      	cmp	r3, #3
 80021dc:	d837      	bhi.n	800224e <DMA_CheckFifoParam+0xda>
 80021de:	a201      	add	r2, pc, #4	; (adr r2, 80021e4 <DMA_CheckFifoParam+0x70>)
 80021e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021e4:	080021f5 	.word	0x080021f5
 80021e8:	080021fb 	.word	0x080021fb
 80021ec:	080021f5 	.word	0x080021f5
 80021f0:	0800220d 	.word	0x0800220d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	73fb      	strb	r3, [r7, #15]
      break;
 80021f8:	e030      	b.n	800225c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d025      	beq.n	8002252 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800220a:	e022      	b.n	8002252 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002210:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002214:	d11f      	bne.n	8002256 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800221a:	e01c      	b.n	8002256 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	2b02      	cmp	r3, #2
 8002220:	d903      	bls.n	800222a <DMA_CheckFifoParam+0xb6>
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	2b03      	cmp	r3, #3
 8002226:	d003      	beq.n	8002230 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002228:	e018      	b.n	800225c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	73fb      	strb	r3, [r7, #15]
      break;
 800222e:	e015      	b.n	800225c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002234:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d00e      	beq.n	800225a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	73fb      	strb	r3, [r7, #15]
      break;
 8002240:	e00b      	b.n	800225a <DMA_CheckFifoParam+0xe6>
      break;
 8002242:	bf00      	nop
 8002244:	e00a      	b.n	800225c <DMA_CheckFifoParam+0xe8>
      break;
 8002246:	bf00      	nop
 8002248:	e008      	b.n	800225c <DMA_CheckFifoParam+0xe8>
      break;
 800224a:	bf00      	nop
 800224c:	e006      	b.n	800225c <DMA_CheckFifoParam+0xe8>
      break;
 800224e:	bf00      	nop
 8002250:	e004      	b.n	800225c <DMA_CheckFifoParam+0xe8>
      break;
 8002252:	bf00      	nop
 8002254:	e002      	b.n	800225c <DMA_CheckFifoParam+0xe8>
      break;   
 8002256:	bf00      	nop
 8002258:	e000      	b.n	800225c <DMA_CheckFifoParam+0xe8>
      break;
 800225a:	bf00      	nop
    }
  } 
  
  return status; 
 800225c:	7bfb      	ldrb	r3, [r7, #15]
}
 800225e:	4618      	mov	r0, r3
 8002260:	3714      	adds	r7, #20
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop

0800226c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800226c:	b480      	push	{r7}
 800226e:	b089      	sub	sp, #36	; 0x24
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002276:	2300      	movs	r3, #0
 8002278:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800227a:	2300      	movs	r3, #0
 800227c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800227e:	2300      	movs	r3, #0
 8002280:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002282:	2300      	movs	r3, #0
 8002284:	61fb      	str	r3, [r7, #28]
 8002286:	e159      	b.n	800253c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002288:	2201      	movs	r2, #1
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	697a      	ldr	r2, [r7, #20]
 8002298:	4013      	ands	r3, r2
 800229a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	f040 8148 	bne.w	8002536 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f003 0303 	and.w	r3, r3, #3
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d005      	beq.n	80022be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d130      	bne.n	8002320 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	2203      	movs	r2, #3
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	43db      	mvns	r3, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4013      	ands	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	68da      	ldr	r2, [r3, #12]
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022f4:	2201      	movs	r2, #1
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	43db      	mvns	r3, r3
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	4013      	ands	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	091b      	lsrs	r3, r3, #4
 800230a:	f003 0201 	and.w	r2, r3, #1
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	4313      	orrs	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f003 0303 	and.w	r3, r3, #3
 8002328:	2b03      	cmp	r3, #3
 800232a:	d017      	beq.n	800235c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	2203      	movs	r2, #3
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	43db      	mvns	r3, r3
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	4013      	ands	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	689a      	ldr	r2, [r3, #8]
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	4313      	orrs	r3, r2
 8002354:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f003 0303 	and.w	r3, r3, #3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d123      	bne.n	80023b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	08da      	lsrs	r2, r3, #3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3208      	adds	r2, #8
 8002370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002374:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	f003 0307 	and.w	r3, r3, #7
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	220f      	movs	r2, #15
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	43db      	mvns	r3, r3
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	4013      	ands	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	691a      	ldr	r2, [r3, #16]
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	4313      	orrs	r3, r2
 80023a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	08da      	lsrs	r2, r3, #3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	3208      	adds	r2, #8
 80023aa:	69b9      	ldr	r1, [r7, #24]
 80023ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	2203      	movs	r2, #3
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	43db      	mvns	r3, r3
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	4013      	ands	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f003 0203 	and.w	r2, r3, #3
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	4313      	orrs	r3, r2
 80023dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	f000 80a2 	beq.w	8002536 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023f2:	2300      	movs	r3, #0
 80023f4:	60fb      	str	r3, [r7, #12]
 80023f6:	4b57      	ldr	r3, [pc, #348]	; (8002554 <HAL_GPIO_Init+0x2e8>)
 80023f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fa:	4a56      	ldr	r2, [pc, #344]	; (8002554 <HAL_GPIO_Init+0x2e8>)
 80023fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002400:	6453      	str	r3, [r2, #68]	; 0x44
 8002402:	4b54      	ldr	r3, [pc, #336]	; (8002554 <HAL_GPIO_Init+0x2e8>)
 8002404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002406:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800240a:	60fb      	str	r3, [r7, #12]
 800240c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800240e:	4a52      	ldr	r2, [pc, #328]	; (8002558 <HAL_GPIO_Init+0x2ec>)
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	089b      	lsrs	r3, r3, #2
 8002414:	3302      	adds	r3, #2
 8002416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800241a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	f003 0303 	and.w	r3, r3, #3
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	220f      	movs	r2, #15
 8002426:	fa02 f303 	lsl.w	r3, r2, r3
 800242a:	43db      	mvns	r3, r3
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	4013      	ands	r3, r2
 8002430:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a49      	ldr	r2, [pc, #292]	; (800255c <HAL_GPIO_Init+0x2f0>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d019      	beq.n	800246e <HAL_GPIO_Init+0x202>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a48      	ldr	r2, [pc, #288]	; (8002560 <HAL_GPIO_Init+0x2f4>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d013      	beq.n	800246a <HAL_GPIO_Init+0x1fe>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a47      	ldr	r2, [pc, #284]	; (8002564 <HAL_GPIO_Init+0x2f8>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d00d      	beq.n	8002466 <HAL_GPIO_Init+0x1fa>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a46      	ldr	r2, [pc, #280]	; (8002568 <HAL_GPIO_Init+0x2fc>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d007      	beq.n	8002462 <HAL_GPIO_Init+0x1f6>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a45      	ldr	r2, [pc, #276]	; (800256c <HAL_GPIO_Init+0x300>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d101      	bne.n	800245e <HAL_GPIO_Init+0x1f2>
 800245a:	2304      	movs	r3, #4
 800245c:	e008      	b.n	8002470 <HAL_GPIO_Init+0x204>
 800245e:	2307      	movs	r3, #7
 8002460:	e006      	b.n	8002470 <HAL_GPIO_Init+0x204>
 8002462:	2303      	movs	r3, #3
 8002464:	e004      	b.n	8002470 <HAL_GPIO_Init+0x204>
 8002466:	2302      	movs	r3, #2
 8002468:	e002      	b.n	8002470 <HAL_GPIO_Init+0x204>
 800246a:	2301      	movs	r3, #1
 800246c:	e000      	b.n	8002470 <HAL_GPIO_Init+0x204>
 800246e:	2300      	movs	r3, #0
 8002470:	69fa      	ldr	r2, [r7, #28]
 8002472:	f002 0203 	and.w	r2, r2, #3
 8002476:	0092      	lsls	r2, r2, #2
 8002478:	4093      	lsls	r3, r2
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	4313      	orrs	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002480:	4935      	ldr	r1, [pc, #212]	; (8002558 <HAL_GPIO_Init+0x2ec>)
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	089b      	lsrs	r3, r3, #2
 8002486:	3302      	adds	r3, #2
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800248e:	4b38      	ldr	r3, [pc, #224]	; (8002570 <HAL_GPIO_Init+0x304>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	43db      	mvns	r3, r3
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	4013      	ands	r3, r2
 800249c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d003      	beq.n	80024b2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024b2:	4a2f      	ldr	r2, [pc, #188]	; (8002570 <HAL_GPIO_Init+0x304>)
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80024b8:	4b2d      	ldr	r3, [pc, #180]	; (8002570 <HAL_GPIO_Init+0x304>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	43db      	mvns	r3, r3
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	4013      	ands	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d003      	beq.n	80024dc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	4313      	orrs	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024dc:	4a24      	ldr	r2, [pc, #144]	; (8002570 <HAL_GPIO_Init+0x304>)
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024e2:	4b23      	ldr	r3, [pc, #140]	; (8002570 <HAL_GPIO_Init+0x304>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	43db      	mvns	r3, r3
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	4013      	ands	r3, r2
 80024f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d003      	beq.n	8002506 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	4313      	orrs	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002506:	4a1a      	ldr	r2, [pc, #104]	; (8002570 <HAL_GPIO_Init+0x304>)
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800250c:	4b18      	ldr	r3, [pc, #96]	; (8002570 <HAL_GPIO_Init+0x304>)
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	43db      	mvns	r3, r3
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	4013      	ands	r3, r2
 800251a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d003      	beq.n	8002530 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	4313      	orrs	r3, r2
 800252e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002530:	4a0f      	ldr	r2, [pc, #60]	; (8002570 <HAL_GPIO_Init+0x304>)
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	3301      	adds	r3, #1
 800253a:	61fb      	str	r3, [r7, #28]
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	2b0f      	cmp	r3, #15
 8002540:	f67f aea2 	bls.w	8002288 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002544:	bf00      	nop
 8002546:	bf00      	nop
 8002548:	3724      	adds	r7, #36	; 0x24
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	40023800 	.word	0x40023800
 8002558:	40013800 	.word	0x40013800
 800255c:	40020000 	.word	0x40020000
 8002560:	40020400 	.word	0x40020400
 8002564:	40020800 	.word	0x40020800
 8002568:	40020c00 	.word	0x40020c00
 800256c:	40021000 	.word	0x40021000
 8002570:	40013c00 	.word	0x40013c00

08002574 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	460b      	mov	r3, r1
 800257e:	807b      	strh	r3, [r7, #2]
 8002580:	4613      	mov	r3, r2
 8002582:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002584:	787b      	ldrb	r3, [r7, #1]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d003      	beq.n	8002592 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800258a:	887a      	ldrh	r2, [r7, #2]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002590:	e003      	b.n	800259a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002592:	887b      	ldrh	r3, [r7, #2]
 8002594:	041a      	lsls	r2, r3, #16
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	619a      	str	r2, [r3, #24]
}
 800259a:	bf00      	nop
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
	...

080025a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d101      	bne.n	80025ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e264      	b.n	8002a84 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d075      	beq.n	80026b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025c6:	4ba3      	ldr	r3, [pc, #652]	; (8002854 <HAL_RCC_OscConfig+0x2ac>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f003 030c 	and.w	r3, r3, #12
 80025ce:	2b04      	cmp	r3, #4
 80025d0:	d00c      	beq.n	80025ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025d2:	4ba0      	ldr	r3, [pc, #640]	; (8002854 <HAL_RCC_OscConfig+0x2ac>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025da:	2b08      	cmp	r3, #8
 80025dc:	d112      	bne.n	8002604 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025de:	4b9d      	ldr	r3, [pc, #628]	; (8002854 <HAL_RCC_OscConfig+0x2ac>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025ea:	d10b      	bne.n	8002604 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ec:	4b99      	ldr	r3, [pc, #612]	; (8002854 <HAL_RCC_OscConfig+0x2ac>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d05b      	beq.n	80026b0 <HAL_RCC_OscConfig+0x108>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d157      	bne.n	80026b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e23f      	b.n	8002a84 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800260c:	d106      	bne.n	800261c <HAL_RCC_OscConfig+0x74>
 800260e:	4b91      	ldr	r3, [pc, #580]	; (8002854 <HAL_RCC_OscConfig+0x2ac>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a90      	ldr	r2, [pc, #576]	; (8002854 <HAL_RCC_OscConfig+0x2ac>)
 8002614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002618:	6013      	str	r3, [r2, #0]
 800261a:	e01d      	b.n	8002658 <HAL_RCC_OscConfig+0xb0>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002624:	d10c      	bne.n	8002640 <HAL_RCC_OscConfig+0x98>
 8002626:	4b8b      	ldr	r3, [pc, #556]	; (8002854 <HAL_RCC_OscConfig+0x2ac>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a8a      	ldr	r2, [pc, #552]	; (8002854 <HAL_RCC_OscConfig+0x2ac>)
 800262c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002630:	6013      	str	r3, [r2, #0]
 8002632:	4b88      	ldr	r3, [pc, #544]	; (8002854 <HAL_RCC_OscConfig+0x2ac>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a87      	ldr	r2, [pc, #540]	; (8002854 <HAL_RCC_OscConfig+0x2ac>)
 8002638:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800263c:	6013      	str	r3, [r2, #0]
 800263e:	e00b      	b.n	8002658 <HAL_RCC_OscConfig+0xb0>
 8002640:	4b84      	ldr	r3, [pc, #528]	; (8002854 <HAL_RCC_OscConfig+0x2ac>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a83      	ldr	r2, [pc, #524]	; (8002854 <HAL_RCC_OscConfig+0x2ac>)
 8002646:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800264a:	6013      	str	r3, [r2, #0]
 800264c:	4b81      	ldr	r3, [pc, #516]	; (8002854 <HAL_RCC_OscConfig+0x2ac>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a80      	ldr	r2, [pc, #512]	; (8002854 <HAL_RCC_OscConfig+0x2ac>)
 8002652:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002656:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d013      	beq.n	8002688 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002660:	f7fe fd50 	bl	8001104 <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002666:	e008      	b.n	800267a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002668:	f7fe fd4c 	bl	8001104 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b64      	cmp	r3, #100	; 0x64
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e204      	b.n	8002a84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800267a:	4b76      	ldr	r3, [pc, #472]	; (8002854 <HAL_RCC_OscConfig+0x2ac>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d0f0      	beq.n	8002668 <HAL_RCC_OscConfig+0xc0>
 8002686:	e014      	b.n	80026b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002688:	f7fe fd3c 	bl	8001104 <HAL_GetTick>
 800268c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800268e:	e008      	b.n	80026a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002690:	f7fe fd38 	bl	8001104 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b64      	cmp	r3, #100	; 0x64
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e1f0      	b.n	8002a84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026a2:	4b6c      	ldr	r3, [pc, #432]	; (8002854 <HAL_RCC_OscConfig+0x2ac>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1f0      	bne.n	8002690 <HAL_RCC_OscConfig+0xe8>
 80026ae:	e000      	b.n	80026b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d063      	beq.n	8002786 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026be:	4b65      	ldr	r3, [pc, #404]	; (8002854 <HAL_RCC_OscConfig+0x2ac>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f003 030c 	and.w	r3, r3, #12
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00b      	beq.n	80026e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026ca:	4b62      	ldr	r3, [pc, #392]	; (8002854 <HAL_RCC_OscConfig+0x2ac>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026d2:	2b08      	cmp	r3, #8
 80026d4:	d11c      	bne.n	8002710 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026d6:	4b5f      	ldr	r3, [pc, #380]	; (8002854 <HAL_RCC_OscConfig+0x2ac>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d116      	bne.n	8002710 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026e2:	4b5c      	ldr	r3, [pc, #368]	; (8002854 <HAL_RCC_OscConfig+0x2ac>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d005      	beq.n	80026fa <HAL_RCC_OscConfig+0x152>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d001      	beq.n	80026fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e1c4      	b.n	8002a84 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026fa:	4b56      	ldr	r3, [pc, #344]	; (8002854 <HAL_RCC_OscConfig+0x2ac>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	4952      	ldr	r1, [pc, #328]	; (8002854 <HAL_RCC_OscConfig+0x2ac>)
 800270a:	4313      	orrs	r3, r2
 800270c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800270e:	e03a      	b.n	8002786 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d020      	beq.n	800275a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002718:	4b4f      	ldr	r3, [pc, #316]	; (8002858 <HAL_RCC_OscConfig+0x2b0>)
 800271a:	2201      	movs	r2, #1
 800271c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800271e:	f7fe fcf1 	bl	8001104 <HAL_GetTick>
 8002722:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002724:	e008      	b.n	8002738 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002726:	f7fe fced 	bl	8001104 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b02      	cmp	r3, #2
 8002732:	d901      	bls.n	8002738 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e1a5      	b.n	8002a84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002738:	4b46      	ldr	r3, [pc, #280]	; (8002854 <HAL_RCC_OscConfig+0x2ac>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0302 	and.w	r3, r3, #2
 8002740:	2b00      	cmp	r3, #0
 8002742:	d0f0      	beq.n	8002726 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002744:	4b43      	ldr	r3, [pc, #268]	; (8002854 <HAL_RCC_OscConfig+0x2ac>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	691b      	ldr	r3, [r3, #16]
 8002750:	00db      	lsls	r3, r3, #3
 8002752:	4940      	ldr	r1, [pc, #256]	; (8002854 <HAL_RCC_OscConfig+0x2ac>)
 8002754:	4313      	orrs	r3, r2
 8002756:	600b      	str	r3, [r1, #0]
 8002758:	e015      	b.n	8002786 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800275a:	4b3f      	ldr	r3, [pc, #252]	; (8002858 <HAL_RCC_OscConfig+0x2b0>)
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002760:	f7fe fcd0 	bl	8001104 <HAL_GetTick>
 8002764:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002766:	e008      	b.n	800277a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002768:	f7fe fccc 	bl	8001104 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b02      	cmp	r3, #2
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e184      	b.n	8002a84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800277a:	4b36      	ldr	r3, [pc, #216]	; (8002854 <HAL_RCC_OscConfig+0x2ac>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1f0      	bne.n	8002768 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0308 	and.w	r3, r3, #8
 800278e:	2b00      	cmp	r3, #0
 8002790:	d030      	beq.n	80027f4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	695b      	ldr	r3, [r3, #20]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d016      	beq.n	80027c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800279a:	4b30      	ldr	r3, [pc, #192]	; (800285c <HAL_RCC_OscConfig+0x2b4>)
 800279c:	2201      	movs	r2, #1
 800279e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a0:	f7fe fcb0 	bl	8001104 <HAL_GetTick>
 80027a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027a6:	e008      	b.n	80027ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027a8:	f7fe fcac 	bl	8001104 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e164      	b.n	8002a84 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ba:	4b26      	ldr	r3, [pc, #152]	; (8002854 <HAL_RCC_OscConfig+0x2ac>)
 80027bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d0f0      	beq.n	80027a8 <HAL_RCC_OscConfig+0x200>
 80027c6:	e015      	b.n	80027f4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027c8:	4b24      	ldr	r3, [pc, #144]	; (800285c <HAL_RCC_OscConfig+0x2b4>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ce:	f7fe fc99 	bl	8001104 <HAL_GetTick>
 80027d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027d4:	e008      	b.n	80027e8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027d6:	f7fe fc95 	bl	8001104 <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d901      	bls.n	80027e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e14d      	b.n	8002a84 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027e8:	4b1a      	ldr	r3, [pc, #104]	; (8002854 <HAL_RCC_OscConfig+0x2ac>)
 80027ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027ec:	f003 0302 	and.w	r3, r3, #2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d1f0      	bne.n	80027d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0304 	and.w	r3, r3, #4
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	f000 80a0 	beq.w	8002942 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002802:	2300      	movs	r3, #0
 8002804:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002806:	4b13      	ldr	r3, [pc, #76]	; (8002854 <HAL_RCC_OscConfig+0x2ac>)
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d10f      	bne.n	8002832 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002812:	2300      	movs	r3, #0
 8002814:	60bb      	str	r3, [r7, #8]
 8002816:	4b0f      	ldr	r3, [pc, #60]	; (8002854 <HAL_RCC_OscConfig+0x2ac>)
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	4a0e      	ldr	r2, [pc, #56]	; (8002854 <HAL_RCC_OscConfig+0x2ac>)
 800281c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002820:	6413      	str	r3, [r2, #64]	; 0x40
 8002822:	4b0c      	ldr	r3, [pc, #48]	; (8002854 <HAL_RCC_OscConfig+0x2ac>)
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800282a:	60bb      	str	r3, [r7, #8]
 800282c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800282e:	2301      	movs	r3, #1
 8002830:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002832:	4b0b      	ldr	r3, [pc, #44]	; (8002860 <HAL_RCC_OscConfig+0x2b8>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800283a:	2b00      	cmp	r3, #0
 800283c:	d121      	bne.n	8002882 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800283e:	4b08      	ldr	r3, [pc, #32]	; (8002860 <HAL_RCC_OscConfig+0x2b8>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a07      	ldr	r2, [pc, #28]	; (8002860 <HAL_RCC_OscConfig+0x2b8>)
 8002844:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002848:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800284a:	f7fe fc5b 	bl	8001104 <HAL_GetTick>
 800284e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002850:	e011      	b.n	8002876 <HAL_RCC_OscConfig+0x2ce>
 8002852:	bf00      	nop
 8002854:	40023800 	.word	0x40023800
 8002858:	42470000 	.word	0x42470000
 800285c:	42470e80 	.word	0x42470e80
 8002860:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002864:	f7fe fc4e 	bl	8001104 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b02      	cmp	r3, #2
 8002870:	d901      	bls.n	8002876 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e106      	b.n	8002a84 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002876:	4b85      	ldr	r3, [pc, #532]	; (8002a8c <HAL_RCC_OscConfig+0x4e4>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800287e:	2b00      	cmp	r3, #0
 8002880:	d0f0      	beq.n	8002864 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d106      	bne.n	8002898 <HAL_RCC_OscConfig+0x2f0>
 800288a:	4b81      	ldr	r3, [pc, #516]	; (8002a90 <HAL_RCC_OscConfig+0x4e8>)
 800288c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800288e:	4a80      	ldr	r2, [pc, #512]	; (8002a90 <HAL_RCC_OscConfig+0x4e8>)
 8002890:	f043 0301 	orr.w	r3, r3, #1
 8002894:	6713      	str	r3, [r2, #112]	; 0x70
 8002896:	e01c      	b.n	80028d2 <HAL_RCC_OscConfig+0x32a>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	2b05      	cmp	r3, #5
 800289e:	d10c      	bne.n	80028ba <HAL_RCC_OscConfig+0x312>
 80028a0:	4b7b      	ldr	r3, [pc, #492]	; (8002a90 <HAL_RCC_OscConfig+0x4e8>)
 80028a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a4:	4a7a      	ldr	r2, [pc, #488]	; (8002a90 <HAL_RCC_OscConfig+0x4e8>)
 80028a6:	f043 0304 	orr.w	r3, r3, #4
 80028aa:	6713      	str	r3, [r2, #112]	; 0x70
 80028ac:	4b78      	ldr	r3, [pc, #480]	; (8002a90 <HAL_RCC_OscConfig+0x4e8>)
 80028ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b0:	4a77      	ldr	r2, [pc, #476]	; (8002a90 <HAL_RCC_OscConfig+0x4e8>)
 80028b2:	f043 0301 	orr.w	r3, r3, #1
 80028b6:	6713      	str	r3, [r2, #112]	; 0x70
 80028b8:	e00b      	b.n	80028d2 <HAL_RCC_OscConfig+0x32a>
 80028ba:	4b75      	ldr	r3, [pc, #468]	; (8002a90 <HAL_RCC_OscConfig+0x4e8>)
 80028bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028be:	4a74      	ldr	r2, [pc, #464]	; (8002a90 <HAL_RCC_OscConfig+0x4e8>)
 80028c0:	f023 0301 	bic.w	r3, r3, #1
 80028c4:	6713      	str	r3, [r2, #112]	; 0x70
 80028c6:	4b72      	ldr	r3, [pc, #456]	; (8002a90 <HAL_RCC_OscConfig+0x4e8>)
 80028c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ca:	4a71      	ldr	r2, [pc, #452]	; (8002a90 <HAL_RCC_OscConfig+0x4e8>)
 80028cc:	f023 0304 	bic.w	r3, r3, #4
 80028d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d015      	beq.n	8002906 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028da:	f7fe fc13 	bl	8001104 <HAL_GetTick>
 80028de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028e0:	e00a      	b.n	80028f8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028e2:	f7fe fc0f 	bl	8001104 <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e0c5      	b.n	8002a84 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028f8:	4b65      	ldr	r3, [pc, #404]	; (8002a90 <HAL_RCC_OscConfig+0x4e8>)
 80028fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028fc:	f003 0302 	and.w	r3, r3, #2
 8002900:	2b00      	cmp	r3, #0
 8002902:	d0ee      	beq.n	80028e2 <HAL_RCC_OscConfig+0x33a>
 8002904:	e014      	b.n	8002930 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002906:	f7fe fbfd 	bl	8001104 <HAL_GetTick>
 800290a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800290c:	e00a      	b.n	8002924 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800290e:	f7fe fbf9 	bl	8001104 <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	f241 3288 	movw	r2, #5000	; 0x1388
 800291c:	4293      	cmp	r3, r2
 800291e:	d901      	bls.n	8002924 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e0af      	b.n	8002a84 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002924:	4b5a      	ldr	r3, [pc, #360]	; (8002a90 <HAL_RCC_OscConfig+0x4e8>)
 8002926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002928:	f003 0302 	and.w	r3, r3, #2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d1ee      	bne.n	800290e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002930:	7dfb      	ldrb	r3, [r7, #23]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d105      	bne.n	8002942 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002936:	4b56      	ldr	r3, [pc, #344]	; (8002a90 <HAL_RCC_OscConfig+0x4e8>)
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	4a55      	ldr	r2, [pc, #340]	; (8002a90 <HAL_RCC_OscConfig+0x4e8>)
 800293c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002940:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	699b      	ldr	r3, [r3, #24]
 8002946:	2b00      	cmp	r3, #0
 8002948:	f000 809b 	beq.w	8002a82 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800294c:	4b50      	ldr	r3, [pc, #320]	; (8002a90 <HAL_RCC_OscConfig+0x4e8>)
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f003 030c 	and.w	r3, r3, #12
 8002954:	2b08      	cmp	r3, #8
 8002956:	d05c      	beq.n	8002a12 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	2b02      	cmp	r3, #2
 800295e:	d141      	bne.n	80029e4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002960:	4b4c      	ldr	r3, [pc, #304]	; (8002a94 <HAL_RCC_OscConfig+0x4ec>)
 8002962:	2200      	movs	r2, #0
 8002964:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002966:	f7fe fbcd 	bl	8001104 <HAL_GetTick>
 800296a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800296c:	e008      	b.n	8002980 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800296e:	f7fe fbc9 	bl	8001104 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	2b02      	cmp	r3, #2
 800297a:	d901      	bls.n	8002980 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e081      	b.n	8002a84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002980:	4b43      	ldr	r3, [pc, #268]	; (8002a90 <HAL_RCC_OscConfig+0x4e8>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1f0      	bne.n	800296e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	69da      	ldr	r2, [r3, #28]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a1b      	ldr	r3, [r3, #32]
 8002994:	431a      	orrs	r2, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299a:	019b      	lsls	r3, r3, #6
 800299c:	431a      	orrs	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a2:	085b      	lsrs	r3, r3, #1
 80029a4:	3b01      	subs	r3, #1
 80029a6:	041b      	lsls	r3, r3, #16
 80029a8:	431a      	orrs	r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ae:	061b      	lsls	r3, r3, #24
 80029b0:	4937      	ldr	r1, [pc, #220]	; (8002a90 <HAL_RCC_OscConfig+0x4e8>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029b6:	4b37      	ldr	r3, [pc, #220]	; (8002a94 <HAL_RCC_OscConfig+0x4ec>)
 80029b8:	2201      	movs	r2, #1
 80029ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029bc:	f7fe fba2 	bl	8001104 <HAL_GetTick>
 80029c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029c2:	e008      	b.n	80029d6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029c4:	f7fe fb9e 	bl	8001104 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e056      	b.n	8002a84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029d6:	4b2e      	ldr	r3, [pc, #184]	; (8002a90 <HAL_RCC_OscConfig+0x4e8>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d0f0      	beq.n	80029c4 <HAL_RCC_OscConfig+0x41c>
 80029e2:	e04e      	b.n	8002a82 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029e4:	4b2b      	ldr	r3, [pc, #172]	; (8002a94 <HAL_RCC_OscConfig+0x4ec>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ea:	f7fe fb8b 	bl	8001104 <HAL_GetTick>
 80029ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029f0:	e008      	b.n	8002a04 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029f2:	f7fe fb87 	bl	8001104 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d901      	bls.n	8002a04 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e03f      	b.n	8002a84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a04:	4b22      	ldr	r3, [pc, #136]	; (8002a90 <HAL_RCC_OscConfig+0x4e8>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1f0      	bne.n	80029f2 <HAL_RCC_OscConfig+0x44a>
 8002a10:	e037      	b.n	8002a82 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d101      	bne.n	8002a1e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e032      	b.n	8002a84 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a1e:	4b1c      	ldr	r3, [pc, #112]	; (8002a90 <HAL_RCC_OscConfig+0x4e8>)
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	699b      	ldr	r3, [r3, #24]
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d028      	beq.n	8002a7e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d121      	bne.n	8002a7e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d11a      	bne.n	8002a7e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a48:	68fa      	ldr	r2, [r7, #12]
 8002a4a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a4e:	4013      	ands	r3, r2
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a54:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d111      	bne.n	8002a7e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a64:	085b      	lsrs	r3, r3, #1
 8002a66:	3b01      	subs	r3, #1
 8002a68:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d107      	bne.n	8002a7e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a78:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d001      	beq.n	8002a82 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e000      	b.n	8002a84 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3718      	adds	r7, #24
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	40007000 	.word	0x40007000
 8002a90:	40023800 	.word	0x40023800
 8002a94:	42470060 	.word	0x42470060

08002a98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d101      	bne.n	8002aac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e0cc      	b.n	8002c46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002aac:	4b68      	ldr	r3, [pc, #416]	; (8002c50 <HAL_RCC_ClockConfig+0x1b8>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0307 	and.w	r3, r3, #7
 8002ab4:	683a      	ldr	r2, [r7, #0]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d90c      	bls.n	8002ad4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aba:	4b65      	ldr	r3, [pc, #404]	; (8002c50 <HAL_RCC_ClockConfig+0x1b8>)
 8002abc:	683a      	ldr	r2, [r7, #0]
 8002abe:	b2d2      	uxtb	r2, r2
 8002ac0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ac2:	4b63      	ldr	r3, [pc, #396]	; (8002c50 <HAL_RCC_ClockConfig+0x1b8>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0307 	and.w	r3, r3, #7
 8002aca:	683a      	ldr	r2, [r7, #0]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d001      	beq.n	8002ad4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e0b8      	b.n	8002c46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0302 	and.w	r3, r3, #2
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d020      	beq.n	8002b22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0304 	and.w	r3, r3, #4
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d005      	beq.n	8002af8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002aec:	4b59      	ldr	r3, [pc, #356]	; (8002c54 <HAL_RCC_ClockConfig+0x1bc>)
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	4a58      	ldr	r2, [pc, #352]	; (8002c54 <HAL_RCC_ClockConfig+0x1bc>)
 8002af2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002af6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0308 	and.w	r3, r3, #8
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d005      	beq.n	8002b10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b04:	4b53      	ldr	r3, [pc, #332]	; (8002c54 <HAL_RCC_ClockConfig+0x1bc>)
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	4a52      	ldr	r2, [pc, #328]	; (8002c54 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b10:	4b50      	ldr	r3, [pc, #320]	; (8002c54 <HAL_RCC_ClockConfig+0x1bc>)
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	494d      	ldr	r1, [pc, #308]	; (8002c54 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d044      	beq.n	8002bb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d107      	bne.n	8002b46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b36:	4b47      	ldr	r3, [pc, #284]	; (8002c54 <HAL_RCC_ClockConfig+0x1bc>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d119      	bne.n	8002b76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e07f      	b.n	8002c46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d003      	beq.n	8002b56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b52:	2b03      	cmp	r3, #3
 8002b54:	d107      	bne.n	8002b66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b56:	4b3f      	ldr	r3, [pc, #252]	; (8002c54 <HAL_RCC_ClockConfig+0x1bc>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d109      	bne.n	8002b76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e06f      	b.n	8002c46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b66:	4b3b      	ldr	r3, [pc, #236]	; (8002c54 <HAL_RCC_ClockConfig+0x1bc>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e067      	b.n	8002c46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b76:	4b37      	ldr	r3, [pc, #220]	; (8002c54 <HAL_RCC_ClockConfig+0x1bc>)
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f023 0203 	bic.w	r2, r3, #3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	4934      	ldr	r1, [pc, #208]	; (8002c54 <HAL_RCC_ClockConfig+0x1bc>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b88:	f7fe fabc 	bl	8001104 <HAL_GetTick>
 8002b8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b8e:	e00a      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b90:	f7fe fab8 	bl	8001104 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e04f      	b.n	8002c46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ba6:	4b2b      	ldr	r3, [pc, #172]	; (8002c54 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f003 020c 	and.w	r2, r3, #12
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d1eb      	bne.n	8002b90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bb8:	4b25      	ldr	r3, [pc, #148]	; (8002c50 <HAL_RCC_ClockConfig+0x1b8>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0307 	and.w	r3, r3, #7
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d20c      	bcs.n	8002be0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bc6:	4b22      	ldr	r3, [pc, #136]	; (8002c50 <HAL_RCC_ClockConfig+0x1b8>)
 8002bc8:	683a      	ldr	r2, [r7, #0]
 8002bca:	b2d2      	uxtb	r2, r2
 8002bcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bce:	4b20      	ldr	r3, [pc, #128]	; (8002c50 <HAL_RCC_ClockConfig+0x1b8>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0307 	and.w	r3, r3, #7
 8002bd6:	683a      	ldr	r2, [r7, #0]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d001      	beq.n	8002be0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e032      	b.n	8002c46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0304 	and.w	r3, r3, #4
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d008      	beq.n	8002bfe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bec:	4b19      	ldr	r3, [pc, #100]	; (8002c54 <HAL_RCC_ClockConfig+0x1bc>)
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	4916      	ldr	r1, [pc, #88]	; (8002c54 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0308 	and.w	r3, r3, #8
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d009      	beq.n	8002c1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c0a:	4b12      	ldr	r3, [pc, #72]	; (8002c54 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	490e      	ldr	r1, [pc, #56]	; (8002c54 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c1e:	f000 f821 	bl	8002c64 <HAL_RCC_GetSysClockFreq>
 8002c22:	4602      	mov	r2, r0
 8002c24:	4b0b      	ldr	r3, [pc, #44]	; (8002c54 <HAL_RCC_ClockConfig+0x1bc>)
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	091b      	lsrs	r3, r3, #4
 8002c2a:	f003 030f 	and.w	r3, r3, #15
 8002c2e:	490a      	ldr	r1, [pc, #40]	; (8002c58 <HAL_RCC_ClockConfig+0x1c0>)
 8002c30:	5ccb      	ldrb	r3, [r1, r3]
 8002c32:	fa22 f303 	lsr.w	r3, r2, r3
 8002c36:	4a09      	ldr	r2, [pc, #36]	; (8002c5c <HAL_RCC_ClockConfig+0x1c4>)
 8002c38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c3a:	4b09      	ldr	r3, [pc, #36]	; (8002c60 <HAL_RCC_ClockConfig+0x1c8>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7fe fa1c 	bl	800107c <HAL_InitTick>

  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3710      	adds	r7, #16
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	40023c00 	.word	0x40023c00
 8002c54:	40023800 	.word	0x40023800
 8002c58:	08003d64 	.word	0x08003d64
 8002c5c:	20000000 	.word	0x20000000
 8002c60:	20000004 	.word	0x20000004

08002c64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c64:	b5b0      	push	{r4, r5, r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	6079      	str	r1, [r7, #4]
 8002c6e:	2100      	movs	r1, #0
 8002c70:	60f9      	str	r1, [r7, #12]
 8002c72:	2100      	movs	r1, #0
 8002c74:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002c76:	2100      	movs	r1, #0
 8002c78:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c7a:	4952      	ldr	r1, [pc, #328]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002c7c:	6889      	ldr	r1, [r1, #8]
 8002c7e:	f001 010c 	and.w	r1, r1, #12
 8002c82:	2908      	cmp	r1, #8
 8002c84:	d00d      	beq.n	8002ca2 <HAL_RCC_GetSysClockFreq+0x3e>
 8002c86:	2908      	cmp	r1, #8
 8002c88:	f200 8094 	bhi.w	8002db4 <HAL_RCC_GetSysClockFreq+0x150>
 8002c8c:	2900      	cmp	r1, #0
 8002c8e:	d002      	beq.n	8002c96 <HAL_RCC_GetSysClockFreq+0x32>
 8002c90:	2904      	cmp	r1, #4
 8002c92:	d003      	beq.n	8002c9c <HAL_RCC_GetSysClockFreq+0x38>
 8002c94:	e08e      	b.n	8002db4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c96:	4b4c      	ldr	r3, [pc, #304]	; (8002dc8 <HAL_RCC_GetSysClockFreq+0x164>)
 8002c98:	60bb      	str	r3, [r7, #8]
       break;
 8002c9a:	e08e      	b.n	8002dba <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c9c:	4b4b      	ldr	r3, [pc, #300]	; (8002dcc <HAL_RCC_GetSysClockFreq+0x168>)
 8002c9e:	60bb      	str	r3, [r7, #8]
      break;
 8002ca0:	e08b      	b.n	8002dba <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ca2:	4948      	ldr	r1, [pc, #288]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002ca4:	6849      	ldr	r1, [r1, #4]
 8002ca6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002caa:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cac:	4945      	ldr	r1, [pc, #276]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002cae:	6849      	ldr	r1, [r1, #4]
 8002cb0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002cb4:	2900      	cmp	r1, #0
 8002cb6:	d024      	beq.n	8002d02 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cb8:	4942      	ldr	r1, [pc, #264]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002cba:	6849      	ldr	r1, [r1, #4]
 8002cbc:	0989      	lsrs	r1, r1, #6
 8002cbe:	4608      	mov	r0, r1
 8002cc0:	f04f 0100 	mov.w	r1, #0
 8002cc4:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002cc8:	f04f 0500 	mov.w	r5, #0
 8002ccc:	ea00 0204 	and.w	r2, r0, r4
 8002cd0:	ea01 0305 	and.w	r3, r1, r5
 8002cd4:	493d      	ldr	r1, [pc, #244]	; (8002dcc <HAL_RCC_GetSysClockFreq+0x168>)
 8002cd6:	fb01 f003 	mul.w	r0, r1, r3
 8002cda:	2100      	movs	r1, #0
 8002cdc:	fb01 f102 	mul.w	r1, r1, r2
 8002ce0:	1844      	adds	r4, r0, r1
 8002ce2:	493a      	ldr	r1, [pc, #232]	; (8002dcc <HAL_RCC_GetSysClockFreq+0x168>)
 8002ce4:	fba2 0101 	umull	r0, r1, r2, r1
 8002ce8:	1863      	adds	r3, r4, r1
 8002cea:	4619      	mov	r1, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	461a      	mov	r2, r3
 8002cf0:	f04f 0300 	mov.w	r3, #0
 8002cf4:	f7fd facc 	bl	8000290 <__aeabi_uldivmod>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	60fb      	str	r3, [r7, #12]
 8002d00:	e04a      	b.n	8002d98 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d02:	4b30      	ldr	r3, [pc, #192]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	099b      	lsrs	r3, r3, #6
 8002d08:	461a      	mov	r2, r3
 8002d0a:	f04f 0300 	mov.w	r3, #0
 8002d0e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002d12:	f04f 0100 	mov.w	r1, #0
 8002d16:	ea02 0400 	and.w	r4, r2, r0
 8002d1a:	ea03 0501 	and.w	r5, r3, r1
 8002d1e:	4620      	mov	r0, r4
 8002d20:	4629      	mov	r1, r5
 8002d22:	f04f 0200 	mov.w	r2, #0
 8002d26:	f04f 0300 	mov.w	r3, #0
 8002d2a:	014b      	lsls	r3, r1, #5
 8002d2c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002d30:	0142      	lsls	r2, r0, #5
 8002d32:	4610      	mov	r0, r2
 8002d34:	4619      	mov	r1, r3
 8002d36:	1b00      	subs	r0, r0, r4
 8002d38:	eb61 0105 	sbc.w	r1, r1, r5
 8002d3c:	f04f 0200 	mov.w	r2, #0
 8002d40:	f04f 0300 	mov.w	r3, #0
 8002d44:	018b      	lsls	r3, r1, #6
 8002d46:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002d4a:	0182      	lsls	r2, r0, #6
 8002d4c:	1a12      	subs	r2, r2, r0
 8002d4e:	eb63 0301 	sbc.w	r3, r3, r1
 8002d52:	f04f 0000 	mov.w	r0, #0
 8002d56:	f04f 0100 	mov.w	r1, #0
 8002d5a:	00d9      	lsls	r1, r3, #3
 8002d5c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d60:	00d0      	lsls	r0, r2, #3
 8002d62:	4602      	mov	r2, r0
 8002d64:	460b      	mov	r3, r1
 8002d66:	1912      	adds	r2, r2, r4
 8002d68:	eb45 0303 	adc.w	r3, r5, r3
 8002d6c:	f04f 0000 	mov.w	r0, #0
 8002d70:	f04f 0100 	mov.w	r1, #0
 8002d74:	0299      	lsls	r1, r3, #10
 8002d76:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002d7a:	0290      	lsls	r0, r2, #10
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	460b      	mov	r3, r1
 8002d80:	4610      	mov	r0, r2
 8002d82:	4619      	mov	r1, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	461a      	mov	r2, r3
 8002d88:	f04f 0300 	mov.w	r3, #0
 8002d8c:	f7fd fa80 	bl	8000290 <__aeabi_uldivmod>
 8002d90:	4602      	mov	r2, r0
 8002d92:	460b      	mov	r3, r1
 8002d94:	4613      	mov	r3, r2
 8002d96:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d98:	4b0a      	ldr	r3, [pc, #40]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	0c1b      	lsrs	r3, r3, #16
 8002d9e:	f003 0303 	and.w	r3, r3, #3
 8002da2:	3301      	adds	r3, #1
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002da8:	68fa      	ldr	r2, [r7, #12]
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002db0:	60bb      	str	r3, [r7, #8]
      break;
 8002db2:	e002      	b.n	8002dba <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002db4:	4b04      	ldr	r3, [pc, #16]	; (8002dc8 <HAL_RCC_GetSysClockFreq+0x164>)
 8002db6:	60bb      	str	r3, [r7, #8]
      break;
 8002db8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dba:	68bb      	ldr	r3, [r7, #8]
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3710      	adds	r7, #16
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bdb0      	pop	{r4, r5, r7, pc}
 8002dc4:	40023800 	.word	0x40023800
 8002dc8:	00f42400 	.word	0x00f42400
 8002dcc:	017d7840 	.word	0x017d7840

08002dd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dd4:	4b03      	ldr	r3, [pc, #12]	; (8002de4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	20000000 	.word	0x20000000

08002de8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002dec:	f7ff fff0 	bl	8002dd0 <HAL_RCC_GetHCLKFreq>
 8002df0:	4602      	mov	r2, r0
 8002df2:	4b05      	ldr	r3, [pc, #20]	; (8002e08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	0a9b      	lsrs	r3, r3, #10
 8002df8:	f003 0307 	and.w	r3, r3, #7
 8002dfc:	4903      	ldr	r1, [pc, #12]	; (8002e0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dfe:	5ccb      	ldrb	r3, [r1, r3]
 8002e00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	40023800 	.word	0x40023800
 8002e0c:	08003d74 	.word	0x08003d74

08002e10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e14:	f7ff ffdc 	bl	8002dd0 <HAL_RCC_GetHCLKFreq>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	4b05      	ldr	r3, [pc, #20]	; (8002e30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	0b5b      	lsrs	r3, r3, #13
 8002e20:	f003 0307 	and.w	r3, r3, #7
 8002e24:	4903      	ldr	r1, [pc, #12]	; (8002e34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e26:	5ccb      	ldrb	r3, [r1, r3]
 8002e28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	40023800 	.word	0x40023800
 8002e34:	08003d74 	.word	0x08003d74

08002e38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d101      	bne.n	8002e4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e03f      	b.n	8002eca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d106      	bne.n	8002e64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f7fd fffc 	bl	8000e5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2224      	movs	r2, #36	; 0x24
 8002e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68da      	ldr	r2, [r3, #12]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f000 f905 	bl	800308c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	691a      	ldr	r2, [r3, #16]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	695a      	ldr	r2, [r3, #20]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ea0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	68da      	ldr	r2, [r3, #12]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002eb0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2220      	movs	r2, #32
 8002ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2220      	movs	r2, #32
 8002ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b08a      	sub	sp, #40	; 0x28
 8002ed6:	af02      	add	r7, sp, #8
 8002ed8:	60f8      	str	r0, [r7, #12]
 8002eda:	60b9      	str	r1, [r7, #8]
 8002edc:	603b      	str	r3, [r7, #0]
 8002ede:	4613      	mov	r3, r2
 8002ee0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b20      	cmp	r3, #32
 8002ef0:	d17c      	bne.n	8002fec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d002      	beq.n	8002efe <HAL_UART_Transmit+0x2c>
 8002ef8:	88fb      	ldrh	r3, [r7, #6]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d101      	bne.n	8002f02 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e075      	b.n	8002fee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d101      	bne.n	8002f10 <HAL_UART_Transmit+0x3e>
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	e06e      	b.n	8002fee <HAL_UART_Transmit+0x11c>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2221      	movs	r2, #33	; 0x21
 8002f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f26:	f7fe f8ed 	bl	8001104 <HAL_GetTick>
 8002f2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	88fa      	ldrh	r2, [r7, #6]
 8002f30:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	88fa      	ldrh	r2, [r7, #6]
 8002f36:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f40:	d108      	bne.n	8002f54 <HAL_UART_Transmit+0x82>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d104      	bne.n	8002f54 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	61bb      	str	r3, [r7, #24]
 8002f52:	e003      	b.n	8002f5c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002f64:	e02a      	b.n	8002fbc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	9300      	str	r3, [sp, #0]
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	2180      	movs	r1, #128	; 0x80
 8002f70:	68f8      	ldr	r0, [r7, #12]
 8002f72:	f000 f840 	bl	8002ff6 <UART_WaitOnFlagUntilTimeout>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d001      	beq.n	8002f80 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e036      	b.n	8002fee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10b      	bne.n	8002f9e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	881b      	ldrh	r3, [r3, #0]
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f94:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	3302      	adds	r3, #2
 8002f9a:	61bb      	str	r3, [r7, #24]
 8002f9c:	e007      	b.n	8002fae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	781a      	ldrb	r2, [r3, #0]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	3301      	adds	r3, #1
 8002fac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1cf      	bne.n	8002f66 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	9300      	str	r3, [sp, #0]
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	2140      	movs	r1, #64	; 0x40
 8002fd0:	68f8      	ldr	r0, [r7, #12]
 8002fd2:	f000 f810 	bl	8002ff6 <UART_WaitOnFlagUntilTimeout>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d001      	beq.n	8002fe0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e006      	b.n	8002fee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2220      	movs	r2, #32
 8002fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	e000      	b.n	8002fee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002fec:	2302      	movs	r3, #2
  }
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3720      	adds	r7, #32
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b084      	sub	sp, #16
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	60f8      	str	r0, [r7, #12]
 8002ffe:	60b9      	str	r1, [r7, #8]
 8003000:	603b      	str	r3, [r7, #0]
 8003002:	4613      	mov	r3, r2
 8003004:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003006:	e02c      	b.n	8003062 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800300e:	d028      	beq.n	8003062 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d007      	beq.n	8003026 <UART_WaitOnFlagUntilTimeout+0x30>
 8003016:	f7fe f875 	bl	8001104 <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	429a      	cmp	r2, r3
 8003024:	d21d      	bcs.n	8003062 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68da      	ldr	r2, [r3, #12]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003034:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	695a      	ldr	r2, [r3, #20]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f022 0201 	bic.w	r2, r2, #1
 8003044:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2220      	movs	r2, #32
 800304a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2220      	movs	r2, #32
 8003052:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e00f      	b.n	8003082 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	4013      	ands	r3, r2
 800306c:	68ba      	ldr	r2, [r7, #8]
 800306e:	429a      	cmp	r2, r3
 8003070:	bf0c      	ite	eq
 8003072:	2301      	moveq	r3, #1
 8003074:	2300      	movne	r3, #0
 8003076:	b2db      	uxtb	r3, r3
 8003078:	461a      	mov	r2, r3
 800307a:	79fb      	ldrb	r3, [r7, #7]
 800307c:	429a      	cmp	r2, r3
 800307e:	d0c3      	beq.n	8003008 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
	...

0800308c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800308c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003090:	b09f      	sub	sp, #124	; 0x7c
 8003092:	af00      	add	r7, sp, #0
 8003094:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003096:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	691b      	ldr	r3, [r3, #16]
 800309c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80030a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030a2:	68d9      	ldr	r1, [r3, #12]
 80030a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	ea40 0301 	orr.w	r3, r0, r1
 80030ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80030ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030b0:	689a      	ldr	r2, [r3, #8]
 80030b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	431a      	orrs	r2, r3
 80030b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030ba:	695b      	ldr	r3, [r3, #20]
 80030bc:	431a      	orrs	r2, r3
 80030be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030c0:	69db      	ldr	r3, [r3, #28]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80030c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80030d0:	f021 010c 	bic.w	r1, r1, #12
 80030d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030da:	430b      	orrs	r3, r1
 80030dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	695b      	ldr	r3, [r3, #20]
 80030e4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80030e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030ea:	6999      	ldr	r1, [r3, #24]
 80030ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	ea40 0301 	orr.w	r3, r0, r1
 80030f4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80030f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	4bc5      	ldr	r3, [pc, #788]	; (8003410 <UART_SetConfig+0x384>)
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d004      	beq.n	800310a <UART_SetConfig+0x7e>
 8003100:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	4bc3      	ldr	r3, [pc, #780]	; (8003414 <UART_SetConfig+0x388>)
 8003106:	429a      	cmp	r2, r3
 8003108:	d103      	bne.n	8003112 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800310a:	f7ff fe81 	bl	8002e10 <HAL_RCC_GetPCLK2Freq>
 800310e:	6778      	str	r0, [r7, #116]	; 0x74
 8003110:	e002      	b.n	8003118 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003112:	f7ff fe69 	bl	8002de8 <HAL_RCC_GetPCLK1Freq>
 8003116:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003118:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800311a:	69db      	ldr	r3, [r3, #28]
 800311c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003120:	f040 80b6 	bne.w	8003290 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003124:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003126:	461c      	mov	r4, r3
 8003128:	f04f 0500 	mov.w	r5, #0
 800312c:	4622      	mov	r2, r4
 800312e:	462b      	mov	r3, r5
 8003130:	1891      	adds	r1, r2, r2
 8003132:	6439      	str	r1, [r7, #64]	; 0x40
 8003134:	415b      	adcs	r3, r3
 8003136:	647b      	str	r3, [r7, #68]	; 0x44
 8003138:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800313c:	1912      	adds	r2, r2, r4
 800313e:	eb45 0303 	adc.w	r3, r5, r3
 8003142:	f04f 0000 	mov.w	r0, #0
 8003146:	f04f 0100 	mov.w	r1, #0
 800314a:	00d9      	lsls	r1, r3, #3
 800314c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003150:	00d0      	lsls	r0, r2, #3
 8003152:	4602      	mov	r2, r0
 8003154:	460b      	mov	r3, r1
 8003156:	1911      	adds	r1, r2, r4
 8003158:	6639      	str	r1, [r7, #96]	; 0x60
 800315a:	416b      	adcs	r3, r5
 800315c:	667b      	str	r3, [r7, #100]	; 0x64
 800315e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	461a      	mov	r2, r3
 8003164:	f04f 0300 	mov.w	r3, #0
 8003168:	1891      	adds	r1, r2, r2
 800316a:	63b9      	str	r1, [r7, #56]	; 0x38
 800316c:	415b      	adcs	r3, r3
 800316e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003170:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003174:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003178:	f7fd f88a 	bl	8000290 <__aeabi_uldivmod>
 800317c:	4602      	mov	r2, r0
 800317e:	460b      	mov	r3, r1
 8003180:	4ba5      	ldr	r3, [pc, #660]	; (8003418 <UART_SetConfig+0x38c>)
 8003182:	fba3 2302 	umull	r2, r3, r3, r2
 8003186:	095b      	lsrs	r3, r3, #5
 8003188:	011e      	lsls	r6, r3, #4
 800318a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800318c:	461c      	mov	r4, r3
 800318e:	f04f 0500 	mov.w	r5, #0
 8003192:	4622      	mov	r2, r4
 8003194:	462b      	mov	r3, r5
 8003196:	1891      	adds	r1, r2, r2
 8003198:	6339      	str	r1, [r7, #48]	; 0x30
 800319a:	415b      	adcs	r3, r3
 800319c:	637b      	str	r3, [r7, #52]	; 0x34
 800319e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80031a2:	1912      	adds	r2, r2, r4
 80031a4:	eb45 0303 	adc.w	r3, r5, r3
 80031a8:	f04f 0000 	mov.w	r0, #0
 80031ac:	f04f 0100 	mov.w	r1, #0
 80031b0:	00d9      	lsls	r1, r3, #3
 80031b2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80031b6:	00d0      	lsls	r0, r2, #3
 80031b8:	4602      	mov	r2, r0
 80031ba:	460b      	mov	r3, r1
 80031bc:	1911      	adds	r1, r2, r4
 80031be:	65b9      	str	r1, [r7, #88]	; 0x58
 80031c0:	416b      	adcs	r3, r5
 80031c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	461a      	mov	r2, r3
 80031ca:	f04f 0300 	mov.w	r3, #0
 80031ce:	1891      	adds	r1, r2, r2
 80031d0:	62b9      	str	r1, [r7, #40]	; 0x28
 80031d2:	415b      	adcs	r3, r3
 80031d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80031da:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80031de:	f7fd f857 	bl	8000290 <__aeabi_uldivmod>
 80031e2:	4602      	mov	r2, r0
 80031e4:	460b      	mov	r3, r1
 80031e6:	4b8c      	ldr	r3, [pc, #560]	; (8003418 <UART_SetConfig+0x38c>)
 80031e8:	fba3 1302 	umull	r1, r3, r3, r2
 80031ec:	095b      	lsrs	r3, r3, #5
 80031ee:	2164      	movs	r1, #100	; 0x64
 80031f0:	fb01 f303 	mul.w	r3, r1, r3
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	00db      	lsls	r3, r3, #3
 80031f8:	3332      	adds	r3, #50	; 0x32
 80031fa:	4a87      	ldr	r2, [pc, #540]	; (8003418 <UART_SetConfig+0x38c>)
 80031fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003200:	095b      	lsrs	r3, r3, #5
 8003202:	005b      	lsls	r3, r3, #1
 8003204:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003208:	441e      	add	r6, r3
 800320a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800320c:	4618      	mov	r0, r3
 800320e:	f04f 0100 	mov.w	r1, #0
 8003212:	4602      	mov	r2, r0
 8003214:	460b      	mov	r3, r1
 8003216:	1894      	adds	r4, r2, r2
 8003218:	623c      	str	r4, [r7, #32]
 800321a:	415b      	adcs	r3, r3
 800321c:	627b      	str	r3, [r7, #36]	; 0x24
 800321e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003222:	1812      	adds	r2, r2, r0
 8003224:	eb41 0303 	adc.w	r3, r1, r3
 8003228:	f04f 0400 	mov.w	r4, #0
 800322c:	f04f 0500 	mov.w	r5, #0
 8003230:	00dd      	lsls	r5, r3, #3
 8003232:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003236:	00d4      	lsls	r4, r2, #3
 8003238:	4622      	mov	r2, r4
 800323a:	462b      	mov	r3, r5
 800323c:	1814      	adds	r4, r2, r0
 800323e:	653c      	str	r4, [r7, #80]	; 0x50
 8003240:	414b      	adcs	r3, r1
 8003242:	657b      	str	r3, [r7, #84]	; 0x54
 8003244:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	461a      	mov	r2, r3
 800324a:	f04f 0300 	mov.w	r3, #0
 800324e:	1891      	adds	r1, r2, r2
 8003250:	61b9      	str	r1, [r7, #24]
 8003252:	415b      	adcs	r3, r3
 8003254:	61fb      	str	r3, [r7, #28]
 8003256:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800325a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800325e:	f7fd f817 	bl	8000290 <__aeabi_uldivmod>
 8003262:	4602      	mov	r2, r0
 8003264:	460b      	mov	r3, r1
 8003266:	4b6c      	ldr	r3, [pc, #432]	; (8003418 <UART_SetConfig+0x38c>)
 8003268:	fba3 1302 	umull	r1, r3, r3, r2
 800326c:	095b      	lsrs	r3, r3, #5
 800326e:	2164      	movs	r1, #100	; 0x64
 8003270:	fb01 f303 	mul.w	r3, r1, r3
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	00db      	lsls	r3, r3, #3
 8003278:	3332      	adds	r3, #50	; 0x32
 800327a:	4a67      	ldr	r2, [pc, #412]	; (8003418 <UART_SetConfig+0x38c>)
 800327c:	fba2 2303 	umull	r2, r3, r2, r3
 8003280:	095b      	lsrs	r3, r3, #5
 8003282:	f003 0207 	and.w	r2, r3, #7
 8003286:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4432      	add	r2, r6
 800328c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800328e:	e0b9      	b.n	8003404 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003290:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003292:	461c      	mov	r4, r3
 8003294:	f04f 0500 	mov.w	r5, #0
 8003298:	4622      	mov	r2, r4
 800329a:	462b      	mov	r3, r5
 800329c:	1891      	adds	r1, r2, r2
 800329e:	6139      	str	r1, [r7, #16]
 80032a0:	415b      	adcs	r3, r3
 80032a2:	617b      	str	r3, [r7, #20]
 80032a4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80032a8:	1912      	adds	r2, r2, r4
 80032aa:	eb45 0303 	adc.w	r3, r5, r3
 80032ae:	f04f 0000 	mov.w	r0, #0
 80032b2:	f04f 0100 	mov.w	r1, #0
 80032b6:	00d9      	lsls	r1, r3, #3
 80032b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80032bc:	00d0      	lsls	r0, r2, #3
 80032be:	4602      	mov	r2, r0
 80032c0:	460b      	mov	r3, r1
 80032c2:	eb12 0804 	adds.w	r8, r2, r4
 80032c6:	eb43 0905 	adc.w	r9, r3, r5
 80032ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f04f 0100 	mov.w	r1, #0
 80032d4:	f04f 0200 	mov.w	r2, #0
 80032d8:	f04f 0300 	mov.w	r3, #0
 80032dc:	008b      	lsls	r3, r1, #2
 80032de:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80032e2:	0082      	lsls	r2, r0, #2
 80032e4:	4640      	mov	r0, r8
 80032e6:	4649      	mov	r1, r9
 80032e8:	f7fc ffd2 	bl	8000290 <__aeabi_uldivmod>
 80032ec:	4602      	mov	r2, r0
 80032ee:	460b      	mov	r3, r1
 80032f0:	4b49      	ldr	r3, [pc, #292]	; (8003418 <UART_SetConfig+0x38c>)
 80032f2:	fba3 2302 	umull	r2, r3, r3, r2
 80032f6:	095b      	lsrs	r3, r3, #5
 80032f8:	011e      	lsls	r6, r3, #4
 80032fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032fc:	4618      	mov	r0, r3
 80032fe:	f04f 0100 	mov.w	r1, #0
 8003302:	4602      	mov	r2, r0
 8003304:	460b      	mov	r3, r1
 8003306:	1894      	adds	r4, r2, r2
 8003308:	60bc      	str	r4, [r7, #8]
 800330a:	415b      	adcs	r3, r3
 800330c:	60fb      	str	r3, [r7, #12]
 800330e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003312:	1812      	adds	r2, r2, r0
 8003314:	eb41 0303 	adc.w	r3, r1, r3
 8003318:	f04f 0400 	mov.w	r4, #0
 800331c:	f04f 0500 	mov.w	r5, #0
 8003320:	00dd      	lsls	r5, r3, #3
 8003322:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003326:	00d4      	lsls	r4, r2, #3
 8003328:	4622      	mov	r2, r4
 800332a:	462b      	mov	r3, r5
 800332c:	1814      	adds	r4, r2, r0
 800332e:	64bc      	str	r4, [r7, #72]	; 0x48
 8003330:	414b      	adcs	r3, r1
 8003332:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003334:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	4618      	mov	r0, r3
 800333a:	f04f 0100 	mov.w	r1, #0
 800333e:	f04f 0200 	mov.w	r2, #0
 8003342:	f04f 0300 	mov.w	r3, #0
 8003346:	008b      	lsls	r3, r1, #2
 8003348:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800334c:	0082      	lsls	r2, r0, #2
 800334e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003352:	f7fc ff9d 	bl	8000290 <__aeabi_uldivmod>
 8003356:	4602      	mov	r2, r0
 8003358:	460b      	mov	r3, r1
 800335a:	4b2f      	ldr	r3, [pc, #188]	; (8003418 <UART_SetConfig+0x38c>)
 800335c:	fba3 1302 	umull	r1, r3, r3, r2
 8003360:	095b      	lsrs	r3, r3, #5
 8003362:	2164      	movs	r1, #100	; 0x64
 8003364:	fb01 f303 	mul.w	r3, r1, r3
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	011b      	lsls	r3, r3, #4
 800336c:	3332      	adds	r3, #50	; 0x32
 800336e:	4a2a      	ldr	r2, [pc, #168]	; (8003418 <UART_SetConfig+0x38c>)
 8003370:	fba2 2303 	umull	r2, r3, r2, r3
 8003374:	095b      	lsrs	r3, r3, #5
 8003376:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800337a:	441e      	add	r6, r3
 800337c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800337e:	4618      	mov	r0, r3
 8003380:	f04f 0100 	mov.w	r1, #0
 8003384:	4602      	mov	r2, r0
 8003386:	460b      	mov	r3, r1
 8003388:	1894      	adds	r4, r2, r2
 800338a:	603c      	str	r4, [r7, #0]
 800338c:	415b      	adcs	r3, r3
 800338e:	607b      	str	r3, [r7, #4]
 8003390:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003394:	1812      	adds	r2, r2, r0
 8003396:	eb41 0303 	adc.w	r3, r1, r3
 800339a:	f04f 0400 	mov.w	r4, #0
 800339e:	f04f 0500 	mov.w	r5, #0
 80033a2:	00dd      	lsls	r5, r3, #3
 80033a4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80033a8:	00d4      	lsls	r4, r2, #3
 80033aa:	4622      	mov	r2, r4
 80033ac:	462b      	mov	r3, r5
 80033ae:	eb12 0a00 	adds.w	sl, r2, r0
 80033b2:	eb43 0b01 	adc.w	fp, r3, r1
 80033b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f04f 0100 	mov.w	r1, #0
 80033c0:	f04f 0200 	mov.w	r2, #0
 80033c4:	f04f 0300 	mov.w	r3, #0
 80033c8:	008b      	lsls	r3, r1, #2
 80033ca:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80033ce:	0082      	lsls	r2, r0, #2
 80033d0:	4650      	mov	r0, sl
 80033d2:	4659      	mov	r1, fp
 80033d4:	f7fc ff5c 	bl	8000290 <__aeabi_uldivmod>
 80033d8:	4602      	mov	r2, r0
 80033da:	460b      	mov	r3, r1
 80033dc:	4b0e      	ldr	r3, [pc, #56]	; (8003418 <UART_SetConfig+0x38c>)
 80033de:	fba3 1302 	umull	r1, r3, r3, r2
 80033e2:	095b      	lsrs	r3, r3, #5
 80033e4:	2164      	movs	r1, #100	; 0x64
 80033e6:	fb01 f303 	mul.w	r3, r1, r3
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	011b      	lsls	r3, r3, #4
 80033ee:	3332      	adds	r3, #50	; 0x32
 80033f0:	4a09      	ldr	r2, [pc, #36]	; (8003418 <UART_SetConfig+0x38c>)
 80033f2:	fba2 2303 	umull	r2, r3, r2, r3
 80033f6:	095b      	lsrs	r3, r3, #5
 80033f8:	f003 020f 	and.w	r2, r3, #15
 80033fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4432      	add	r2, r6
 8003402:	609a      	str	r2, [r3, #8]
}
 8003404:	bf00      	nop
 8003406:	377c      	adds	r7, #124	; 0x7c
 8003408:	46bd      	mov	sp, r7
 800340a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800340e:	bf00      	nop
 8003410:	40011000 	.word	0x40011000
 8003414:	40011400 	.word	0x40011400
 8003418:	51eb851f 	.word	0x51eb851f

0800341c <__errno>:
 800341c:	4b01      	ldr	r3, [pc, #4]	; (8003424 <__errno+0x8>)
 800341e:	6818      	ldr	r0, [r3, #0]
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	2000000c 	.word	0x2000000c

08003428 <__libc_init_array>:
 8003428:	b570      	push	{r4, r5, r6, lr}
 800342a:	4d0d      	ldr	r5, [pc, #52]	; (8003460 <__libc_init_array+0x38>)
 800342c:	4c0d      	ldr	r4, [pc, #52]	; (8003464 <__libc_init_array+0x3c>)
 800342e:	1b64      	subs	r4, r4, r5
 8003430:	10a4      	asrs	r4, r4, #2
 8003432:	2600      	movs	r6, #0
 8003434:	42a6      	cmp	r6, r4
 8003436:	d109      	bne.n	800344c <__libc_init_array+0x24>
 8003438:	4d0b      	ldr	r5, [pc, #44]	; (8003468 <__libc_init_array+0x40>)
 800343a:	4c0c      	ldr	r4, [pc, #48]	; (800346c <__libc_init_array+0x44>)
 800343c:	f000 fc4e 	bl	8003cdc <_init>
 8003440:	1b64      	subs	r4, r4, r5
 8003442:	10a4      	asrs	r4, r4, #2
 8003444:	2600      	movs	r6, #0
 8003446:	42a6      	cmp	r6, r4
 8003448:	d105      	bne.n	8003456 <__libc_init_array+0x2e>
 800344a:	bd70      	pop	{r4, r5, r6, pc}
 800344c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003450:	4798      	blx	r3
 8003452:	3601      	adds	r6, #1
 8003454:	e7ee      	b.n	8003434 <__libc_init_array+0xc>
 8003456:	f855 3b04 	ldr.w	r3, [r5], #4
 800345a:	4798      	blx	r3
 800345c:	3601      	adds	r6, #1
 800345e:	e7f2      	b.n	8003446 <__libc_init_array+0x1e>
 8003460:	08003dc0 	.word	0x08003dc0
 8003464:	08003dc0 	.word	0x08003dc0
 8003468:	08003dc0 	.word	0x08003dc0
 800346c:	08003dc4 	.word	0x08003dc4

08003470 <memset>:
 8003470:	4402      	add	r2, r0
 8003472:	4603      	mov	r3, r0
 8003474:	4293      	cmp	r3, r2
 8003476:	d100      	bne.n	800347a <memset+0xa>
 8003478:	4770      	bx	lr
 800347a:	f803 1b01 	strb.w	r1, [r3], #1
 800347e:	e7f9      	b.n	8003474 <memset+0x4>

08003480 <siprintf>:
 8003480:	b40e      	push	{r1, r2, r3}
 8003482:	b500      	push	{lr}
 8003484:	b09c      	sub	sp, #112	; 0x70
 8003486:	ab1d      	add	r3, sp, #116	; 0x74
 8003488:	9002      	str	r0, [sp, #8]
 800348a:	9006      	str	r0, [sp, #24]
 800348c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003490:	4809      	ldr	r0, [pc, #36]	; (80034b8 <siprintf+0x38>)
 8003492:	9107      	str	r1, [sp, #28]
 8003494:	9104      	str	r1, [sp, #16]
 8003496:	4909      	ldr	r1, [pc, #36]	; (80034bc <siprintf+0x3c>)
 8003498:	f853 2b04 	ldr.w	r2, [r3], #4
 800349c:	9105      	str	r1, [sp, #20]
 800349e:	6800      	ldr	r0, [r0, #0]
 80034a0:	9301      	str	r3, [sp, #4]
 80034a2:	a902      	add	r1, sp, #8
 80034a4:	f000 f868 	bl	8003578 <_svfiprintf_r>
 80034a8:	9b02      	ldr	r3, [sp, #8]
 80034aa:	2200      	movs	r2, #0
 80034ac:	701a      	strb	r2, [r3, #0]
 80034ae:	b01c      	add	sp, #112	; 0x70
 80034b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80034b4:	b003      	add	sp, #12
 80034b6:	4770      	bx	lr
 80034b8:	2000000c 	.word	0x2000000c
 80034bc:	ffff0208 	.word	0xffff0208

080034c0 <__ssputs_r>:
 80034c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034c4:	688e      	ldr	r6, [r1, #8]
 80034c6:	429e      	cmp	r6, r3
 80034c8:	4682      	mov	sl, r0
 80034ca:	460c      	mov	r4, r1
 80034cc:	4690      	mov	r8, r2
 80034ce:	461f      	mov	r7, r3
 80034d0:	d838      	bhi.n	8003544 <__ssputs_r+0x84>
 80034d2:	898a      	ldrh	r2, [r1, #12]
 80034d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80034d8:	d032      	beq.n	8003540 <__ssputs_r+0x80>
 80034da:	6825      	ldr	r5, [r4, #0]
 80034dc:	6909      	ldr	r1, [r1, #16]
 80034de:	eba5 0901 	sub.w	r9, r5, r1
 80034e2:	6965      	ldr	r5, [r4, #20]
 80034e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80034e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80034ec:	3301      	adds	r3, #1
 80034ee:	444b      	add	r3, r9
 80034f0:	106d      	asrs	r5, r5, #1
 80034f2:	429d      	cmp	r5, r3
 80034f4:	bf38      	it	cc
 80034f6:	461d      	movcc	r5, r3
 80034f8:	0553      	lsls	r3, r2, #21
 80034fa:	d531      	bpl.n	8003560 <__ssputs_r+0xa0>
 80034fc:	4629      	mov	r1, r5
 80034fe:	f000 fb47 	bl	8003b90 <_malloc_r>
 8003502:	4606      	mov	r6, r0
 8003504:	b950      	cbnz	r0, 800351c <__ssputs_r+0x5c>
 8003506:	230c      	movs	r3, #12
 8003508:	f8ca 3000 	str.w	r3, [sl]
 800350c:	89a3      	ldrh	r3, [r4, #12]
 800350e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003512:	81a3      	strh	r3, [r4, #12]
 8003514:	f04f 30ff 	mov.w	r0, #4294967295
 8003518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800351c:	6921      	ldr	r1, [r4, #16]
 800351e:	464a      	mov	r2, r9
 8003520:	f000 fabe 	bl	8003aa0 <memcpy>
 8003524:	89a3      	ldrh	r3, [r4, #12]
 8003526:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800352a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800352e:	81a3      	strh	r3, [r4, #12]
 8003530:	6126      	str	r6, [r4, #16]
 8003532:	6165      	str	r5, [r4, #20]
 8003534:	444e      	add	r6, r9
 8003536:	eba5 0509 	sub.w	r5, r5, r9
 800353a:	6026      	str	r6, [r4, #0]
 800353c:	60a5      	str	r5, [r4, #8]
 800353e:	463e      	mov	r6, r7
 8003540:	42be      	cmp	r6, r7
 8003542:	d900      	bls.n	8003546 <__ssputs_r+0x86>
 8003544:	463e      	mov	r6, r7
 8003546:	4632      	mov	r2, r6
 8003548:	6820      	ldr	r0, [r4, #0]
 800354a:	4641      	mov	r1, r8
 800354c:	f000 fab6 	bl	8003abc <memmove>
 8003550:	68a3      	ldr	r3, [r4, #8]
 8003552:	6822      	ldr	r2, [r4, #0]
 8003554:	1b9b      	subs	r3, r3, r6
 8003556:	4432      	add	r2, r6
 8003558:	60a3      	str	r3, [r4, #8]
 800355a:	6022      	str	r2, [r4, #0]
 800355c:	2000      	movs	r0, #0
 800355e:	e7db      	b.n	8003518 <__ssputs_r+0x58>
 8003560:	462a      	mov	r2, r5
 8003562:	f000 fb6f 	bl	8003c44 <_realloc_r>
 8003566:	4606      	mov	r6, r0
 8003568:	2800      	cmp	r0, #0
 800356a:	d1e1      	bne.n	8003530 <__ssputs_r+0x70>
 800356c:	6921      	ldr	r1, [r4, #16]
 800356e:	4650      	mov	r0, sl
 8003570:	f000 fabe 	bl	8003af0 <_free_r>
 8003574:	e7c7      	b.n	8003506 <__ssputs_r+0x46>
	...

08003578 <_svfiprintf_r>:
 8003578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800357c:	4698      	mov	r8, r3
 800357e:	898b      	ldrh	r3, [r1, #12]
 8003580:	061b      	lsls	r3, r3, #24
 8003582:	b09d      	sub	sp, #116	; 0x74
 8003584:	4607      	mov	r7, r0
 8003586:	460d      	mov	r5, r1
 8003588:	4614      	mov	r4, r2
 800358a:	d50e      	bpl.n	80035aa <_svfiprintf_r+0x32>
 800358c:	690b      	ldr	r3, [r1, #16]
 800358e:	b963      	cbnz	r3, 80035aa <_svfiprintf_r+0x32>
 8003590:	2140      	movs	r1, #64	; 0x40
 8003592:	f000 fafd 	bl	8003b90 <_malloc_r>
 8003596:	6028      	str	r0, [r5, #0]
 8003598:	6128      	str	r0, [r5, #16]
 800359a:	b920      	cbnz	r0, 80035a6 <_svfiprintf_r+0x2e>
 800359c:	230c      	movs	r3, #12
 800359e:	603b      	str	r3, [r7, #0]
 80035a0:	f04f 30ff 	mov.w	r0, #4294967295
 80035a4:	e0d1      	b.n	800374a <_svfiprintf_r+0x1d2>
 80035a6:	2340      	movs	r3, #64	; 0x40
 80035a8:	616b      	str	r3, [r5, #20]
 80035aa:	2300      	movs	r3, #0
 80035ac:	9309      	str	r3, [sp, #36]	; 0x24
 80035ae:	2320      	movs	r3, #32
 80035b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80035b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80035b8:	2330      	movs	r3, #48	; 0x30
 80035ba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003764 <_svfiprintf_r+0x1ec>
 80035be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80035c2:	f04f 0901 	mov.w	r9, #1
 80035c6:	4623      	mov	r3, r4
 80035c8:	469a      	mov	sl, r3
 80035ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80035ce:	b10a      	cbz	r2, 80035d4 <_svfiprintf_r+0x5c>
 80035d0:	2a25      	cmp	r2, #37	; 0x25
 80035d2:	d1f9      	bne.n	80035c8 <_svfiprintf_r+0x50>
 80035d4:	ebba 0b04 	subs.w	fp, sl, r4
 80035d8:	d00b      	beq.n	80035f2 <_svfiprintf_r+0x7a>
 80035da:	465b      	mov	r3, fp
 80035dc:	4622      	mov	r2, r4
 80035de:	4629      	mov	r1, r5
 80035e0:	4638      	mov	r0, r7
 80035e2:	f7ff ff6d 	bl	80034c0 <__ssputs_r>
 80035e6:	3001      	adds	r0, #1
 80035e8:	f000 80aa 	beq.w	8003740 <_svfiprintf_r+0x1c8>
 80035ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80035ee:	445a      	add	r2, fp
 80035f0:	9209      	str	r2, [sp, #36]	; 0x24
 80035f2:	f89a 3000 	ldrb.w	r3, [sl]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	f000 80a2 	beq.w	8003740 <_svfiprintf_r+0x1c8>
 80035fc:	2300      	movs	r3, #0
 80035fe:	f04f 32ff 	mov.w	r2, #4294967295
 8003602:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003606:	f10a 0a01 	add.w	sl, sl, #1
 800360a:	9304      	str	r3, [sp, #16]
 800360c:	9307      	str	r3, [sp, #28]
 800360e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003612:	931a      	str	r3, [sp, #104]	; 0x68
 8003614:	4654      	mov	r4, sl
 8003616:	2205      	movs	r2, #5
 8003618:	f814 1b01 	ldrb.w	r1, [r4], #1
 800361c:	4851      	ldr	r0, [pc, #324]	; (8003764 <_svfiprintf_r+0x1ec>)
 800361e:	f7fc fde7 	bl	80001f0 <memchr>
 8003622:	9a04      	ldr	r2, [sp, #16]
 8003624:	b9d8      	cbnz	r0, 800365e <_svfiprintf_r+0xe6>
 8003626:	06d0      	lsls	r0, r2, #27
 8003628:	bf44      	itt	mi
 800362a:	2320      	movmi	r3, #32
 800362c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003630:	0711      	lsls	r1, r2, #28
 8003632:	bf44      	itt	mi
 8003634:	232b      	movmi	r3, #43	; 0x2b
 8003636:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800363a:	f89a 3000 	ldrb.w	r3, [sl]
 800363e:	2b2a      	cmp	r3, #42	; 0x2a
 8003640:	d015      	beq.n	800366e <_svfiprintf_r+0xf6>
 8003642:	9a07      	ldr	r2, [sp, #28]
 8003644:	4654      	mov	r4, sl
 8003646:	2000      	movs	r0, #0
 8003648:	f04f 0c0a 	mov.w	ip, #10
 800364c:	4621      	mov	r1, r4
 800364e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003652:	3b30      	subs	r3, #48	; 0x30
 8003654:	2b09      	cmp	r3, #9
 8003656:	d94e      	bls.n	80036f6 <_svfiprintf_r+0x17e>
 8003658:	b1b0      	cbz	r0, 8003688 <_svfiprintf_r+0x110>
 800365a:	9207      	str	r2, [sp, #28]
 800365c:	e014      	b.n	8003688 <_svfiprintf_r+0x110>
 800365e:	eba0 0308 	sub.w	r3, r0, r8
 8003662:	fa09 f303 	lsl.w	r3, r9, r3
 8003666:	4313      	orrs	r3, r2
 8003668:	9304      	str	r3, [sp, #16]
 800366a:	46a2      	mov	sl, r4
 800366c:	e7d2      	b.n	8003614 <_svfiprintf_r+0x9c>
 800366e:	9b03      	ldr	r3, [sp, #12]
 8003670:	1d19      	adds	r1, r3, #4
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	9103      	str	r1, [sp, #12]
 8003676:	2b00      	cmp	r3, #0
 8003678:	bfbb      	ittet	lt
 800367a:	425b      	neglt	r3, r3
 800367c:	f042 0202 	orrlt.w	r2, r2, #2
 8003680:	9307      	strge	r3, [sp, #28]
 8003682:	9307      	strlt	r3, [sp, #28]
 8003684:	bfb8      	it	lt
 8003686:	9204      	strlt	r2, [sp, #16]
 8003688:	7823      	ldrb	r3, [r4, #0]
 800368a:	2b2e      	cmp	r3, #46	; 0x2e
 800368c:	d10c      	bne.n	80036a8 <_svfiprintf_r+0x130>
 800368e:	7863      	ldrb	r3, [r4, #1]
 8003690:	2b2a      	cmp	r3, #42	; 0x2a
 8003692:	d135      	bne.n	8003700 <_svfiprintf_r+0x188>
 8003694:	9b03      	ldr	r3, [sp, #12]
 8003696:	1d1a      	adds	r2, r3, #4
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	9203      	str	r2, [sp, #12]
 800369c:	2b00      	cmp	r3, #0
 800369e:	bfb8      	it	lt
 80036a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80036a4:	3402      	adds	r4, #2
 80036a6:	9305      	str	r3, [sp, #20]
 80036a8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003774 <_svfiprintf_r+0x1fc>
 80036ac:	7821      	ldrb	r1, [r4, #0]
 80036ae:	2203      	movs	r2, #3
 80036b0:	4650      	mov	r0, sl
 80036b2:	f7fc fd9d 	bl	80001f0 <memchr>
 80036b6:	b140      	cbz	r0, 80036ca <_svfiprintf_r+0x152>
 80036b8:	2340      	movs	r3, #64	; 0x40
 80036ba:	eba0 000a 	sub.w	r0, r0, sl
 80036be:	fa03 f000 	lsl.w	r0, r3, r0
 80036c2:	9b04      	ldr	r3, [sp, #16]
 80036c4:	4303      	orrs	r3, r0
 80036c6:	3401      	adds	r4, #1
 80036c8:	9304      	str	r3, [sp, #16]
 80036ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036ce:	4826      	ldr	r0, [pc, #152]	; (8003768 <_svfiprintf_r+0x1f0>)
 80036d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80036d4:	2206      	movs	r2, #6
 80036d6:	f7fc fd8b 	bl	80001f0 <memchr>
 80036da:	2800      	cmp	r0, #0
 80036dc:	d038      	beq.n	8003750 <_svfiprintf_r+0x1d8>
 80036de:	4b23      	ldr	r3, [pc, #140]	; (800376c <_svfiprintf_r+0x1f4>)
 80036e0:	bb1b      	cbnz	r3, 800372a <_svfiprintf_r+0x1b2>
 80036e2:	9b03      	ldr	r3, [sp, #12]
 80036e4:	3307      	adds	r3, #7
 80036e6:	f023 0307 	bic.w	r3, r3, #7
 80036ea:	3308      	adds	r3, #8
 80036ec:	9303      	str	r3, [sp, #12]
 80036ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036f0:	4433      	add	r3, r6
 80036f2:	9309      	str	r3, [sp, #36]	; 0x24
 80036f4:	e767      	b.n	80035c6 <_svfiprintf_r+0x4e>
 80036f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80036fa:	460c      	mov	r4, r1
 80036fc:	2001      	movs	r0, #1
 80036fe:	e7a5      	b.n	800364c <_svfiprintf_r+0xd4>
 8003700:	2300      	movs	r3, #0
 8003702:	3401      	adds	r4, #1
 8003704:	9305      	str	r3, [sp, #20]
 8003706:	4619      	mov	r1, r3
 8003708:	f04f 0c0a 	mov.w	ip, #10
 800370c:	4620      	mov	r0, r4
 800370e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003712:	3a30      	subs	r2, #48	; 0x30
 8003714:	2a09      	cmp	r2, #9
 8003716:	d903      	bls.n	8003720 <_svfiprintf_r+0x1a8>
 8003718:	2b00      	cmp	r3, #0
 800371a:	d0c5      	beq.n	80036a8 <_svfiprintf_r+0x130>
 800371c:	9105      	str	r1, [sp, #20]
 800371e:	e7c3      	b.n	80036a8 <_svfiprintf_r+0x130>
 8003720:	fb0c 2101 	mla	r1, ip, r1, r2
 8003724:	4604      	mov	r4, r0
 8003726:	2301      	movs	r3, #1
 8003728:	e7f0      	b.n	800370c <_svfiprintf_r+0x194>
 800372a:	ab03      	add	r3, sp, #12
 800372c:	9300      	str	r3, [sp, #0]
 800372e:	462a      	mov	r2, r5
 8003730:	4b0f      	ldr	r3, [pc, #60]	; (8003770 <_svfiprintf_r+0x1f8>)
 8003732:	a904      	add	r1, sp, #16
 8003734:	4638      	mov	r0, r7
 8003736:	f3af 8000 	nop.w
 800373a:	1c42      	adds	r2, r0, #1
 800373c:	4606      	mov	r6, r0
 800373e:	d1d6      	bne.n	80036ee <_svfiprintf_r+0x176>
 8003740:	89ab      	ldrh	r3, [r5, #12]
 8003742:	065b      	lsls	r3, r3, #25
 8003744:	f53f af2c 	bmi.w	80035a0 <_svfiprintf_r+0x28>
 8003748:	9809      	ldr	r0, [sp, #36]	; 0x24
 800374a:	b01d      	add	sp, #116	; 0x74
 800374c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003750:	ab03      	add	r3, sp, #12
 8003752:	9300      	str	r3, [sp, #0]
 8003754:	462a      	mov	r2, r5
 8003756:	4b06      	ldr	r3, [pc, #24]	; (8003770 <_svfiprintf_r+0x1f8>)
 8003758:	a904      	add	r1, sp, #16
 800375a:	4638      	mov	r0, r7
 800375c:	f000 f87a 	bl	8003854 <_printf_i>
 8003760:	e7eb      	b.n	800373a <_svfiprintf_r+0x1c2>
 8003762:	bf00      	nop
 8003764:	08003d84 	.word	0x08003d84
 8003768:	08003d8e 	.word	0x08003d8e
 800376c:	00000000 	.word	0x00000000
 8003770:	080034c1 	.word	0x080034c1
 8003774:	08003d8a 	.word	0x08003d8a

08003778 <_printf_common>:
 8003778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800377c:	4616      	mov	r6, r2
 800377e:	4699      	mov	r9, r3
 8003780:	688a      	ldr	r2, [r1, #8]
 8003782:	690b      	ldr	r3, [r1, #16]
 8003784:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003788:	4293      	cmp	r3, r2
 800378a:	bfb8      	it	lt
 800378c:	4613      	movlt	r3, r2
 800378e:	6033      	str	r3, [r6, #0]
 8003790:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003794:	4607      	mov	r7, r0
 8003796:	460c      	mov	r4, r1
 8003798:	b10a      	cbz	r2, 800379e <_printf_common+0x26>
 800379a:	3301      	adds	r3, #1
 800379c:	6033      	str	r3, [r6, #0]
 800379e:	6823      	ldr	r3, [r4, #0]
 80037a0:	0699      	lsls	r1, r3, #26
 80037a2:	bf42      	ittt	mi
 80037a4:	6833      	ldrmi	r3, [r6, #0]
 80037a6:	3302      	addmi	r3, #2
 80037a8:	6033      	strmi	r3, [r6, #0]
 80037aa:	6825      	ldr	r5, [r4, #0]
 80037ac:	f015 0506 	ands.w	r5, r5, #6
 80037b0:	d106      	bne.n	80037c0 <_printf_common+0x48>
 80037b2:	f104 0a19 	add.w	sl, r4, #25
 80037b6:	68e3      	ldr	r3, [r4, #12]
 80037b8:	6832      	ldr	r2, [r6, #0]
 80037ba:	1a9b      	subs	r3, r3, r2
 80037bc:	42ab      	cmp	r3, r5
 80037be:	dc26      	bgt.n	800380e <_printf_common+0x96>
 80037c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80037c4:	1e13      	subs	r3, r2, #0
 80037c6:	6822      	ldr	r2, [r4, #0]
 80037c8:	bf18      	it	ne
 80037ca:	2301      	movne	r3, #1
 80037cc:	0692      	lsls	r2, r2, #26
 80037ce:	d42b      	bmi.n	8003828 <_printf_common+0xb0>
 80037d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80037d4:	4649      	mov	r1, r9
 80037d6:	4638      	mov	r0, r7
 80037d8:	47c0      	blx	r8
 80037da:	3001      	adds	r0, #1
 80037dc:	d01e      	beq.n	800381c <_printf_common+0xa4>
 80037de:	6823      	ldr	r3, [r4, #0]
 80037e0:	68e5      	ldr	r5, [r4, #12]
 80037e2:	6832      	ldr	r2, [r6, #0]
 80037e4:	f003 0306 	and.w	r3, r3, #6
 80037e8:	2b04      	cmp	r3, #4
 80037ea:	bf08      	it	eq
 80037ec:	1aad      	subeq	r5, r5, r2
 80037ee:	68a3      	ldr	r3, [r4, #8]
 80037f0:	6922      	ldr	r2, [r4, #16]
 80037f2:	bf0c      	ite	eq
 80037f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80037f8:	2500      	movne	r5, #0
 80037fa:	4293      	cmp	r3, r2
 80037fc:	bfc4      	itt	gt
 80037fe:	1a9b      	subgt	r3, r3, r2
 8003800:	18ed      	addgt	r5, r5, r3
 8003802:	2600      	movs	r6, #0
 8003804:	341a      	adds	r4, #26
 8003806:	42b5      	cmp	r5, r6
 8003808:	d11a      	bne.n	8003840 <_printf_common+0xc8>
 800380a:	2000      	movs	r0, #0
 800380c:	e008      	b.n	8003820 <_printf_common+0xa8>
 800380e:	2301      	movs	r3, #1
 8003810:	4652      	mov	r2, sl
 8003812:	4649      	mov	r1, r9
 8003814:	4638      	mov	r0, r7
 8003816:	47c0      	blx	r8
 8003818:	3001      	adds	r0, #1
 800381a:	d103      	bne.n	8003824 <_printf_common+0xac>
 800381c:	f04f 30ff 	mov.w	r0, #4294967295
 8003820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003824:	3501      	adds	r5, #1
 8003826:	e7c6      	b.n	80037b6 <_printf_common+0x3e>
 8003828:	18e1      	adds	r1, r4, r3
 800382a:	1c5a      	adds	r2, r3, #1
 800382c:	2030      	movs	r0, #48	; 0x30
 800382e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003832:	4422      	add	r2, r4
 8003834:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003838:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800383c:	3302      	adds	r3, #2
 800383e:	e7c7      	b.n	80037d0 <_printf_common+0x58>
 8003840:	2301      	movs	r3, #1
 8003842:	4622      	mov	r2, r4
 8003844:	4649      	mov	r1, r9
 8003846:	4638      	mov	r0, r7
 8003848:	47c0      	blx	r8
 800384a:	3001      	adds	r0, #1
 800384c:	d0e6      	beq.n	800381c <_printf_common+0xa4>
 800384e:	3601      	adds	r6, #1
 8003850:	e7d9      	b.n	8003806 <_printf_common+0x8e>
	...

08003854 <_printf_i>:
 8003854:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003858:	460c      	mov	r4, r1
 800385a:	4691      	mov	r9, r2
 800385c:	7e27      	ldrb	r7, [r4, #24]
 800385e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003860:	2f78      	cmp	r7, #120	; 0x78
 8003862:	4680      	mov	r8, r0
 8003864:	469a      	mov	sl, r3
 8003866:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800386a:	d807      	bhi.n	800387c <_printf_i+0x28>
 800386c:	2f62      	cmp	r7, #98	; 0x62
 800386e:	d80a      	bhi.n	8003886 <_printf_i+0x32>
 8003870:	2f00      	cmp	r7, #0
 8003872:	f000 80d8 	beq.w	8003a26 <_printf_i+0x1d2>
 8003876:	2f58      	cmp	r7, #88	; 0x58
 8003878:	f000 80a3 	beq.w	80039c2 <_printf_i+0x16e>
 800387c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003880:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003884:	e03a      	b.n	80038fc <_printf_i+0xa8>
 8003886:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800388a:	2b15      	cmp	r3, #21
 800388c:	d8f6      	bhi.n	800387c <_printf_i+0x28>
 800388e:	a001      	add	r0, pc, #4	; (adr r0, 8003894 <_printf_i+0x40>)
 8003890:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003894:	080038ed 	.word	0x080038ed
 8003898:	08003901 	.word	0x08003901
 800389c:	0800387d 	.word	0x0800387d
 80038a0:	0800387d 	.word	0x0800387d
 80038a4:	0800387d 	.word	0x0800387d
 80038a8:	0800387d 	.word	0x0800387d
 80038ac:	08003901 	.word	0x08003901
 80038b0:	0800387d 	.word	0x0800387d
 80038b4:	0800387d 	.word	0x0800387d
 80038b8:	0800387d 	.word	0x0800387d
 80038bc:	0800387d 	.word	0x0800387d
 80038c0:	08003a0d 	.word	0x08003a0d
 80038c4:	08003931 	.word	0x08003931
 80038c8:	080039ef 	.word	0x080039ef
 80038cc:	0800387d 	.word	0x0800387d
 80038d0:	0800387d 	.word	0x0800387d
 80038d4:	08003a2f 	.word	0x08003a2f
 80038d8:	0800387d 	.word	0x0800387d
 80038dc:	08003931 	.word	0x08003931
 80038e0:	0800387d 	.word	0x0800387d
 80038e4:	0800387d 	.word	0x0800387d
 80038e8:	080039f7 	.word	0x080039f7
 80038ec:	680b      	ldr	r3, [r1, #0]
 80038ee:	1d1a      	adds	r2, r3, #4
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	600a      	str	r2, [r1, #0]
 80038f4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80038f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80038fc:	2301      	movs	r3, #1
 80038fe:	e0a3      	b.n	8003a48 <_printf_i+0x1f4>
 8003900:	6825      	ldr	r5, [r4, #0]
 8003902:	6808      	ldr	r0, [r1, #0]
 8003904:	062e      	lsls	r6, r5, #24
 8003906:	f100 0304 	add.w	r3, r0, #4
 800390a:	d50a      	bpl.n	8003922 <_printf_i+0xce>
 800390c:	6805      	ldr	r5, [r0, #0]
 800390e:	600b      	str	r3, [r1, #0]
 8003910:	2d00      	cmp	r5, #0
 8003912:	da03      	bge.n	800391c <_printf_i+0xc8>
 8003914:	232d      	movs	r3, #45	; 0x2d
 8003916:	426d      	negs	r5, r5
 8003918:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800391c:	485e      	ldr	r0, [pc, #376]	; (8003a98 <_printf_i+0x244>)
 800391e:	230a      	movs	r3, #10
 8003920:	e019      	b.n	8003956 <_printf_i+0x102>
 8003922:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003926:	6805      	ldr	r5, [r0, #0]
 8003928:	600b      	str	r3, [r1, #0]
 800392a:	bf18      	it	ne
 800392c:	b22d      	sxthne	r5, r5
 800392e:	e7ef      	b.n	8003910 <_printf_i+0xbc>
 8003930:	680b      	ldr	r3, [r1, #0]
 8003932:	6825      	ldr	r5, [r4, #0]
 8003934:	1d18      	adds	r0, r3, #4
 8003936:	6008      	str	r0, [r1, #0]
 8003938:	0628      	lsls	r0, r5, #24
 800393a:	d501      	bpl.n	8003940 <_printf_i+0xec>
 800393c:	681d      	ldr	r5, [r3, #0]
 800393e:	e002      	b.n	8003946 <_printf_i+0xf2>
 8003940:	0669      	lsls	r1, r5, #25
 8003942:	d5fb      	bpl.n	800393c <_printf_i+0xe8>
 8003944:	881d      	ldrh	r5, [r3, #0]
 8003946:	4854      	ldr	r0, [pc, #336]	; (8003a98 <_printf_i+0x244>)
 8003948:	2f6f      	cmp	r7, #111	; 0x6f
 800394a:	bf0c      	ite	eq
 800394c:	2308      	moveq	r3, #8
 800394e:	230a      	movne	r3, #10
 8003950:	2100      	movs	r1, #0
 8003952:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003956:	6866      	ldr	r6, [r4, #4]
 8003958:	60a6      	str	r6, [r4, #8]
 800395a:	2e00      	cmp	r6, #0
 800395c:	bfa2      	ittt	ge
 800395e:	6821      	ldrge	r1, [r4, #0]
 8003960:	f021 0104 	bicge.w	r1, r1, #4
 8003964:	6021      	strge	r1, [r4, #0]
 8003966:	b90d      	cbnz	r5, 800396c <_printf_i+0x118>
 8003968:	2e00      	cmp	r6, #0
 800396a:	d04d      	beq.n	8003a08 <_printf_i+0x1b4>
 800396c:	4616      	mov	r6, r2
 800396e:	fbb5 f1f3 	udiv	r1, r5, r3
 8003972:	fb03 5711 	mls	r7, r3, r1, r5
 8003976:	5dc7      	ldrb	r7, [r0, r7]
 8003978:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800397c:	462f      	mov	r7, r5
 800397e:	42bb      	cmp	r3, r7
 8003980:	460d      	mov	r5, r1
 8003982:	d9f4      	bls.n	800396e <_printf_i+0x11a>
 8003984:	2b08      	cmp	r3, #8
 8003986:	d10b      	bne.n	80039a0 <_printf_i+0x14c>
 8003988:	6823      	ldr	r3, [r4, #0]
 800398a:	07df      	lsls	r7, r3, #31
 800398c:	d508      	bpl.n	80039a0 <_printf_i+0x14c>
 800398e:	6923      	ldr	r3, [r4, #16]
 8003990:	6861      	ldr	r1, [r4, #4]
 8003992:	4299      	cmp	r1, r3
 8003994:	bfde      	ittt	le
 8003996:	2330      	movle	r3, #48	; 0x30
 8003998:	f806 3c01 	strble.w	r3, [r6, #-1]
 800399c:	f106 36ff 	addle.w	r6, r6, #4294967295
 80039a0:	1b92      	subs	r2, r2, r6
 80039a2:	6122      	str	r2, [r4, #16]
 80039a4:	f8cd a000 	str.w	sl, [sp]
 80039a8:	464b      	mov	r3, r9
 80039aa:	aa03      	add	r2, sp, #12
 80039ac:	4621      	mov	r1, r4
 80039ae:	4640      	mov	r0, r8
 80039b0:	f7ff fee2 	bl	8003778 <_printf_common>
 80039b4:	3001      	adds	r0, #1
 80039b6:	d14c      	bne.n	8003a52 <_printf_i+0x1fe>
 80039b8:	f04f 30ff 	mov.w	r0, #4294967295
 80039bc:	b004      	add	sp, #16
 80039be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039c2:	4835      	ldr	r0, [pc, #212]	; (8003a98 <_printf_i+0x244>)
 80039c4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80039c8:	6823      	ldr	r3, [r4, #0]
 80039ca:	680e      	ldr	r6, [r1, #0]
 80039cc:	061f      	lsls	r7, r3, #24
 80039ce:	f856 5b04 	ldr.w	r5, [r6], #4
 80039d2:	600e      	str	r6, [r1, #0]
 80039d4:	d514      	bpl.n	8003a00 <_printf_i+0x1ac>
 80039d6:	07d9      	lsls	r1, r3, #31
 80039d8:	bf44      	itt	mi
 80039da:	f043 0320 	orrmi.w	r3, r3, #32
 80039de:	6023      	strmi	r3, [r4, #0]
 80039e0:	b91d      	cbnz	r5, 80039ea <_printf_i+0x196>
 80039e2:	6823      	ldr	r3, [r4, #0]
 80039e4:	f023 0320 	bic.w	r3, r3, #32
 80039e8:	6023      	str	r3, [r4, #0]
 80039ea:	2310      	movs	r3, #16
 80039ec:	e7b0      	b.n	8003950 <_printf_i+0xfc>
 80039ee:	6823      	ldr	r3, [r4, #0]
 80039f0:	f043 0320 	orr.w	r3, r3, #32
 80039f4:	6023      	str	r3, [r4, #0]
 80039f6:	2378      	movs	r3, #120	; 0x78
 80039f8:	4828      	ldr	r0, [pc, #160]	; (8003a9c <_printf_i+0x248>)
 80039fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80039fe:	e7e3      	b.n	80039c8 <_printf_i+0x174>
 8003a00:	065e      	lsls	r6, r3, #25
 8003a02:	bf48      	it	mi
 8003a04:	b2ad      	uxthmi	r5, r5
 8003a06:	e7e6      	b.n	80039d6 <_printf_i+0x182>
 8003a08:	4616      	mov	r6, r2
 8003a0a:	e7bb      	b.n	8003984 <_printf_i+0x130>
 8003a0c:	680b      	ldr	r3, [r1, #0]
 8003a0e:	6826      	ldr	r6, [r4, #0]
 8003a10:	6960      	ldr	r0, [r4, #20]
 8003a12:	1d1d      	adds	r5, r3, #4
 8003a14:	600d      	str	r5, [r1, #0]
 8003a16:	0635      	lsls	r5, r6, #24
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	d501      	bpl.n	8003a20 <_printf_i+0x1cc>
 8003a1c:	6018      	str	r0, [r3, #0]
 8003a1e:	e002      	b.n	8003a26 <_printf_i+0x1d2>
 8003a20:	0671      	lsls	r1, r6, #25
 8003a22:	d5fb      	bpl.n	8003a1c <_printf_i+0x1c8>
 8003a24:	8018      	strh	r0, [r3, #0]
 8003a26:	2300      	movs	r3, #0
 8003a28:	6123      	str	r3, [r4, #16]
 8003a2a:	4616      	mov	r6, r2
 8003a2c:	e7ba      	b.n	80039a4 <_printf_i+0x150>
 8003a2e:	680b      	ldr	r3, [r1, #0]
 8003a30:	1d1a      	adds	r2, r3, #4
 8003a32:	600a      	str	r2, [r1, #0]
 8003a34:	681e      	ldr	r6, [r3, #0]
 8003a36:	6862      	ldr	r2, [r4, #4]
 8003a38:	2100      	movs	r1, #0
 8003a3a:	4630      	mov	r0, r6
 8003a3c:	f7fc fbd8 	bl	80001f0 <memchr>
 8003a40:	b108      	cbz	r0, 8003a46 <_printf_i+0x1f2>
 8003a42:	1b80      	subs	r0, r0, r6
 8003a44:	6060      	str	r0, [r4, #4]
 8003a46:	6863      	ldr	r3, [r4, #4]
 8003a48:	6123      	str	r3, [r4, #16]
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a50:	e7a8      	b.n	80039a4 <_printf_i+0x150>
 8003a52:	6923      	ldr	r3, [r4, #16]
 8003a54:	4632      	mov	r2, r6
 8003a56:	4649      	mov	r1, r9
 8003a58:	4640      	mov	r0, r8
 8003a5a:	47d0      	blx	sl
 8003a5c:	3001      	adds	r0, #1
 8003a5e:	d0ab      	beq.n	80039b8 <_printf_i+0x164>
 8003a60:	6823      	ldr	r3, [r4, #0]
 8003a62:	079b      	lsls	r3, r3, #30
 8003a64:	d413      	bmi.n	8003a8e <_printf_i+0x23a>
 8003a66:	68e0      	ldr	r0, [r4, #12]
 8003a68:	9b03      	ldr	r3, [sp, #12]
 8003a6a:	4298      	cmp	r0, r3
 8003a6c:	bfb8      	it	lt
 8003a6e:	4618      	movlt	r0, r3
 8003a70:	e7a4      	b.n	80039bc <_printf_i+0x168>
 8003a72:	2301      	movs	r3, #1
 8003a74:	4632      	mov	r2, r6
 8003a76:	4649      	mov	r1, r9
 8003a78:	4640      	mov	r0, r8
 8003a7a:	47d0      	blx	sl
 8003a7c:	3001      	adds	r0, #1
 8003a7e:	d09b      	beq.n	80039b8 <_printf_i+0x164>
 8003a80:	3501      	adds	r5, #1
 8003a82:	68e3      	ldr	r3, [r4, #12]
 8003a84:	9903      	ldr	r1, [sp, #12]
 8003a86:	1a5b      	subs	r3, r3, r1
 8003a88:	42ab      	cmp	r3, r5
 8003a8a:	dcf2      	bgt.n	8003a72 <_printf_i+0x21e>
 8003a8c:	e7eb      	b.n	8003a66 <_printf_i+0x212>
 8003a8e:	2500      	movs	r5, #0
 8003a90:	f104 0619 	add.w	r6, r4, #25
 8003a94:	e7f5      	b.n	8003a82 <_printf_i+0x22e>
 8003a96:	bf00      	nop
 8003a98:	08003d95 	.word	0x08003d95
 8003a9c:	08003da6 	.word	0x08003da6

08003aa0 <memcpy>:
 8003aa0:	440a      	add	r2, r1
 8003aa2:	4291      	cmp	r1, r2
 8003aa4:	f100 33ff 	add.w	r3, r0, #4294967295
 8003aa8:	d100      	bne.n	8003aac <memcpy+0xc>
 8003aaa:	4770      	bx	lr
 8003aac:	b510      	push	{r4, lr}
 8003aae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ab2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ab6:	4291      	cmp	r1, r2
 8003ab8:	d1f9      	bne.n	8003aae <memcpy+0xe>
 8003aba:	bd10      	pop	{r4, pc}

08003abc <memmove>:
 8003abc:	4288      	cmp	r0, r1
 8003abe:	b510      	push	{r4, lr}
 8003ac0:	eb01 0402 	add.w	r4, r1, r2
 8003ac4:	d902      	bls.n	8003acc <memmove+0x10>
 8003ac6:	4284      	cmp	r4, r0
 8003ac8:	4623      	mov	r3, r4
 8003aca:	d807      	bhi.n	8003adc <memmove+0x20>
 8003acc:	1e43      	subs	r3, r0, #1
 8003ace:	42a1      	cmp	r1, r4
 8003ad0:	d008      	beq.n	8003ae4 <memmove+0x28>
 8003ad2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003ad6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003ada:	e7f8      	b.n	8003ace <memmove+0x12>
 8003adc:	4402      	add	r2, r0
 8003ade:	4601      	mov	r1, r0
 8003ae0:	428a      	cmp	r2, r1
 8003ae2:	d100      	bne.n	8003ae6 <memmove+0x2a>
 8003ae4:	bd10      	pop	{r4, pc}
 8003ae6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003aea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003aee:	e7f7      	b.n	8003ae0 <memmove+0x24>

08003af0 <_free_r>:
 8003af0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003af2:	2900      	cmp	r1, #0
 8003af4:	d048      	beq.n	8003b88 <_free_r+0x98>
 8003af6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003afa:	9001      	str	r0, [sp, #4]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	f1a1 0404 	sub.w	r4, r1, #4
 8003b02:	bfb8      	it	lt
 8003b04:	18e4      	addlt	r4, r4, r3
 8003b06:	f000 f8d3 	bl	8003cb0 <__malloc_lock>
 8003b0a:	4a20      	ldr	r2, [pc, #128]	; (8003b8c <_free_r+0x9c>)
 8003b0c:	9801      	ldr	r0, [sp, #4]
 8003b0e:	6813      	ldr	r3, [r2, #0]
 8003b10:	4615      	mov	r5, r2
 8003b12:	b933      	cbnz	r3, 8003b22 <_free_r+0x32>
 8003b14:	6063      	str	r3, [r4, #4]
 8003b16:	6014      	str	r4, [r2, #0]
 8003b18:	b003      	add	sp, #12
 8003b1a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003b1e:	f000 b8cd 	b.w	8003cbc <__malloc_unlock>
 8003b22:	42a3      	cmp	r3, r4
 8003b24:	d90b      	bls.n	8003b3e <_free_r+0x4e>
 8003b26:	6821      	ldr	r1, [r4, #0]
 8003b28:	1862      	adds	r2, r4, r1
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	bf04      	itt	eq
 8003b2e:	681a      	ldreq	r2, [r3, #0]
 8003b30:	685b      	ldreq	r3, [r3, #4]
 8003b32:	6063      	str	r3, [r4, #4]
 8003b34:	bf04      	itt	eq
 8003b36:	1852      	addeq	r2, r2, r1
 8003b38:	6022      	streq	r2, [r4, #0]
 8003b3a:	602c      	str	r4, [r5, #0]
 8003b3c:	e7ec      	b.n	8003b18 <_free_r+0x28>
 8003b3e:	461a      	mov	r2, r3
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	b10b      	cbz	r3, 8003b48 <_free_r+0x58>
 8003b44:	42a3      	cmp	r3, r4
 8003b46:	d9fa      	bls.n	8003b3e <_free_r+0x4e>
 8003b48:	6811      	ldr	r1, [r2, #0]
 8003b4a:	1855      	adds	r5, r2, r1
 8003b4c:	42a5      	cmp	r5, r4
 8003b4e:	d10b      	bne.n	8003b68 <_free_r+0x78>
 8003b50:	6824      	ldr	r4, [r4, #0]
 8003b52:	4421      	add	r1, r4
 8003b54:	1854      	adds	r4, r2, r1
 8003b56:	42a3      	cmp	r3, r4
 8003b58:	6011      	str	r1, [r2, #0]
 8003b5a:	d1dd      	bne.n	8003b18 <_free_r+0x28>
 8003b5c:	681c      	ldr	r4, [r3, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	6053      	str	r3, [r2, #4]
 8003b62:	4421      	add	r1, r4
 8003b64:	6011      	str	r1, [r2, #0]
 8003b66:	e7d7      	b.n	8003b18 <_free_r+0x28>
 8003b68:	d902      	bls.n	8003b70 <_free_r+0x80>
 8003b6a:	230c      	movs	r3, #12
 8003b6c:	6003      	str	r3, [r0, #0]
 8003b6e:	e7d3      	b.n	8003b18 <_free_r+0x28>
 8003b70:	6825      	ldr	r5, [r4, #0]
 8003b72:	1961      	adds	r1, r4, r5
 8003b74:	428b      	cmp	r3, r1
 8003b76:	bf04      	itt	eq
 8003b78:	6819      	ldreq	r1, [r3, #0]
 8003b7a:	685b      	ldreq	r3, [r3, #4]
 8003b7c:	6063      	str	r3, [r4, #4]
 8003b7e:	bf04      	itt	eq
 8003b80:	1949      	addeq	r1, r1, r5
 8003b82:	6021      	streq	r1, [r4, #0]
 8003b84:	6054      	str	r4, [r2, #4]
 8003b86:	e7c7      	b.n	8003b18 <_free_r+0x28>
 8003b88:	b003      	add	sp, #12
 8003b8a:	bd30      	pop	{r4, r5, pc}
 8003b8c:	20000090 	.word	0x20000090

08003b90 <_malloc_r>:
 8003b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b92:	1ccd      	adds	r5, r1, #3
 8003b94:	f025 0503 	bic.w	r5, r5, #3
 8003b98:	3508      	adds	r5, #8
 8003b9a:	2d0c      	cmp	r5, #12
 8003b9c:	bf38      	it	cc
 8003b9e:	250c      	movcc	r5, #12
 8003ba0:	2d00      	cmp	r5, #0
 8003ba2:	4606      	mov	r6, r0
 8003ba4:	db01      	blt.n	8003baa <_malloc_r+0x1a>
 8003ba6:	42a9      	cmp	r1, r5
 8003ba8:	d903      	bls.n	8003bb2 <_malloc_r+0x22>
 8003baa:	230c      	movs	r3, #12
 8003bac:	6033      	str	r3, [r6, #0]
 8003bae:	2000      	movs	r0, #0
 8003bb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bb2:	f000 f87d 	bl	8003cb0 <__malloc_lock>
 8003bb6:	4921      	ldr	r1, [pc, #132]	; (8003c3c <_malloc_r+0xac>)
 8003bb8:	680a      	ldr	r2, [r1, #0]
 8003bba:	4614      	mov	r4, r2
 8003bbc:	b99c      	cbnz	r4, 8003be6 <_malloc_r+0x56>
 8003bbe:	4f20      	ldr	r7, [pc, #128]	; (8003c40 <_malloc_r+0xb0>)
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	b923      	cbnz	r3, 8003bce <_malloc_r+0x3e>
 8003bc4:	4621      	mov	r1, r4
 8003bc6:	4630      	mov	r0, r6
 8003bc8:	f000 f862 	bl	8003c90 <_sbrk_r>
 8003bcc:	6038      	str	r0, [r7, #0]
 8003bce:	4629      	mov	r1, r5
 8003bd0:	4630      	mov	r0, r6
 8003bd2:	f000 f85d 	bl	8003c90 <_sbrk_r>
 8003bd6:	1c43      	adds	r3, r0, #1
 8003bd8:	d123      	bne.n	8003c22 <_malloc_r+0x92>
 8003bda:	230c      	movs	r3, #12
 8003bdc:	6033      	str	r3, [r6, #0]
 8003bde:	4630      	mov	r0, r6
 8003be0:	f000 f86c 	bl	8003cbc <__malloc_unlock>
 8003be4:	e7e3      	b.n	8003bae <_malloc_r+0x1e>
 8003be6:	6823      	ldr	r3, [r4, #0]
 8003be8:	1b5b      	subs	r3, r3, r5
 8003bea:	d417      	bmi.n	8003c1c <_malloc_r+0x8c>
 8003bec:	2b0b      	cmp	r3, #11
 8003bee:	d903      	bls.n	8003bf8 <_malloc_r+0x68>
 8003bf0:	6023      	str	r3, [r4, #0]
 8003bf2:	441c      	add	r4, r3
 8003bf4:	6025      	str	r5, [r4, #0]
 8003bf6:	e004      	b.n	8003c02 <_malloc_r+0x72>
 8003bf8:	6863      	ldr	r3, [r4, #4]
 8003bfa:	42a2      	cmp	r2, r4
 8003bfc:	bf0c      	ite	eq
 8003bfe:	600b      	streq	r3, [r1, #0]
 8003c00:	6053      	strne	r3, [r2, #4]
 8003c02:	4630      	mov	r0, r6
 8003c04:	f000 f85a 	bl	8003cbc <__malloc_unlock>
 8003c08:	f104 000b 	add.w	r0, r4, #11
 8003c0c:	1d23      	adds	r3, r4, #4
 8003c0e:	f020 0007 	bic.w	r0, r0, #7
 8003c12:	1ac2      	subs	r2, r0, r3
 8003c14:	d0cc      	beq.n	8003bb0 <_malloc_r+0x20>
 8003c16:	1a1b      	subs	r3, r3, r0
 8003c18:	50a3      	str	r3, [r4, r2]
 8003c1a:	e7c9      	b.n	8003bb0 <_malloc_r+0x20>
 8003c1c:	4622      	mov	r2, r4
 8003c1e:	6864      	ldr	r4, [r4, #4]
 8003c20:	e7cc      	b.n	8003bbc <_malloc_r+0x2c>
 8003c22:	1cc4      	adds	r4, r0, #3
 8003c24:	f024 0403 	bic.w	r4, r4, #3
 8003c28:	42a0      	cmp	r0, r4
 8003c2a:	d0e3      	beq.n	8003bf4 <_malloc_r+0x64>
 8003c2c:	1a21      	subs	r1, r4, r0
 8003c2e:	4630      	mov	r0, r6
 8003c30:	f000 f82e 	bl	8003c90 <_sbrk_r>
 8003c34:	3001      	adds	r0, #1
 8003c36:	d1dd      	bne.n	8003bf4 <_malloc_r+0x64>
 8003c38:	e7cf      	b.n	8003bda <_malloc_r+0x4a>
 8003c3a:	bf00      	nop
 8003c3c:	20000090 	.word	0x20000090
 8003c40:	20000094 	.word	0x20000094

08003c44 <_realloc_r>:
 8003c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c46:	4607      	mov	r7, r0
 8003c48:	4614      	mov	r4, r2
 8003c4a:	460e      	mov	r6, r1
 8003c4c:	b921      	cbnz	r1, 8003c58 <_realloc_r+0x14>
 8003c4e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003c52:	4611      	mov	r1, r2
 8003c54:	f7ff bf9c 	b.w	8003b90 <_malloc_r>
 8003c58:	b922      	cbnz	r2, 8003c64 <_realloc_r+0x20>
 8003c5a:	f7ff ff49 	bl	8003af0 <_free_r>
 8003c5e:	4625      	mov	r5, r4
 8003c60:	4628      	mov	r0, r5
 8003c62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c64:	f000 f830 	bl	8003cc8 <_malloc_usable_size_r>
 8003c68:	42a0      	cmp	r0, r4
 8003c6a:	d20f      	bcs.n	8003c8c <_realloc_r+0x48>
 8003c6c:	4621      	mov	r1, r4
 8003c6e:	4638      	mov	r0, r7
 8003c70:	f7ff ff8e 	bl	8003b90 <_malloc_r>
 8003c74:	4605      	mov	r5, r0
 8003c76:	2800      	cmp	r0, #0
 8003c78:	d0f2      	beq.n	8003c60 <_realloc_r+0x1c>
 8003c7a:	4631      	mov	r1, r6
 8003c7c:	4622      	mov	r2, r4
 8003c7e:	f7ff ff0f 	bl	8003aa0 <memcpy>
 8003c82:	4631      	mov	r1, r6
 8003c84:	4638      	mov	r0, r7
 8003c86:	f7ff ff33 	bl	8003af0 <_free_r>
 8003c8a:	e7e9      	b.n	8003c60 <_realloc_r+0x1c>
 8003c8c:	4635      	mov	r5, r6
 8003c8e:	e7e7      	b.n	8003c60 <_realloc_r+0x1c>

08003c90 <_sbrk_r>:
 8003c90:	b538      	push	{r3, r4, r5, lr}
 8003c92:	4d06      	ldr	r5, [pc, #24]	; (8003cac <_sbrk_r+0x1c>)
 8003c94:	2300      	movs	r3, #0
 8003c96:	4604      	mov	r4, r0
 8003c98:	4608      	mov	r0, r1
 8003c9a:	602b      	str	r3, [r5, #0]
 8003c9c:	f7fd f95a 	bl	8000f54 <_sbrk>
 8003ca0:	1c43      	adds	r3, r0, #1
 8003ca2:	d102      	bne.n	8003caa <_sbrk_r+0x1a>
 8003ca4:	682b      	ldr	r3, [r5, #0]
 8003ca6:	b103      	cbz	r3, 8003caa <_sbrk_r+0x1a>
 8003ca8:	6023      	str	r3, [r4, #0]
 8003caa:	bd38      	pop	{r3, r4, r5, pc}
 8003cac:	20000204 	.word	0x20000204

08003cb0 <__malloc_lock>:
 8003cb0:	4801      	ldr	r0, [pc, #4]	; (8003cb8 <__malloc_lock+0x8>)
 8003cb2:	f000 b811 	b.w	8003cd8 <__retarget_lock_acquire_recursive>
 8003cb6:	bf00      	nop
 8003cb8:	2000020c 	.word	0x2000020c

08003cbc <__malloc_unlock>:
 8003cbc:	4801      	ldr	r0, [pc, #4]	; (8003cc4 <__malloc_unlock+0x8>)
 8003cbe:	f000 b80c 	b.w	8003cda <__retarget_lock_release_recursive>
 8003cc2:	bf00      	nop
 8003cc4:	2000020c 	.word	0x2000020c

08003cc8 <_malloc_usable_size_r>:
 8003cc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ccc:	1f18      	subs	r0, r3, #4
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	bfbc      	itt	lt
 8003cd2:	580b      	ldrlt	r3, [r1, r0]
 8003cd4:	18c0      	addlt	r0, r0, r3
 8003cd6:	4770      	bx	lr

08003cd8 <__retarget_lock_acquire_recursive>:
 8003cd8:	4770      	bx	lr

08003cda <__retarget_lock_release_recursive>:
 8003cda:	4770      	bx	lr

08003cdc <_init>:
 8003cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cde:	bf00      	nop
 8003ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ce2:	bc08      	pop	{r3}
 8003ce4:	469e      	mov	lr, r3
 8003ce6:	4770      	bx	lr

08003ce8 <_fini>:
 8003ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cea:	bf00      	nop
 8003cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cee:	bc08      	pop	{r3}
 8003cf0:	469e      	mov	lr, r3
 8003cf2:	4770      	bx	lr
