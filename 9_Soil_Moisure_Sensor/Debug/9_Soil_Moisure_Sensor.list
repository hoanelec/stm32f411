
9_Soil_Moisure_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003abc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08003c5c  08003c5c  00013c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d44  08003d44  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003d44  08003d44  00013d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d4c  08003d4c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d4c  08003d4c  00013d4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d50  08003d50  00013d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003d54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  20000070  08003dc4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000214  08003dc4  00020214  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a346  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b82  00000000  00000000  0002a3e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000810  00000000  00000000  0002bf68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000768  00000000  00000000  0002c778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f8a  00000000  00000000  0002cee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000099f2  00000000  00000000  00043e6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000916f7  00000000  00000000  0004d85c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000def53  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002400  00000000  00000000  000defa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003c44 	.word	0x08003c44

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08003c44 	.word	0x08003c44

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <SendUnsignedNumber>:
#include "Uart.h"
void SendUnsignedNumber(uint32_t number,UART_HandleTypeDef _huart)
{
 8000588:	b084      	sub	sp, #16
 800058a:	b580      	push	{r7, lr}
 800058c:	b084      	sub	sp, #16
 800058e:	af00      	add	r7, sp, #0
 8000590:	6078      	str	r0, [r7, #4]
 8000592:	f107 001c 	add.w	r0, r7, #28
 8000596:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	memset(uartBuffer,0,50);
 800059a:	2232      	movs	r2, #50	; 0x32
 800059c:	2100      	movs	r1, #0
 800059e:	480d      	ldr	r0, [pc, #52]	; (80005d4 <SendUnsignedNumber+0x4c>)
 80005a0:	f002 ff1a 	bl	80033d8 <memset>
	uint8_t l = sprintf(uartBuffer,"%lu",number);
 80005a4:	687a      	ldr	r2, [r7, #4]
 80005a6:	490c      	ldr	r1, [pc, #48]	; (80005d8 <SendUnsignedNumber+0x50>)
 80005a8:	480a      	ldr	r0, [pc, #40]	; (80005d4 <SendUnsignedNumber+0x4c>)
 80005aa:	f002 ff1d 	bl	80033e8 <siprintf>
 80005ae:	4603      	mov	r3, r0
 80005b0:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&_huart, (uint8_t *)uartBuffer, l, 500);
 80005b2:	7bfb      	ldrb	r3, [r7, #15]
 80005b4:	b29a      	uxth	r2, r3
 80005b6:	f107 001c 	add.w	r0, r7, #28
 80005ba:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80005be:	4905      	ldr	r1, [pc, #20]	; (80005d4 <SendUnsignedNumber+0x4c>)
 80005c0:	f002 fc3b 	bl	8002e3a <HAL_UART_Transmit>
}
 80005c4:	bf00      	nop
 80005c6:	3710      	adds	r7, #16
 80005c8:	46bd      	mov	sp, r7
 80005ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005ce:	b004      	add	sp, #16
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	20000120 	.word	0x20000120
 80005d8:	08003c5c 	.word	0x08003c5c

080005dc <SendConstChar>:
	HAL_UART_Transmit(&_huart, (uint8_t *)uartBuffer, l, 500);
	HAL_UART_Transmit(&_huart, (uint8_t *)"\n", 2, 50);

}
void SendConstChar(const char* constChar,UART_HandleTypeDef _huart)
{
 80005dc:	b084      	sub	sp, #16
 80005de:	b580      	push	{r7, lr}
 80005e0:	b082      	sub	sp, #8
 80005e2:	af00      	add	r7, sp, #0
 80005e4:	6078      	str	r0, [r7, #4]
 80005e6:	f107 0014 	add.w	r0, r7, #20
 80005ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	memset(uartBuffer,0,50);
 80005ee:	2232      	movs	r2, #50	; 0x32
 80005f0:	2100      	movs	r1, #0
 80005f2:	480a      	ldr	r0, [pc, #40]	; (800061c <SendConstChar+0x40>)
 80005f4:	f002 fef0 	bl	80033d8 <memset>
	HAL_UART_Transmit(&_huart,(uint8_t *)constChar,strlen((const char*)constChar),200);
 80005f8:	6878      	ldr	r0, [r7, #4]
 80005fa:	f7ff fdf1 	bl	80001e0 <strlen>
 80005fe:	4603      	mov	r3, r0
 8000600:	b29a      	uxth	r2, r3
 8000602:	f107 0014 	add.w	r0, r7, #20
 8000606:	23c8      	movs	r3, #200	; 0xc8
 8000608:	6879      	ldr	r1, [r7, #4]
 800060a:	f002 fc16 	bl	8002e3a <HAL_UART_Transmit>
}
 800060e:	bf00      	nop
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000618:	b004      	add	sp, #16
 800061a:	4770      	bx	lr
 800061c:	20000120 	.word	0x20000120

08000620 <SendConstCharLn>:
void SendConstCharLn(const char* constChar,UART_HandleTypeDef _huart)
{
 8000620:	b084      	sub	sp, #16
 8000622:	b580      	push	{r7, lr}
 8000624:	b082      	sub	sp, #8
 8000626:	af00      	add	r7, sp, #0
 8000628:	6078      	str	r0, [r7, #4]
 800062a:	f107 0014 	add.w	r0, r7, #20
 800062e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	memset(uartBuffer,0,50);
 8000632:	2232      	movs	r2, #50	; 0x32
 8000634:	2100      	movs	r1, #0
 8000636:	480e      	ldr	r0, [pc, #56]	; (8000670 <SendConstCharLn+0x50>)
 8000638:	f002 fece 	bl	80033d8 <memset>
	HAL_UART_Transmit(&_huart,(uint8_t *)constChar,strlen((const char*)constChar),200);
 800063c:	6878      	ldr	r0, [r7, #4]
 800063e:	f7ff fdcf 	bl	80001e0 <strlen>
 8000642:	4603      	mov	r3, r0
 8000644:	b29a      	uxth	r2, r3
 8000646:	f107 0014 	add.w	r0, r7, #20
 800064a:	23c8      	movs	r3, #200	; 0xc8
 800064c:	6879      	ldr	r1, [r7, #4]
 800064e:	f002 fbf4 	bl	8002e3a <HAL_UART_Transmit>
		HAL_UART_Transmit(&_huart, (uint8_t *)"\n", 2, 50);
 8000652:	f107 0014 	add.w	r0, r7, #20
 8000656:	2332      	movs	r3, #50	; 0x32
 8000658:	2202      	movs	r2, #2
 800065a:	4906      	ldr	r1, [pc, #24]	; (8000674 <SendConstCharLn+0x54>)
 800065c:	f002 fbed 	bl	8002e3a <HAL_UART_Transmit>
}
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800066a:	b004      	add	sp, #16
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	20000120 	.word	0x20000120
 8000674:	08003c60 	.word	0x08003c60

08000678 <SendFloat>:
void SendFloat(float num,UART_HandleTypeDef _huart)
{
 8000678:	b084      	sub	sp, #16
 800067a:	b580      	push	{r7, lr}
 800067c:	b086      	sub	sp, #24
 800067e:	af00      	add	r7, sp, #0
 8000680:	ed87 0a01 	vstr	s0, [r7, #4]
 8000684:	f107 0c20 	add.w	ip, r7, #32
 8000688:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memset(uartBuffer,0,50);
 800068c:	2232      	movs	r2, #50	; 0x32
 800068e:	2100      	movs	r1, #0
 8000690:	481f      	ldr	r0, [pc, #124]	; (8000710 <SendFloat+0x98>)
 8000692:	f002 fea1 	bl	80033d8 <memset>
	uint16_t intPart = (uint16_t)num;
 8000696:	edd7 7a01 	vldr	s15, [r7, #4]
 800069a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800069e:	ee17 3a90 	vmov	r3, s15
 80006a2:	82fb      	strh	r3, [r7, #22]
	float  decPart  = (float )num - intPart;
 80006a4:	8afb      	ldrh	r3, [r7, #22]
 80006a6:	ee07 3a90 	vmov	s15, r3
 80006aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006ae:	ed97 7a01 	vldr	s14, [r7, #4]
 80006b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80006b6:	edc7 7a04 	vstr	s15, [r7, #16]
	uint16_t decPart2 = (decPart*100)/10;
 80006ba:	edd7 7a04 	vldr	s15, [r7, #16]
 80006be:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000714 <SendFloat+0x9c>
 80006c2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80006c6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80006ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006d2:	ee17 3a90 	vmov	r3, s15
 80006d6:	81fb      	strh	r3, [r7, #14]
	sprintf(uartBuffer,"%d.%d",intPart,decPart2);
 80006d8:	8afa      	ldrh	r2, [r7, #22]
 80006da:	89fb      	ldrh	r3, [r7, #14]
 80006dc:	490e      	ldr	r1, [pc, #56]	; (8000718 <SendFloat+0xa0>)
 80006de:	480c      	ldr	r0, [pc, #48]	; (8000710 <SendFloat+0x98>)
 80006e0:	f002 fe82 	bl	80033e8 <siprintf>
	HAL_UART_Transmit(&_huart, (uint8_t *)uartBuffer, sprintf(uartBuffer,"%d.%d",intPart,decPart2), 400);
 80006e4:	8afa      	ldrh	r2, [r7, #22]
 80006e6:	89fb      	ldrh	r3, [r7, #14]
 80006e8:	490b      	ldr	r1, [pc, #44]	; (8000718 <SendFloat+0xa0>)
 80006ea:	4809      	ldr	r0, [pc, #36]	; (8000710 <SendFloat+0x98>)
 80006ec:	f002 fe7c 	bl	80033e8 <siprintf>
 80006f0:	4603      	mov	r3, r0
 80006f2:	b29a      	uxth	r2, r3
 80006f4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80006f8:	4905      	ldr	r1, [pc, #20]	; (8000710 <SendFloat+0x98>)
 80006fa:	f107 0020 	add.w	r0, r7, #32
 80006fe:	f002 fb9c 	bl	8002e3a <HAL_UART_Transmit>
}
 8000702:	bf00      	nop
 8000704:	3718      	adds	r7, #24
 8000706:	46bd      	mov	sp, r7
 8000708:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800070c:	b004      	add	sp, #16
 800070e:	4770      	bx	lr
 8000710:	20000120 	.word	0x20000120
 8000714:	42c80000 	.word	0x42c80000
 8000718:	08003c64 	.word	0x08003c64

0800071c <SendFloatLn>:
void SendFloatLn(float num,UART_HandleTypeDef _huart)
{
 800071c:	b084      	sub	sp, #16
 800071e:	b5b0      	push	{r4, r5, r7, lr}
 8000720:	b090      	sub	sp, #64	; 0x40
 8000722:	af0e      	add	r7, sp, #56	; 0x38
 8000724:	ed87 0a01 	vstr	s0, [r7, #4]
 8000728:	f107 0418 	add.w	r4, r7, #24
 800072c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	memset(uartBuffer,0,50);
 8000730:	2232      	movs	r2, #50	; 0x32
 8000732:	2100      	movs	r1, #0
 8000734:	4811      	ldr	r0, [pc, #68]	; (800077c <SendFloatLn+0x60>)
 8000736:	f002 fe4f 	bl	80033d8 <memset>
	SendFloat(num,_huart);
 800073a:	466d      	mov	r5, sp
 800073c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8000740:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000742:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000744:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000746:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000748:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800074a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800074c:	6823      	ldr	r3, [r4, #0]
 800074e:	602b      	str	r3, [r5, #0]
 8000750:	f107 0318 	add.w	r3, r7, #24
 8000754:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000756:	ed97 0a01 	vldr	s0, [r7, #4]
 800075a:	f7ff ff8d 	bl	8000678 <SendFloat>
	HAL_UART_Transmit(&_huart, (uint8_t *)"\n", 2, 50);
 800075e:	2332      	movs	r3, #50	; 0x32
 8000760:	2202      	movs	r2, #2
 8000762:	4907      	ldr	r1, [pc, #28]	; (8000780 <SendFloatLn+0x64>)
 8000764:	f107 0018 	add.w	r0, r7, #24
 8000768:	f002 fb67 	bl	8002e3a <HAL_UART_Transmit>
}
 800076c:	bf00      	nop
 800076e:	3708      	adds	r7, #8
 8000770:	46bd      	mov	sp, r7
 8000772:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000776:	b004      	add	sp, #16
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	20000120 	.word	0x20000120
 8000780:	08003c60 	.word	0x08003c60

08000784 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000784:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000786:	b095      	sub	sp, #84	; 0x54
 8000788:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800078a:	f000 fc23 	bl	8000fd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800078e:	f000 f961 	bl	8000a54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000792:	f000 fa63 	bl	8000c5c <MX_GPIO_Init>
  MX_DMA_Init();
 8000796:	f000 fa41 	bl	8000c1c <MX_DMA_Init>
  MX_ADC1_Init();
 800079a:	f000 f9c3 	bl	8000b24 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 800079e:	f000 fa13 	bl	8000bc8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_ADC_Start_DMA(&hadc1, adc, 1);
 80007a2:	2201      	movs	r2, #1
 80007a4:	499d      	ldr	r1, [pc, #628]	; (8000a1c <main+0x298>)
 80007a6:	489e      	ldr	r0, [pc, #632]	; (8000a20 <main+0x29c>)
 80007a8:	f000 fcee 	bl	8001188 <HAL_ADC_Start_DMA>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		float virtueVoltage = *adc*3.3f/4095;
 80007ac:	4b9b      	ldr	r3, [pc, #620]	; (8000a1c <main+0x298>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	ee07 3a90 	vmov	s15, r3
 80007b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007b8:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 8000a24 <main+0x2a0>
 80007bc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80007c0:	eddf 6a99 	vldr	s13, [pc, #612]	; 8000a28 <main+0x2a4>
 80007c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80007c8:	edc7 7a05 	vstr	s15, [r7, #20]
		float realisticVoltage = 1.67f*virtueVoltage;
 80007cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80007d0:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8000a2c <main+0x2a8>
 80007d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007d8:	edc7 7a04 	vstr	s15, [r7, #16]
		uint16_t realisticAdc = realisticVoltage*4095/5 ;//Vin = Vref*adc/4098
 80007dc:	edd7 7a04 	vldr	s15, [r7, #16]
 80007e0:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8000a28 <main+0x2a4>
 80007e4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80007e8:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80007ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80007f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007f4:	ee17 3a90 	vmov	r3, s15
 80007f8:	81fb      	strh	r3, [r7, #14]

		SendConstChar("virtue ADC: ", huart2);
 80007fa:	4e8d      	ldr	r6, [pc, #564]	; (8000a30 <main+0x2ac>)
 80007fc:	466d      	mov	r5, sp
 80007fe:	f106 040c 	add.w	r4, r6, #12
 8000802:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000804:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000806:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000808:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800080a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800080c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800080e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000812:	e885 0003 	stmia.w	r5, {r0, r1}
 8000816:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800081a:	4886      	ldr	r0, [pc, #536]	; (8000a34 <main+0x2b0>)
 800081c:	f7ff fede 	bl	80005dc <SendConstChar>
		SendUnsignedNumber(*adc, huart2);
 8000820:	4b7e      	ldr	r3, [pc, #504]	; (8000a1c <main+0x298>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	4e82      	ldr	r6, [pc, #520]	; (8000a30 <main+0x2ac>)
 8000828:	466d      	mov	r5, sp
 800082a:	f106 040c 	add.w	r4, r6, #12
 800082e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000830:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000832:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000834:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000836:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000838:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800083a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800083e:	e885 0003 	stmia.w	r5, {r0, r1}
 8000842:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000846:	6878      	ldr	r0, [r7, #4]
 8000848:	f7ff fe9e 	bl	8000588 <SendUnsignedNumber>
		SendConstChar("\n ", huart2);
 800084c:	4e78      	ldr	r6, [pc, #480]	; (8000a30 <main+0x2ac>)
 800084e:	466d      	mov	r5, sp
 8000850:	f106 040c 	add.w	r4, r6, #12
 8000854:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000856:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000858:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800085a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800085c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800085e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000860:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000864:	e885 0003 	stmia.w	r5, {r0, r1}
 8000868:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800086c:	4872      	ldr	r0, [pc, #456]	; (8000a38 <main+0x2b4>)
 800086e:	f7ff feb5 	bl	80005dc <SendConstChar>
		SendConstChar("virtue Voltage: ", huart2);
 8000872:	4e6f      	ldr	r6, [pc, #444]	; (8000a30 <main+0x2ac>)
 8000874:	466d      	mov	r5, sp
 8000876:	f106 040c 	add.w	r4, r6, #12
 800087a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800087c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800087e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000880:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000882:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000884:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000886:	e894 0003 	ldmia.w	r4, {r0, r1}
 800088a:	e885 0003 	stmia.w	r5, {r0, r1}
 800088e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000892:	486a      	ldr	r0, [pc, #424]	; (8000a3c <main+0x2b8>)
 8000894:	f7ff fea2 	bl	80005dc <SendConstChar>
		SendFloatLn(virtueVoltage, huart2);
 8000898:	4e65      	ldr	r6, [pc, #404]	; (8000a30 <main+0x2ac>)
 800089a:	466d      	mov	r5, sp
 800089c:	f106 0410 	add.w	r4, r6, #16
 80008a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008ac:	6823      	ldr	r3, [r4, #0]
 80008ae:	602b      	str	r3, [r5, #0]
 80008b0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80008b4:	ed97 0a05 	vldr	s0, [r7, #20]
 80008b8:	f7ff ff30 	bl	800071c <SendFloatLn>

		SendConstChar("realistic ADC: ", huart2);
 80008bc:	4e5c      	ldr	r6, [pc, #368]	; (8000a30 <main+0x2ac>)
 80008be:	466d      	mov	r5, sp
 80008c0:	f106 040c 	add.w	r4, r6, #12
 80008c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008d0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80008d4:	e885 0003 	stmia.w	r5, {r0, r1}
 80008d8:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80008dc:	4858      	ldr	r0, [pc, #352]	; (8000a40 <main+0x2bc>)
 80008de:	f7ff fe7d 	bl	80005dc <SendConstChar>
		SendUnsignedNumber((uint32_t)realisticAdc, huart2);
 80008e2:	f8b7 c00e 	ldrh.w	ip, [r7, #14]
 80008e6:	4e52      	ldr	r6, [pc, #328]	; (8000a30 <main+0x2ac>)
 80008e8:	466d      	mov	r5, sp
 80008ea:	f106 040c 	add.w	r4, r6, #12
 80008ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80008fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8000902:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000906:	4660      	mov	r0, ip
 8000908:	f7ff fe3e 	bl	8000588 <SendUnsignedNumber>
		SendConstChar("\n ", huart2);
 800090c:	4e48      	ldr	r6, [pc, #288]	; (8000a30 <main+0x2ac>)
 800090e:	466d      	mov	r5, sp
 8000910:	f106 040c 	add.w	r4, r6, #12
 8000914:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000916:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000918:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800091a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800091c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800091e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000920:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000924:	e885 0003 	stmia.w	r5, {r0, r1}
 8000928:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800092c:	4842      	ldr	r0, [pc, #264]	; (8000a38 <main+0x2b4>)
 800092e:	f7ff fe55 	bl	80005dc <SendConstChar>
		SendConstChar("Realistic Voltage: ", huart2);
 8000932:	4e3f      	ldr	r6, [pc, #252]	; (8000a30 <main+0x2ac>)
 8000934:	466d      	mov	r5, sp
 8000936:	f106 040c 	add.w	r4, r6, #12
 800093a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800093c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800093e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000940:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000942:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000944:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000946:	e894 0003 	ldmia.w	r4, {r0, r1}
 800094a:	e885 0003 	stmia.w	r5, {r0, r1}
 800094e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000952:	483c      	ldr	r0, [pc, #240]	; (8000a44 <main+0x2c0>)
 8000954:	f7ff fe42 	bl	80005dc <SendConstChar>
		SendFloatLn(realisticVoltage, huart2);
 8000958:	4e35      	ldr	r6, [pc, #212]	; (8000a30 <main+0x2ac>)
 800095a:	466d      	mov	r5, sp
 800095c:	f106 0410 	add.w	r4, r6, #16
 8000960:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000962:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000964:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000966:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000968:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800096a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800096c:	6823      	ldr	r3, [r4, #0]
 800096e:	602b      	str	r3, [r5, #0]
 8000970:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000974:	ed97 0a04 	vldr	s0, [r7, #16]
 8000978:	f7ff fed0 	bl	800071c <SendFloatLn>
		if(realisticAdc < SOIL_WET){
 800097c:	89fb      	ldrh	r3, [r7, #14]
 800097e:	f240 52db 	movw	r2, #1499	; 0x5db
 8000982:	4293      	cmp	r3, r2
 8000984:	d813      	bhi.n	80009ae <main+0x22a>
			SendConstCharLn("Soil is too wet", huart2);
 8000986:	4e2a      	ldr	r6, [pc, #168]	; (8000a30 <main+0x2ac>)
 8000988:	466d      	mov	r5, sp
 800098a:	f106 040c 	add.w	r4, r6, #12
 800098e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000990:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000992:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000994:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000996:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000998:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800099a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800099e:	e885 0003 	stmia.w	r5, {r0, r1}
 80009a2:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80009a6:	4828      	ldr	r0, [pc, #160]	; (8000a48 <main+0x2c4>)
 80009a8:	f7ff fe3a 	bl	8000620 <SendConstCharLn>
 80009ac:	e030      	b.n	8000a10 <main+0x28c>
		}else if(realisticAdc >= SOIL_WET && realisticAdc < SOIL_DRY){
 80009ae:	89fb      	ldrh	r3, [r7, #14]
 80009b0:	f240 52db 	movw	r2, #1499	; 0x5db
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d918      	bls.n	80009ea <main+0x266>
 80009b8:	89fb      	ldrh	r3, [r7, #14]
 80009ba:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80009be:	4293      	cmp	r3, r2
 80009c0:	d813      	bhi.n	80009ea <main+0x266>
			SendConstCharLn("Soil moisture is fine", huart2);
 80009c2:	4e1b      	ldr	r6, [pc, #108]	; (8000a30 <main+0x2ac>)
 80009c4:	466d      	mov	r5, sp
 80009c6:	f106 040c 	add.w	r4, r6, #12
 80009ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80009da:	e885 0003 	stmia.w	r5, {r0, r1}
 80009de:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80009e2:	481a      	ldr	r0, [pc, #104]	; (8000a4c <main+0x2c8>)
 80009e4:	f7ff fe1c 	bl	8000620 <SendConstCharLn>
 80009e8:	e012      	b.n	8000a10 <main+0x28c>
		}else{
			SendConstCharLn("Soil is too dry", huart2);
 80009ea:	4e11      	ldr	r6, [pc, #68]	; (8000a30 <main+0x2ac>)
 80009ec:	466d      	mov	r5, sp
 80009ee:	f106 040c 	add.w	r4, r6, #12
 80009f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000a02:	e885 0003 	stmia.w	r5, {r0, r1}
 8000a06:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000a0a:	4811      	ldr	r0, [pc, #68]	; (8000a50 <main+0x2cc>)
 8000a0c:	f7ff fe08 	bl	8000620 <SendConstCharLn>
		}
		HAL_Delay(1000);
 8000a10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a14:	f000 fb50 	bl	80010b8 <HAL_Delay>
	{
 8000a18:	e6c8      	b.n	80007ac <main+0x28>
 8000a1a:	bf00      	nop
 8000a1c:	2000019c 	.word	0x2000019c
 8000a20:	20000154 	.word	0x20000154
 8000a24:	40533333 	.word	0x40533333
 8000a28:	457ff000 	.word	0x457ff000
 8000a2c:	3fd5c28f 	.word	0x3fd5c28f
 8000a30:	200000dc 	.word	0x200000dc
 8000a34:	08003c6c 	.word	0x08003c6c
 8000a38:	08003c7c 	.word	0x08003c7c
 8000a3c:	08003c80 	.word	0x08003c80
 8000a40:	08003c94 	.word	0x08003c94
 8000a44:	08003ca4 	.word	0x08003ca4
 8000a48:	08003cb8 	.word	0x08003cb8
 8000a4c:	08003cc8 	.word	0x08003cc8
 8000a50:	08003ce0 	.word	0x08003ce0

08000a54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b094      	sub	sp, #80	; 0x50
 8000a58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a5a:	f107 0320 	add.w	r3, r7, #32
 8000a5e:	2230      	movs	r2, #48	; 0x30
 8000a60:	2100      	movs	r1, #0
 8000a62:	4618      	mov	r0, r3
 8000a64:	f002 fcb8 	bl	80033d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a68:	f107 030c 	add.w	r3, r7, #12
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
 8000a76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60bb      	str	r3, [r7, #8]
 8000a7c:	4b27      	ldr	r3, [pc, #156]	; (8000b1c <SystemClock_Config+0xc8>)
 8000a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a80:	4a26      	ldr	r2, [pc, #152]	; (8000b1c <SystemClock_Config+0xc8>)
 8000a82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a86:	6413      	str	r3, [r2, #64]	; 0x40
 8000a88:	4b24      	ldr	r3, [pc, #144]	; (8000b1c <SystemClock_Config+0xc8>)
 8000a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a90:	60bb      	str	r3, [r7, #8]
 8000a92:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a94:	2300      	movs	r3, #0
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	4b21      	ldr	r3, [pc, #132]	; (8000b20 <SystemClock_Config+0xcc>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a20      	ldr	r2, [pc, #128]	; (8000b20 <SystemClock_Config+0xcc>)
 8000a9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000aa2:	6013      	str	r3, [r2, #0]
 8000aa4:	4b1e      	ldr	r3, [pc, #120]	; (8000b20 <SystemClock_Config+0xcc>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000aac:	607b      	str	r3, [r7, #4]
 8000aae:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ab8:	2310      	movs	r3, #16
 8000aba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000abc:	2302      	movs	r3, #2
 8000abe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ac4:	2308      	movs	r3, #8
 8000ac6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000ac8:	2364      	movs	r3, #100	; 0x64
 8000aca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000acc:	2302      	movs	r3, #2
 8000ace:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ad0:	2304      	movs	r3, #4
 8000ad2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad4:	f107 0320 	add.w	r3, r7, #32
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f001 fd19 	bl	8002510 <HAL_RCC_OscConfig>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ae4:	f000 f8e2 	bl	8000cac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ae8:	230f      	movs	r3, #15
 8000aea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aec:	2302      	movs	r3, #2
 8000aee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000af0:	2300      	movs	r3, #0
 8000af2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000af4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000af8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000afe:	f107 030c 	add.w	r3, r7, #12
 8000b02:	2103      	movs	r1, #3
 8000b04:	4618      	mov	r0, r3
 8000b06:	f001 ff7b 	bl	8002a00 <HAL_RCC_ClockConfig>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b10:	f000 f8cc 	bl	8000cac <Error_Handler>
  }
}
 8000b14:	bf00      	nop
 8000b16:	3750      	adds	r7, #80	; 0x50
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40007000 	.word	0x40007000

08000b24 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b2a:	463b      	mov	r3, r7
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b36:	4b21      	ldr	r3, [pc, #132]	; (8000bbc <MX_ADC1_Init+0x98>)
 8000b38:	4a21      	ldr	r2, [pc, #132]	; (8000bc0 <MX_ADC1_Init+0x9c>)
 8000b3a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b3c:	4b1f      	ldr	r3, [pc, #124]	; (8000bbc <MX_ADC1_Init+0x98>)
 8000b3e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b42:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b44:	4b1d      	ldr	r3, [pc, #116]	; (8000bbc <MX_ADC1_Init+0x98>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000b4a:	4b1c      	ldr	r3, [pc, #112]	; (8000bbc <MX_ADC1_Init+0x98>)
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b50:	4b1a      	ldr	r3, [pc, #104]	; (8000bbc <MX_ADC1_Init+0x98>)
 8000b52:	2201      	movs	r2, #1
 8000b54:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b56:	4b19      	ldr	r3, [pc, #100]	; (8000bbc <MX_ADC1_Init+0x98>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b5e:	4b17      	ldr	r3, [pc, #92]	; (8000bbc <MX_ADC1_Init+0x98>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b64:	4b15      	ldr	r3, [pc, #84]	; (8000bbc <MX_ADC1_Init+0x98>)
 8000b66:	4a17      	ldr	r2, [pc, #92]	; (8000bc4 <MX_ADC1_Init+0xa0>)
 8000b68:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b6a:	4b14      	ldr	r3, [pc, #80]	; (8000bbc <MX_ADC1_Init+0x98>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000b70:	4b12      	ldr	r3, [pc, #72]	; (8000bbc <MX_ADC1_Init+0x98>)
 8000b72:	2201      	movs	r2, #1
 8000b74:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000b76:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <MX_ADC1_Init+0x98>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b7e:	4b0f      	ldr	r3, [pc, #60]	; (8000bbc <MX_ADC1_Init+0x98>)
 8000b80:	2201      	movs	r2, #1
 8000b82:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b84:	480d      	ldr	r0, [pc, #52]	; (8000bbc <MX_ADC1_Init+0x98>)
 8000b86:	f000 fabb 	bl	8001100 <HAL_ADC_Init>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000b90:	f000 f88c 	bl	8000cac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8000b9c:	2306      	movs	r3, #6
 8000b9e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ba0:	463b      	mov	r3, r7
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4805      	ldr	r0, [pc, #20]	; (8000bbc <MX_ADC1_Init+0x98>)
 8000ba6:	f000 fbfd 	bl	80013a4 <HAL_ADC_ConfigChannel>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000bb0:	f000 f87c 	bl	8000cac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bb4:	bf00      	nop
 8000bb6:	3710      	adds	r7, #16
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	20000154 	.word	0x20000154
 8000bc0:	40012000 	.word	0x40012000
 8000bc4:	0f000001 	.word	0x0f000001

08000bc8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bcc:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <MX_USART2_UART_Init+0x4c>)
 8000bce:	4a12      	ldr	r2, [pc, #72]	; (8000c18 <MX_USART2_UART_Init+0x50>)
 8000bd0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bd2:	4b10      	ldr	r3, [pc, #64]	; (8000c14 <MX_USART2_UART_Init+0x4c>)
 8000bd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bd8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bda:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <MX_USART2_UART_Init+0x4c>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000be0:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <MX_USART2_UART_Init+0x4c>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000be6:	4b0b      	ldr	r3, [pc, #44]	; (8000c14 <MX_USART2_UART_Init+0x4c>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bec:	4b09      	ldr	r3, [pc, #36]	; (8000c14 <MX_USART2_UART_Init+0x4c>)
 8000bee:	220c      	movs	r2, #12
 8000bf0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bf2:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <MX_USART2_UART_Init+0x4c>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bf8:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <MX_USART2_UART_Init+0x4c>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bfe:	4805      	ldr	r0, [pc, #20]	; (8000c14 <MX_USART2_UART_Init+0x4c>)
 8000c00:	f002 f8ce 	bl	8002da0 <HAL_UART_Init>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c0a:	f000 f84f 	bl	8000cac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	200000dc 	.word	0x200000dc
 8000c18:	40004400 	.word	0x40004400

08000c1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	607b      	str	r3, [r7, #4]
 8000c26:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <MX_DMA_Init+0x3c>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	4a0b      	ldr	r2, [pc, #44]	; (8000c58 <MX_DMA_Init+0x3c>)
 8000c2c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c30:	6313      	str	r3, [r2, #48]	; 0x30
 8000c32:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <MX_DMA_Init+0x3c>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2100      	movs	r1, #0
 8000c42:	2038      	movs	r0, #56	; 0x38
 8000c44:	f000 ff39 	bl	8001aba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c48:	2038      	movs	r0, #56	; 0x38
 8000c4a:	f000 ff52 	bl	8001af2 <HAL_NVIC_EnableIRQ>

}
 8000c4e:	bf00      	nop
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40023800 	.word	0x40023800

08000c5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	607b      	str	r3, [r7, #4]
 8000c66:	4b10      	ldr	r3, [pc, #64]	; (8000ca8 <MX_GPIO_Init+0x4c>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	4a0f      	ldr	r2, [pc, #60]	; (8000ca8 <MX_GPIO_Init+0x4c>)
 8000c6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c70:	6313      	str	r3, [r2, #48]	; 0x30
 8000c72:	4b0d      	ldr	r3, [pc, #52]	; (8000ca8 <MX_GPIO_Init+0x4c>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c7a:	607b      	str	r3, [r7, #4]
 8000c7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	603b      	str	r3, [r7, #0]
 8000c82:	4b09      	ldr	r3, [pc, #36]	; (8000ca8 <MX_GPIO_Init+0x4c>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	4a08      	ldr	r2, [pc, #32]	; (8000ca8 <MX_GPIO_Init+0x4c>)
 8000c88:	f043 0301 	orr.w	r3, r3, #1
 8000c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8e:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <MX_GPIO_Init+0x4c>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	603b      	str	r3, [r7, #0]
 8000c98:	683b      	ldr	r3, [r7, #0]

}
 8000c9a:	bf00      	nop
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	40023800 	.word	0x40023800

08000cac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb0:	b672      	cpsid	i
}
 8000cb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000cb4:	e7fe      	b.n	8000cb4 <Error_Handler+0x8>
	...

08000cb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	607b      	str	r3, [r7, #4]
 8000cc2:	4b10      	ldr	r3, [pc, #64]	; (8000d04 <HAL_MspInit+0x4c>)
 8000cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc6:	4a0f      	ldr	r2, [pc, #60]	; (8000d04 <HAL_MspInit+0x4c>)
 8000cc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ccc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cce:	4b0d      	ldr	r3, [pc, #52]	; (8000d04 <HAL_MspInit+0x4c>)
 8000cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cd6:	607b      	str	r3, [r7, #4]
 8000cd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	603b      	str	r3, [r7, #0]
 8000cde:	4b09      	ldr	r3, [pc, #36]	; (8000d04 <HAL_MspInit+0x4c>)
 8000ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce2:	4a08      	ldr	r2, [pc, #32]	; (8000d04 <HAL_MspInit+0x4c>)
 8000ce4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ce8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cea:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <HAL_MspInit+0x4c>)
 8000cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	603b      	str	r3, [r7, #0]
 8000cf4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	40023800 	.word	0x40023800

08000d08 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b08a      	sub	sp, #40	; 0x28
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d10:	f107 0314 	add.w	r3, r7, #20
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
 8000d1e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a2f      	ldr	r2, [pc, #188]	; (8000de4 <HAL_ADC_MspInit+0xdc>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d157      	bne.n	8000dda <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	613b      	str	r3, [r7, #16]
 8000d2e:	4b2e      	ldr	r3, [pc, #184]	; (8000de8 <HAL_ADC_MspInit+0xe0>)
 8000d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d32:	4a2d      	ldr	r2, [pc, #180]	; (8000de8 <HAL_ADC_MspInit+0xe0>)
 8000d34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d38:	6453      	str	r3, [r2, #68]	; 0x44
 8000d3a:	4b2b      	ldr	r3, [pc, #172]	; (8000de8 <HAL_ADC_MspInit+0xe0>)
 8000d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d42:	613b      	str	r3, [r7, #16]
 8000d44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	4b27      	ldr	r3, [pc, #156]	; (8000de8 <HAL_ADC_MspInit+0xe0>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	4a26      	ldr	r2, [pc, #152]	; (8000de8 <HAL_ADC_MspInit+0xe0>)
 8000d50:	f043 0301 	orr.w	r3, r3, #1
 8000d54:	6313      	str	r3, [r2, #48]	; 0x30
 8000d56:	4b24      	ldr	r3, [pc, #144]	; (8000de8 <HAL_ADC_MspInit+0xe0>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d62:	2301      	movs	r3, #1
 8000d64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d66:	2303      	movs	r3, #3
 8000d68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6e:	f107 0314 	add.w	r3, r7, #20
 8000d72:	4619      	mov	r1, r3
 8000d74:	481d      	ldr	r0, [pc, #116]	; (8000dec <HAL_ADC_MspInit+0xe4>)
 8000d76:	f001 fa47 	bl	8002208 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000d7a:	4b1d      	ldr	r3, [pc, #116]	; (8000df0 <HAL_ADC_MspInit+0xe8>)
 8000d7c:	4a1d      	ldr	r2, [pc, #116]	; (8000df4 <HAL_ADC_MspInit+0xec>)
 8000d7e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000d80:	4b1b      	ldr	r3, [pc, #108]	; (8000df0 <HAL_ADC_MspInit+0xe8>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d86:	4b1a      	ldr	r3, [pc, #104]	; (8000df0 <HAL_ADC_MspInit+0xe8>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d8c:	4b18      	ldr	r3, [pc, #96]	; (8000df0 <HAL_ADC_MspInit+0xe8>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d92:	4b17      	ldr	r3, [pc, #92]	; (8000df0 <HAL_ADC_MspInit+0xe8>)
 8000d94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d98:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d9a:	4b15      	ldr	r3, [pc, #84]	; (8000df0 <HAL_ADC_MspInit+0xe8>)
 8000d9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000da0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000da2:	4b13      	ldr	r3, [pc, #76]	; (8000df0 <HAL_ADC_MspInit+0xe8>)
 8000da4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000da8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000daa:	4b11      	ldr	r3, [pc, #68]	; (8000df0 <HAL_ADC_MspInit+0xe8>)
 8000dac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000db0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000db2:	4b0f      	ldr	r3, [pc, #60]	; (8000df0 <HAL_ADC_MspInit+0xe8>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000db8:	4b0d      	ldr	r3, [pc, #52]	; (8000df0 <HAL_ADC_MspInit+0xe8>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000dbe:	480c      	ldr	r0, [pc, #48]	; (8000df0 <HAL_ADC_MspInit+0xe8>)
 8000dc0:	f000 feb2 	bl	8001b28 <HAL_DMA_Init>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000dca:	f7ff ff6f 	bl	8000cac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4a07      	ldr	r2, [pc, #28]	; (8000df0 <HAL_ADC_MspInit+0xe8>)
 8000dd2:	639a      	str	r2, [r3, #56]	; 0x38
 8000dd4:	4a06      	ldr	r2, [pc, #24]	; (8000df0 <HAL_ADC_MspInit+0xe8>)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000dda:	bf00      	nop
 8000ddc:	3728      	adds	r7, #40	; 0x28
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40012000 	.word	0x40012000
 8000de8:	40023800 	.word	0x40023800
 8000dec:	40020000 	.word	0x40020000
 8000df0:	200001a0 	.word	0x200001a0
 8000df4:	40026410 	.word	0x40026410

08000df8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b08a      	sub	sp, #40	; 0x28
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e00:	f107 0314 	add.w	r3, r7, #20
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
 8000e0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a19      	ldr	r2, [pc, #100]	; (8000e7c <HAL_UART_MspInit+0x84>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d12b      	bne.n	8000e72 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	613b      	str	r3, [r7, #16]
 8000e1e:	4b18      	ldr	r3, [pc, #96]	; (8000e80 <HAL_UART_MspInit+0x88>)
 8000e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e22:	4a17      	ldr	r2, [pc, #92]	; (8000e80 <HAL_UART_MspInit+0x88>)
 8000e24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e28:	6413      	str	r3, [r2, #64]	; 0x40
 8000e2a:	4b15      	ldr	r3, [pc, #84]	; (8000e80 <HAL_UART_MspInit+0x88>)
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e32:	613b      	str	r3, [r7, #16]
 8000e34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <HAL_UART_MspInit+0x88>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	4a10      	ldr	r2, [pc, #64]	; (8000e80 <HAL_UART_MspInit+0x88>)
 8000e40:	f043 0301 	orr.w	r3, r3, #1
 8000e44:	6313      	str	r3, [r2, #48]	; 0x30
 8000e46:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <HAL_UART_MspInit+0x88>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e52:	230c      	movs	r3, #12
 8000e54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e56:	2302      	movs	r3, #2
 8000e58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e62:	2307      	movs	r3, #7
 8000e64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e66:	f107 0314 	add.w	r3, r7, #20
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4805      	ldr	r0, [pc, #20]	; (8000e84 <HAL_UART_MspInit+0x8c>)
 8000e6e:	f001 f9cb 	bl	8002208 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e72:	bf00      	nop
 8000e74:	3728      	adds	r7, #40	; 0x28
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40004400 	.word	0x40004400
 8000e80:	40023800 	.word	0x40023800
 8000e84:	40020000 	.word	0x40020000

08000e88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e8c:	e7fe      	b.n	8000e8c <NMI_Handler+0x4>

08000e8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e92:	e7fe      	b.n	8000e92 <HardFault_Handler+0x4>

08000e94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e98:	e7fe      	b.n	8000e98 <MemManage_Handler+0x4>

08000e9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e9e:	e7fe      	b.n	8000e9e <BusFault_Handler+0x4>

08000ea0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea4:	e7fe      	b.n	8000ea4 <UsageFault_Handler+0x4>

08000ea6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr

08000eb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr

08000ec2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr

08000ed0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ed4:	f000 f8d0 	bl	8001078 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ed8:	bf00      	nop
 8000eda:	bd80      	pop	{r7, pc}

08000edc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ee0:	4802      	ldr	r0, [pc, #8]	; (8000eec <DMA2_Stream0_IRQHandler+0x10>)
 8000ee2:	f000 ff27 	bl	8001d34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	200001a0 	.word	0x200001a0

08000ef0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ef8:	4a14      	ldr	r2, [pc, #80]	; (8000f4c <_sbrk+0x5c>)
 8000efa:	4b15      	ldr	r3, [pc, #84]	; (8000f50 <_sbrk+0x60>)
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f04:	4b13      	ldr	r3, [pc, #76]	; (8000f54 <_sbrk+0x64>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d102      	bne.n	8000f12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f0c:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <_sbrk+0x64>)
 8000f0e:	4a12      	ldr	r2, [pc, #72]	; (8000f58 <_sbrk+0x68>)
 8000f10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f12:	4b10      	ldr	r3, [pc, #64]	; (8000f54 <_sbrk+0x64>)
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4413      	add	r3, r2
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d207      	bcs.n	8000f30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f20:	f002 fa30 	bl	8003384 <__errno>
 8000f24:	4603      	mov	r3, r0
 8000f26:	220c      	movs	r2, #12
 8000f28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f2e:	e009      	b.n	8000f44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f30:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <_sbrk+0x64>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f36:	4b07      	ldr	r3, [pc, #28]	; (8000f54 <_sbrk+0x64>)
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	4a05      	ldr	r2, [pc, #20]	; (8000f54 <_sbrk+0x64>)
 8000f40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f42:	68fb      	ldr	r3, [r7, #12]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3718      	adds	r7, #24
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	20020000 	.word	0x20020000
 8000f50:	00000400 	.word	0x00000400
 8000f54:	2000008c 	.word	0x2000008c
 8000f58:	20000218 	.word	0x20000218

08000f5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f60:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <SystemInit+0x20>)
 8000f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f66:	4a05      	ldr	r2, [pc, #20]	; (8000f7c <SystemInit+0x20>)
 8000f68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fb8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f84:	480d      	ldr	r0, [pc, #52]	; (8000fbc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f86:	490e      	ldr	r1, [pc, #56]	; (8000fc0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f88:	4a0e      	ldr	r2, [pc, #56]	; (8000fc4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f8c:	e002      	b.n	8000f94 <LoopCopyDataInit>

08000f8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f92:	3304      	adds	r3, #4

08000f94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f98:	d3f9      	bcc.n	8000f8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f9a:	4a0b      	ldr	r2, [pc, #44]	; (8000fc8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f9c:	4c0b      	ldr	r4, [pc, #44]	; (8000fcc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fa0:	e001      	b.n	8000fa6 <LoopFillZerobss>

08000fa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fa4:	3204      	adds	r2, #4

08000fa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fa8:	d3fb      	bcc.n	8000fa2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000faa:	f7ff ffd7 	bl	8000f5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fae:	f002 f9ef 	bl	8003390 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fb2:	f7ff fbe7 	bl	8000784 <main>
  bx  lr    
 8000fb6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fb8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fc0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000fc4:	08003d54 	.word	0x08003d54
  ldr r2, =_sbss
 8000fc8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000fcc:	20000214 	.word	0x20000214

08000fd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fd0:	e7fe      	b.n	8000fd0 <ADC_IRQHandler>
	...

08000fd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fd8:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <HAL_Init+0x40>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a0d      	ldr	r2, [pc, #52]	; (8001014 <HAL_Init+0x40>)
 8000fde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fe2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fe4:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <HAL_Init+0x40>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a0a      	ldr	r2, [pc, #40]	; (8001014 <HAL_Init+0x40>)
 8000fea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ff0:	4b08      	ldr	r3, [pc, #32]	; (8001014 <HAL_Init+0x40>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a07      	ldr	r2, [pc, #28]	; (8001014 <HAL_Init+0x40>)
 8000ff6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ffa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ffc:	2003      	movs	r0, #3
 8000ffe:	f000 fd51 	bl	8001aa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001002:	2000      	movs	r0, #0
 8001004:	f000 f808 	bl	8001018 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001008:	f7ff fe56 	bl	8000cb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800100c:	2300      	movs	r3, #0
}
 800100e:	4618      	mov	r0, r3
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40023c00 	.word	0x40023c00

08001018 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001020:	4b12      	ldr	r3, [pc, #72]	; (800106c <HAL_InitTick+0x54>)
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	4b12      	ldr	r3, [pc, #72]	; (8001070 <HAL_InitTick+0x58>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	4619      	mov	r1, r3
 800102a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800102e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001032:	fbb2 f3f3 	udiv	r3, r2, r3
 8001036:	4618      	mov	r0, r3
 8001038:	f000 fd69 	bl	8001b0e <HAL_SYSTICK_Config>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e00e      	b.n	8001064 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2b0f      	cmp	r3, #15
 800104a:	d80a      	bhi.n	8001062 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800104c:	2200      	movs	r2, #0
 800104e:	6879      	ldr	r1, [r7, #4]
 8001050:	f04f 30ff 	mov.w	r0, #4294967295
 8001054:	f000 fd31 	bl	8001aba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001058:	4a06      	ldr	r2, [pc, #24]	; (8001074 <HAL_InitTick+0x5c>)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800105e:	2300      	movs	r3, #0
 8001060:	e000      	b.n	8001064 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
}
 8001064:	4618      	mov	r0, r3
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20000000 	.word	0x20000000
 8001070:	20000008 	.word	0x20000008
 8001074:	20000004 	.word	0x20000004

08001078 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800107c:	4b06      	ldr	r3, [pc, #24]	; (8001098 <HAL_IncTick+0x20>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	461a      	mov	r2, r3
 8001082:	4b06      	ldr	r3, [pc, #24]	; (800109c <HAL_IncTick+0x24>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4413      	add	r3, r2
 8001088:	4a04      	ldr	r2, [pc, #16]	; (800109c <HAL_IncTick+0x24>)
 800108a:	6013      	str	r3, [r2, #0]
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	20000008 	.word	0x20000008
 800109c:	20000200 	.word	0x20000200

080010a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  return uwTick;
 80010a4:	4b03      	ldr	r3, [pc, #12]	; (80010b4 <HAL_GetTick+0x14>)
 80010a6:	681b      	ldr	r3, [r3, #0]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	20000200 	.word	0x20000200

080010b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010c0:	f7ff ffee 	bl	80010a0 <HAL_GetTick>
 80010c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010d0:	d005      	beq.n	80010de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010d2:	4b0a      	ldr	r3, [pc, #40]	; (80010fc <HAL_Delay+0x44>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	461a      	mov	r2, r3
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	4413      	add	r3, r2
 80010dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010de:	bf00      	nop
 80010e0:	f7ff ffde 	bl	80010a0 <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	68fa      	ldr	r2, [r7, #12]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d8f7      	bhi.n	80010e0 <HAL_Delay+0x28>
  {
  }
}
 80010f0:	bf00      	nop
 80010f2:	bf00      	nop
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000008 	.word	0x20000008

08001100 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001108:	2300      	movs	r3, #0
 800110a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d101      	bne.n	8001116 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e033      	b.n	800117e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111a:	2b00      	cmp	r3, #0
 800111c:	d109      	bne.n	8001132 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f7ff fdf2 	bl	8000d08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2200      	movs	r2, #0
 8001128:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2200      	movs	r2, #0
 800112e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001136:	f003 0310 	and.w	r3, r3, #16
 800113a:	2b00      	cmp	r3, #0
 800113c:	d118      	bne.n	8001170 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001142:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001146:	f023 0302 	bic.w	r3, r3, #2
 800114a:	f043 0202 	orr.w	r2, r3, #2
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f000 fa58 	bl	8001608 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2200      	movs	r2, #0
 800115c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001162:	f023 0303 	bic.w	r3, r3, #3
 8001166:	f043 0201 	orr.w	r2, r3, #1
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	641a      	str	r2, [r3, #64]	; 0x40
 800116e:	e001      	b.n	8001174 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2200      	movs	r2, #0
 8001178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800117c:	7bfb      	ldrb	r3, [r7, #15]
}
 800117e:	4618      	mov	r0, r3
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
	...

08001188 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001194:	2300      	movs	r3, #0
 8001196:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d101      	bne.n	80011a6 <HAL_ADC_Start_DMA+0x1e>
 80011a2:	2302      	movs	r3, #2
 80011a4:	e0ce      	b.n	8001344 <HAL_ADC_Start_DMA+0x1bc>
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	2201      	movs	r2, #1
 80011aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	f003 0301 	and.w	r3, r3, #1
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d018      	beq.n	80011ee <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	689a      	ldr	r2, [r3, #8]
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f042 0201 	orr.w	r2, r2, #1
 80011ca:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80011cc:	4b5f      	ldr	r3, [pc, #380]	; (800134c <HAL_ADC_Start_DMA+0x1c4>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a5f      	ldr	r2, [pc, #380]	; (8001350 <HAL_ADC_Start_DMA+0x1c8>)
 80011d2:	fba2 2303 	umull	r2, r3, r2, r3
 80011d6:	0c9a      	lsrs	r2, r3, #18
 80011d8:	4613      	mov	r3, r2
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	4413      	add	r3, r2
 80011de:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80011e0:	e002      	b.n	80011e8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	3b01      	subs	r3, #1
 80011e6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d1f9      	bne.n	80011e2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011fc:	d107      	bne.n	800120e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	689a      	ldr	r2, [r3, #8]
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800120c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	f003 0301 	and.w	r3, r3, #1
 8001218:	2b01      	cmp	r3, #1
 800121a:	f040 8086 	bne.w	800132a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001222:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001226:	f023 0301 	bic.w	r3, r3, #1
 800122a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800123c:	2b00      	cmp	r3, #0
 800123e:	d007      	beq.n	8001250 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001244:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001248:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001254:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001258:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800125c:	d106      	bne.n	800126c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001262:	f023 0206 	bic.w	r2, r3, #6
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	645a      	str	r2, [r3, #68]	; 0x44
 800126a:	e002      	b.n	8001272 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	2200      	movs	r2, #0
 8001270:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	2200      	movs	r2, #0
 8001276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800127a:	4b36      	ldr	r3, [pc, #216]	; (8001354 <HAL_ADC_Start_DMA+0x1cc>)
 800127c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001282:	4a35      	ldr	r2, [pc, #212]	; (8001358 <HAL_ADC_Start_DMA+0x1d0>)
 8001284:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800128a:	4a34      	ldr	r2, [pc, #208]	; (800135c <HAL_ADC_Start_DMA+0x1d4>)
 800128c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001292:	4a33      	ldr	r2, [pc, #204]	; (8001360 <HAL_ADC_Start_DMA+0x1d8>)
 8001294:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800129e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	685a      	ldr	r2, [r3, #4]
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80012ae:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	689a      	ldr	r2, [r3, #8]
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80012be:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	334c      	adds	r3, #76	; 0x4c
 80012ca:	4619      	mov	r1, r3
 80012cc:	68ba      	ldr	r2, [r7, #8]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	f000 fcd8 	bl	8001c84 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f003 031f 	and.w	r3, r3, #31
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d10f      	bne.n	8001300 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d129      	bne.n	8001342 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	689a      	ldr	r2, [r3, #8]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	e020      	b.n	8001342 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a17      	ldr	r2, [pc, #92]	; (8001364 <HAL_ADC_Start_DMA+0x1dc>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d11b      	bne.n	8001342 <HAL_ADC_Start_DMA+0x1ba>
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d114      	bne.n	8001342 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	689a      	ldr	r2, [r3, #8]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	e00b      	b.n	8001342 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132e:	f043 0210 	orr.w	r2, r3, #16
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133a:	f043 0201 	orr.w	r2, r3, #1
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001342:	2300      	movs	r3, #0
}
 8001344:	4618      	mov	r0, r3
 8001346:	3718      	adds	r7, #24
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20000000 	.word	0x20000000
 8001350:	431bde83 	.word	0x431bde83
 8001354:	40012300 	.word	0x40012300
 8001358:	08001801 	.word	0x08001801
 800135c:	080018bb 	.word	0x080018bb
 8001360:	080018d7 	.word	0x080018d7
 8001364:	40012000 	.word	0x40012000

08001368 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80013ae:	2300      	movs	r3, #0
 80013b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d101      	bne.n	80013c0 <HAL_ADC_ConfigChannel+0x1c>
 80013bc:	2302      	movs	r3, #2
 80013be:	e113      	b.n	80015e8 <HAL_ADC_ConfigChannel+0x244>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2201      	movs	r2, #1
 80013c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2b09      	cmp	r3, #9
 80013ce:	d925      	bls.n	800141c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	68d9      	ldr	r1, [r3, #12]
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	b29b      	uxth	r3, r3
 80013dc:	461a      	mov	r2, r3
 80013de:	4613      	mov	r3, r2
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	4413      	add	r3, r2
 80013e4:	3b1e      	subs	r3, #30
 80013e6:	2207      	movs	r2, #7
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	43da      	mvns	r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	400a      	ands	r2, r1
 80013f4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	68d9      	ldr	r1, [r3, #12]
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	689a      	ldr	r2, [r3, #8]
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	b29b      	uxth	r3, r3
 8001406:	4618      	mov	r0, r3
 8001408:	4603      	mov	r3, r0
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	4403      	add	r3, r0
 800140e:	3b1e      	subs	r3, #30
 8001410:	409a      	lsls	r2, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	430a      	orrs	r2, r1
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	e022      	b.n	8001462 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	6919      	ldr	r1, [r3, #16]
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	b29b      	uxth	r3, r3
 8001428:	461a      	mov	r2, r3
 800142a:	4613      	mov	r3, r2
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	4413      	add	r3, r2
 8001430:	2207      	movs	r2, #7
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	43da      	mvns	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	400a      	ands	r2, r1
 800143e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	6919      	ldr	r1, [r3, #16]
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	689a      	ldr	r2, [r3, #8]
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	b29b      	uxth	r3, r3
 8001450:	4618      	mov	r0, r3
 8001452:	4603      	mov	r3, r0
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	4403      	add	r3, r0
 8001458:	409a      	lsls	r2, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	430a      	orrs	r2, r1
 8001460:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	2b06      	cmp	r3, #6
 8001468:	d824      	bhi.n	80014b4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685a      	ldr	r2, [r3, #4]
 8001474:	4613      	mov	r3, r2
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	4413      	add	r3, r2
 800147a:	3b05      	subs	r3, #5
 800147c:	221f      	movs	r2, #31
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	43da      	mvns	r2, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	400a      	ands	r2, r1
 800148a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	b29b      	uxth	r3, r3
 8001498:	4618      	mov	r0, r3
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685a      	ldr	r2, [r3, #4]
 800149e:	4613      	mov	r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	4413      	add	r3, r2
 80014a4:	3b05      	subs	r3, #5
 80014a6:	fa00 f203 	lsl.w	r2, r0, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	430a      	orrs	r2, r1
 80014b0:	635a      	str	r2, [r3, #52]	; 0x34
 80014b2:	e04c      	b.n	800154e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	2b0c      	cmp	r3, #12
 80014ba:	d824      	bhi.n	8001506 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685a      	ldr	r2, [r3, #4]
 80014c6:	4613      	mov	r3, r2
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	4413      	add	r3, r2
 80014cc:	3b23      	subs	r3, #35	; 0x23
 80014ce:	221f      	movs	r2, #31
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	43da      	mvns	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	400a      	ands	r2, r1
 80014dc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	4618      	mov	r0, r3
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685a      	ldr	r2, [r3, #4]
 80014f0:	4613      	mov	r3, r2
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	4413      	add	r3, r2
 80014f6:	3b23      	subs	r3, #35	; 0x23
 80014f8:	fa00 f203 	lsl.w	r2, r0, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	430a      	orrs	r2, r1
 8001502:	631a      	str	r2, [r3, #48]	; 0x30
 8001504:	e023      	b.n	800154e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685a      	ldr	r2, [r3, #4]
 8001510:	4613      	mov	r3, r2
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	4413      	add	r3, r2
 8001516:	3b41      	subs	r3, #65	; 0x41
 8001518:	221f      	movs	r2, #31
 800151a:	fa02 f303 	lsl.w	r3, r2, r3
 800151e:	43da      	mvns	r2, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	400a      	ands	r2, r1
 8001526:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	b29b      	uxth	r3, r3
 8001534:	4618      	mov	r0, r3
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685a      	ldr	r2, [r3, #4]
 800153a:	4613      	mov	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	4413      	add	r3, r2
 8001540:	3b41      	subs	r3, #65	; 0x41
 8001542:	fa00 f203 	lsl.w	r2, r0, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	430a      	orrs	r2, r1
 800154c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800154e:	4b29      	ldr	r3, [pc, #164]	; (80015f4 <HAL_ADC_ConfigChannel+0x250>)
 8001550:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a28      	ldr	r2, [pc, #160]	; (80015f8 <HAL_ADC_ConfigChannel+0x254>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d10f      	bne.n	800157c <HAL_ADC_ConfigChannel+0x1d8>
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2b12      	cmp	r3, #18
 8001562:	d10b      	bne.n	800157c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a1d      	ldr	r2, [pc, #116]	; (80015f8 <HAL_ADC_ConfigChannel+0x254>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d12b      	bne.n	80015de <HAL_ADC_ConfigChannel+0x23a>
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a1c      	ldr	r2, [pc, #112]	; (80015fc <HAL_ADC_ConfigChannel+0x258>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d003      	beq.n	8001598 <HAL_ADC_ConfigChannel+0x1f4>
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2b11      	cmp	r3, #17
 8001596:	d122      	bne.n	80015de <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a11      	ldr	r2, [pc, #68]	; (80015fc <HAL_ADC_ConfigChannel+0x258>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d111      	bne.n	80015de <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80015ba:	4b11      	ldr	r3, [pc, #68]	; (8001600 <HAL_ADC_ConfigChannel+0x25c>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a11      	ldr	r2, [pc, #68]	; (8001604 <HAL_ADC_ConfigChannel+0x260>)
 80015c0:	fba2 2303 	umull	r2, r3, r2, r3
 80015c4:	0c9a      	lsrs	r2, r3, #18
 80015c6:	4613      	mov	r3, r2
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	4413      	add	r3, r2
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015d0:	e002      	b.n	80015d8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	3b01      	subs	r3, #1
 80015d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d1f9      	bne.n	80015d2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80015e6:	2300      	movs	r3, #0
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3714      	adds	r7, #20
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	40012300 	.word	0x40012300
 80015f8:	40012000 	.word	0x40012000
 80015fc:	10000012 	.word	0x10000012
 8001600:	20000000 	.word	0x20000000
 8001604:	431bde83 	.word	0x431bde83

08001608 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001610:	4b79      	ldr	r3, [pc, #484]	; (80017f8 <ADC_Init+0x1f0>)
 8001612:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	685a      	ldr	r2, [r3, #4]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	431a      	orrs	r2, r3
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	685a      	ldr	r2, [r3, #4]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800163c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	6859      	ldr	r1, [r3, #4]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	691b      	ldr	r3, [r3, #16]
 8001648:	021a      	lsls	r2, r3, #8
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	430a      	orrs	r2, r1
 8001650:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	685a      	ldr	r2, [r3, #4]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001660:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	6859      	ldr	r1, [r3, #4]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	689a      	ldr	r2, [r3, #8]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	430a      	orrs	r2, r1
 8001672:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	689a      	ldr	r2, [r3, #8]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001682:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	6899      	ldr	r1, [r3, #8]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	68da      	ldr	r2, [r3, #12]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	430a      	orrs	r2, r1
 8001694:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800169a:	4a58      	ldr	r2, [pc, #352]	; (80017fc <ADC_Init+0x1f4>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d022      	beq.n	80016e6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	689a      	ldr	r2, [r3, #8]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016ae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	6899      	ldr	r1, [r3, #8]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	430a      	orrs	r2, r1
 80016c0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	689a      	ldr	r2, [r3, #8]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	6899      	ldr	r1, [r3, #8]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	430a      	orrs	r2, r1
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	e00f      	b.n	8001706 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	689a      	ldr	r2, [r3, #8]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	689a      	ldr	r2, [r3, #8]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001704:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	689a      	ldr	r2, [r3, #8]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f022 0202 	bic.w	r2, r2, #2
 8001714:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	6899      	ldr	r1, [r3, #8]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	7e1b      	ldrb	r3, [r3, #24]
 8001720:	005a      	lsls	r2, r3, #1
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	430a      	orrs	r2, r1
 8001728:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d01b      	beq.n	800176c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	685a      	ldr	r2, [r3, #4]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001742:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	685a      	ldr	r2, [r3, #4]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001752:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	6859      	ldr	r1, [r3, #4]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175e:	3b01      	subs	r3, #1
 8001760:	035a      	lsls	r2, r3, #13
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	430a      	orrs	r2, r1
 8001768:	605a      	str	r2, [r3, #4]
 800176a:	e007      	b.n	800177c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	685a      	ldr	r2, [r3, #4]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800177a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800178a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	69db      	ldr	r3, [r3, #28]
 8001796:	3b01      	subs	r3, #1
 8001798:	051a      	lsls	r2, r3, #20
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	430a      	orrs	r2, r1
 80017a0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	689a      	ldr	r2, [r3, #8]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80017b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	6899      	ldr	r1, [r3, #8]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80017be:	025a      	lsls	r2, r3, #9
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	430a      	orrs	r2, r1
 80017c6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	689a      	ldr	r2, [r3, #8]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	6899      	ldr	r1, [r3, #8]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	695b      	ldr	r3, [r3, #20]
 80017e2:	029a      	lsls	r2, r3, #10
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	430a      	orrs	r2, r1
 80017ea:	609a      	str	r2, [r3, #8]
}
 80017ec:	bf00      	nop
 80017ee:	3714      	adds	r7, #20
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	40012300 	.word	0x40012300
 80017fc:	0f000001 	.word	0x0f000001

08001800 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800180c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001812:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001816:	2b00      	cmp	r3, #0
 8001818:	d13c      	bne.n	8001894 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d12b      	bne.n	800188c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001838:	2b00      	cmp	r3, #0
 800183a:	d127      	bne.n	800188c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001842:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001846:	2b00      	cmp	r3, #0
 8001848:	d006      	beq.n	8001858 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001854:	2b00      	cmp	r3, #0
 8001856:	d119      	bne.n	800188c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	685a      	ldr	r2, [r3, #4]
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f022 0220 	bic.w	r2, r2, #32
 8001866:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001878:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d105      	bne.n	800188c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001884:	f043 0201 	orr.w	r2, r3, #1
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800188c:	68f8      	ldr	r0, [r7, #12]
 800188e:	f7ff fd6b 	bl	8001368 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001892:	e00e      	b.n	80018b2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001898:	f003 0310 	and.w	r3, r3, #16
 800189c:	2b00      	cmp	r3, #0
 800189e:	d003      	beq.n	80018a8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80018a0:	68f8      	ldr	r0, [r7, #12]
 80018a2:	f7ff fd75 	bl	8001390 <HAL_ADC_ErrorCallback>
}
 80018a6:	e004      	b.n	80018b2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	4798      	blx	r3
}
 80018b2:	bf00      	nop
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b084      	sub	sp, #16
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018c6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80018c8:	68f8      	ldr	r0, [r7, #12]
 80018ca:	f7ff fd57 	bl	800137c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80018ce:	bf00      	nop
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b084      	sub	sp, #16
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018e2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2240      	movs	r2, #64	; 0x40
 80018e8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ee:	f043 0204 	orr.w	r2, r3, #4
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80018f6:	68f8      	ldr	r0, [r7, #12]
 80018f8:	f7ff fd4a 	bl	8001390 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80018fc:	bf00      	nop
 80018fe:	3710      	adds	r7, #16
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001914:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <__NVIC_SetPriorityGrouping+0x44>)
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800191a:	68ba      	ldr	r2, [r7, #8]
 800191c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001920:	4013      	ands	r3, r2
 8001922:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800192c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001930:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001934:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001936:	4a04      	ldr	r2, [pc, #16]	; (8001948 <__NVIC_SetPriorityGrouping+0x44>)
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	60d3      	str	r3, [r2, #12]
}
 800193c:	bf00      	nop
 800193e:	3714      	adds	r7, #20
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	e000ed00 	.word	0xe000ed00

0800194c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001950:	4b04      	ldr	r3, [pc, #16]	; (8001964 <__NVIC_GetPriorityGrouping+0x18>)
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	0a1b      	lsrs	r3, r3, #8
 8001956:	f003 0307 	and.w	r3, r3, #7
}
 800195a:	4618      	mov	r0, r3
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	e000ed00 	.word	0xe000ed00

08001968 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001976:	2b00      	cmp	r3, #0
 8001978:	db0b      	blt.n	8001992 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800197a:	79fb      	ldrb	r3, [r7, #7]
 800197c:	f003 021f 	and.w	r2, r3, #31
 8001980:	4907      	ldr	r1, [pc, #28]	; (80019a0 <__NVIC_EnableIRQ+0x38>)
 8001982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001986:	095b      	lsrs	r3, r3, #5
 8001988:	2001      	movs	r0, #1
 800198a:	fa00 f202 	lsl.w	r2, r0, r2
 800198e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001992:	bf00      	nop
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	e000e100 	.word	0xe000e100

080019a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	4603      	mov	r3, r0
 80019ac:	6039      	str	r1, [r7, #0]
 80019ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	db0a      	blt.n	80019ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	b2da      	uxtb	r2, r3
 80019bc:	490c      	ldr	r1, [pc, #48]	; (80019f0 <__NVIC_SetPriority+0x4c>)
 80019be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c2:	0112      	lsls	r2, r2, #4
 80019c4:	b2d2      	uxtb	r2, r2
 80019c6:	440b      	add	r3, r1
 80019c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019cc:	e00a      	b.n	80019e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	b2da      	uxtb	r2, r3
 80019d2:	4908      	ldr	r1, [pc, #32]	; (80019f4 <__NVIC_SetPriority+0x50>)
 80019d4:	79fb      	ldrb	r3, [r7, #7]
 80019d6:	f003 030f 	and.w	r3, r3, #15
 80019da:	3b04      	subs	r3, #4
 80019dc:	0112      	lsls	r2, r2, #4
 80019de:	b2d2      	uxtb	r2, r2
 80019e0:	440b      	add	r3, r1
 80019e2:	761a      	strb	r2, [r3, #24]
}
 80019e4:	bf00      	nop
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	e000e100 	.word	0xe000e100
 80019f4:	e000ed00 	.word	0xe000ed00

080019f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b089      	sub	sp, #36	; 0x24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f003 0307 	and.w	r3, r3, #7
 8001a0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	f1c3 0307 	rsb	r3, r3, #7
 8001a12:	2b04      	cmp	r3, #4
 8001a14:	bf28      	it	cs
 8001a16:	2304      	movcs	r3, #4
 8001a18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	3304      	adds	r3, #4
 8001a1e:	2b06      	cmp	r3, #6
 8001a20:	d902      	bls.n	8001a28 <NVIC_EncodePriority+0x30>
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	3b03      	subs	r3, #3
 8001a26:	e000      	b.n	8001a2a <NVIC_EncodePriority+0x32>
 8001a28:	2300      	movs	r3, #0
 8001a2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	fa02 f303 	lsl.w	r3, r2, r3
 8001a36:	43da      	mvns	r2, r3
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	401a      	ands	r2, r3
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a40:	f04f 31ff 	mov.w	r1, #4294967295
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4a:	43d9      	mvns	r1, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a50:	4313      	orrs	r3, r2
         );
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3724      	adds	r7, #36	; 0x24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
	...

08001a60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a70:	d301      	bcc.n	8001a76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a72:	2301      	movs	r3, #1
 8001a74:	e00f      	b.n	8001a96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a76:	4a0a      	ldr	r2, [pc, #40]	; (8001aa0 <SysTick_Config+0x40>)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a7e:	210f      	movs	r1, #15
 8001a80:	f04f 30ff 	mov.w	r0, #4294967295
 8001a84:	f7ff ff8e 	bl	80019a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a88:	4b05      	ldr	r3, [pc, #20]	; (8001aa0 <SysTick_Config+0x40>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a8e:	4b04      	ldr	r3, [pc, #16]	; (8001aa0 <SysTick_Config+0x40>)
 8001a90:	2207      	movs	r2, #7
 8001a92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	e000e010 	.word	0xe000e010

08001aa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f7ff ff29 	bl	8001904 <__NVIC_SetPriorityGrouping>
}
 8001ab2:	bf00      	nop
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b086      	sub	sp, #24
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	60b9      	str	r1, [r7, #8]
 8001ac4:	607a      	str	r2, [r7, #4]
 8001ac6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001acc:	f7ff ff3e 	bl	800194c <__NVIC_GetPriorityGrouping>
 8001ad0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	68b9      	ldr	r1, [r7, #8]
 8001ad6:	6978      	ldr	r0, [r7, #20]
 8001ad8:	f7ff ff8e 	bl	80019f8 <NVIC_EncodePriority>
 8001adc:	4602      	mov	r2, r0
 8001ade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ae2:	4611      	mov	r1, r2
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff ff5d 	bl	80019a4 <__NVIC_SetPriority>
}
 8001aea:	bf00      	nop
 8001aec:	3718      	adds	r7, #24
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b082      	sub	sp, #8
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	4603      	mov	r3, r0
 8001afa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff ff31 	bl	8001968 <__NVIC_EnableIRQ>
}
 8001b06:	bf00      	nop
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b082      	sub	sp, #8
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f7ff ffa2 	bl	8001a60 <SysTick_Config>
 8001b1c:	4603      	mov	r3, r0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
	...

08001b28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b30:	2300      	movs	r3, #0
 8001b32:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001b34:	f7ff fab4 	bl	80010a0 <HAL_GetTick>
 8001b38:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d101      	bne.n	8001b44 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e099      	b.n	8001c78 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2202      	movs	r2, #2
 8001b50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f022 0201 	bic.w	r2, r2, #1
 8001b62:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b64:	e00f      	b.n	8001b86 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b66:	f7ff fa9b 	bl	80010a0 <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	2b05      	cmp	r3, #5
 8001b72:	d908      	bls.n	8001b86 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2220      	movs	r2, #32
 8001b78:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2203      	movs	r2, #3
 8001b7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e078      	b.n	8001c78 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0301 	and.w	r3, r3, #1
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d1e8      	bne.n	8001b66 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b9c:	697a      	ldr	r2, [r7, #20]
 8001b9e:	4b38      	ldr	r3, [pc, #224]	; (8001c80 <HAL_DMA_Init+0x158>)
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685a      	ldr	r2, [r3, #4]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	691b      	ldr	r3, [r3, #16]
 8001bb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6a1b      	ldr	r3, [r3, #32]
 8001bd0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bd2:	697a      	ldr	r2, [r7, #20]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bdc:	2b04      	cmp	r3, #4
 8001bde:	d107      	bne.n	8001bf0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be8:	4313      	orrs	r3, r2
 8001bea:	697a      	ldr	r2, [r7, #20]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	697a      	ldr	r2, [r7, #20]
 8001bf6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	695b      	ldr	r3, [r3, #20]
 8001bfe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	f023 0307 	bic.w	r3, r3, #7
 8001c06:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0c:	697a      	ldr	r2, [r7, #20]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c16:	2b04      	cmp	r3, #4
 8001c18:	d117      	bne.n	8001c4a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c1e:	697a      	ldr	r2, [r7, #20]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d00e      	beq.n	8001c4a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f000 fa6f 	bl	8002110 <DMA_CheckFifoParam>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d008      	beq.n	8001c4a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2240      	movs	r2, #64	; 0x40
 8001c3c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2201      	movs	r2, #1
 8001c42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001c46:	2301      	movs	r3, #1
 8001c48:	e016      	b.n	8001c78 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	697a      	ldr	r2, [r7, #20]
 8001c50:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 fa26 	bl	80020a4 <DMA_CalcBaseAndBitshift>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c60:	223f      	movs	r2, #63	; 0x3f
 8001c62:	409a      	lsls	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2201      	movs	r2, #1
 8001c72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001c76:	2300      	movs	r3, #0
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3718      	adds	r7, #24
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	f010803f 	.word	0xf010803f

08001c84 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
 8001c90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c92:	2300      	movs	r3, #0
 8001c94:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c9a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d101      	bne.n	8001caa <HAL_DMA_Start_IT+0x26>
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	e040      	b.n	8001d2c <HAL_DMA_Start_IT+0xa8>
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2201      	movs	r2, #1
 8001cae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d12f      	bne.n	8001d1e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2202      	movs	r2, #2
 8001cc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	68b9      	ldr	r1, [r7, #8]
 8001cd2:	68f8      	ldr	r0, [r7, #12]
 8001cd4:	f000 f9b8 	bl	8002048 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cdc:	223f      	movs	r2, #63	; 0x3f
 8001cde:	409a      	lsls	r2, r3
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f042 0216 	orr.w	r2, r2, #22
 8001cf2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d007      	beq.n	8001d0c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f042 0208 	orr.w	r2, r2, #8
 8001d0a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f042 0201 	orr.w	r2, r2, #1
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	e005      	b.n	8001d2a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001d26:	2302      	movs	r3, #2
 8001d28:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001d2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3718      	adds	r7, #24
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d40:	4b92      	ldr	r3, [pc, #584]	; (8001f8c <HAL_DMA_IRQHandler+0x258>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a92      	ldr	r2, [pc, #584]	; (8001f90 <HAL_DMA_IRQHandler+0x25c>)
 8001d46:	fba2 2303 	umull	r2, r3, r2, r3
 8001d4a:	0a9b      	lsrs	r3, r3, #10
 8001d4c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d52:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d5e:	2208      	movs	r2, #8
 8001d60:	409a      	lsls	r2, r3
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	4013      	ands	r3, r2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d01a      	beq.n	8001da0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0304 	and.w	r3, r3, #4
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d013      	beq.n	8001da0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f022 0204 	bic.w	r2, r2, #4
 8001d86:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d8c:	2208      	movs	r2, #8
 8001d8e:	409a      	lsls	r2, r3
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d98:	f043 0201 	orr.w	r2, r3, #1
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001da4:	2201      	movs	r2, #1
 8001da6:	409a      	lsls	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	4013      	ands	r3, r2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d012      	beq.n	8001dd6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	695b      	ldr	r3, [r3, #20]
 8001db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d00b      	beq.n	8001dd6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	409a      	lsls	r2, r3
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dce:	f043 0202 	orr.w	r2, r3, #2
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dda:	2204      	movs	r2, #4
 8001ddc:	409a      	lsls	r2, r3
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	4013      	ands	r3, r2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d012      	beq.n	8001e0c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0302 	and.w	r3, r3, #2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d00b      	beq.n	8001e0c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df8:	2204      	movs	r2, #4
 8001dfa:	409a      	lsls	r2, r3
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e04:	f043 0204 	orr.w	r2, r3, #4
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e10:	2210      	movs	r2, #16
 8001e12:	409a      	lsls	r2, r3
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	4013      	ands	r3, r2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d043      	beq.n	8001ea4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0308 	and.w	r3, r3, #8
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d03c      	beq.n	8001ea4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e2e:	2210      	movs	r2, #16
 8001e30:	409a      	lsls	r2, r3
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d018      	beq.n	8001e76 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d108      	bne.n	8001e64 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d024      	beq.n	8001ea4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	4798      	blx	r3
 8001e62:	e01f      	b.n	8001ea4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d01b      	beq.n	8001ea4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	4798      	blx	r3
 8001e74:	e016      	b.n	8001ea4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d107      	bne.n	8001e94 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f022 0208 	bic.w	r2, r2, #8
 8001e92:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d003      	beq.n	8001ea4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea8:	2220      	movs	r2, #32
 8001eaa:	409a      	lsls	r2, r3
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	f000 808e 	beq.w	8001fd2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0310 	and.w	r3, r3, #16
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	f000 8086 	beq.w	8001fd2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eca:	2220      	movs	r2, #32
 8001ecc:	409a      	lsls	r2, r3
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b05      	cmp	r3, #5
 8001edc:	d136      	bne.n	8001f4c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f022 0216 	bic.w	r2, r2, #22
 8001eec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	695a      	ldr	r2, [r3, #20]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001efc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d103      	bne.n	8001f0e <HAL_DMA_IRQHandler+0x1da>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d007      	beq.n	8001f1e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f022 0208 	bic.w	r2, r2, #8
 8001f1c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f22:	223f      	movs	r2, #63	; 0x3f
 8001f24:	409a      	lsls	r2, r3
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2201      	movs	r2, #1
 8001f36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d07d      	beq.n	800203e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	4798      	blx	r3
        }
        return;
 8001f4a:	e078      	b.n	800203e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d01c      	beq.n	8001f94 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d108      	bne.n	8001f7a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d030      	beq.n	8001fd2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	4798      	blx	r3
 8001f78:	e02b      	b.n	8001fd2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d027      	beq.n	8001fd2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	4798      	blx	r3
 8001f8a:	e022      	b.n	8001fd2 <HAL_DMA_IRQHandler+0x29e>
 8001f8c:	20000000 	.word	0x20000000
 8001f90:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d10f      	bne.n	8001fc2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f022 0210 	bic.w	r2, r2, #16
 8001fb0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d003      	beq.n	8001fd2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d032      	beq.n	8002040 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d022      	beq.n	800202c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2205      	movs	r2, #5
 8001fea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f022 0201 	bic.w	r2, r2, #1
 8001ffc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	3301      	adds	r3, #1
 8002002:	60bb      	str	r3, [r7, #8]
 8002004:	697a      	ldr	r2, [r7, #20]
 8002006:	429a      	cmp	r2, r3
 8002008:	d307      	bcc.n	800201a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0301 	and.w	r3, r3, #1
 8002014:	2b00      	cmp	r3, #0
 8002016:	d1f2      	bne.n	8001ffe <HAL_DMA_IRQHandler+0x2ca>
 8002018:	e000      	b.n	800201c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800201a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002030:	2b00      	cmp	r3, #0
 8002032:	d005      	beq.n	8002040 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	4798      	blx	r3
 800203c:	e000      	b.n	8002040 <HAL_DMA_IRQHandler+0x30c>
        return;
 800203e:	bf00      	nop
    }
  }
}
 8002040:	3718      	adds	r7, #24
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop

08002048 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
 8002054:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002064:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	683a      	ldr	r2, [r7, #0]
 800206c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	2b40      	cmp	r3, #64	; 0x40
 8002074:	d108      	bne.n	8002088 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	68ba      	ldr	r2, [r7, #8]
 8002084:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002086:	e007      	b.n	8002098 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68ba      	ldr	r2, [r7, #8]
 800208e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	60da      	str	r2, [r3, #12]
}
 8002098:	bf00      	nop
 800209a:	3714      	adds	r7, #20
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	3b10      	subs	r3, #16
 80020b4:	4a14      	ldr	r2, [pc, #80]	; (8002108 <DMA_CalcBaseAndBitshift+0x64>)
 80020b6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ba:	091b      	lsrs	r3, r3, #4
 80020bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80020be:	4a13      	ldr	r2, [pc, #76]	; (800210c <DMA_CalcBaseAndBitshift+0x68>)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	4413      	add	r3, r2
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	461a      	mov	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2b03      	cmp	r3, #3
 80020d0:	d909      	bls.n	80020e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80020da:	f023 0303 	bic.w	r3, r3, #3
 80020de:	1d1a      	adds	r2, r3, #4
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	659a      	str	r2, [r3, #88]	; 0x58
 80020e4:	e007      	b.n	80020f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80020ee:	f023 0303 	bic.w	r3, r3, #3
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3714      	adds	r7, #20
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	aaaaaaab 	.word	0xaaaaaaab
 800210c:	08003d08 	.word	0x08003d08

08002110 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002118:	2300      	movs	r3, #0
 800211a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002120:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d11f      	bne.n	800216a <DMA_CheckFifoParam+0x5a>
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	2b03      	cmp	r3, #3
 800212e:	d856      	bhi.n	80021de <DMA_CheckFifoParam+0xce>
 8002130:	a201      	add	r2, pc, #4	; (adr r2, 8002138 <DMA_CheckFifoParam+0x28>)
 8002132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002136:	bf00      	nop
 8002138:	08002149 	.word	0x08002149
 800213c:	0800215b 	.word	0x0800215b
 8002140:	08002149 	.word	0x08002149
 8002144:	080021df 	.word	0x080021df
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d046      	beq.n	80021e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002158:	e043      	b.n	80021e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002162:	d140      	bne.n	80021e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002168:	e03d      	b.n	80021e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	699b      	ldr	r3, [r3, #24]
 800216e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002172:	d121      	bne.n	80021b8 <DMA_CheckFifoParam+0xa8>
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	2b03      	cmp	r3, #3
 8002178:	d837      	bhi.n	80021ea <DMA_CheckFifoParam+0xda>
 800217a:	a201      	add	r2, pc, #4	; (adr r2, 8002180 <DMA_CheckFifoParam+0x70>)
 800217c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002180:	08002191 	.word	0x08002191
 8002184:	08002197 	.word	0x08002197
 8002188:	08002191 	.word	0x08002191
 800218c:	080021a9 	.word	0x080021a9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	73fb      	strb	r3, [r7, #15]
      break;
 8002194:	e030      	b.n	80021f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800219a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d025      	beq.n	80021ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021a6:	e022      	b.n	80021ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021b0:	d11f      	bne.n	80021f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80021b6:	e01c      	b.n	80021f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d903      	bls.n	80021c6 <DMA_CheckFifoParam+0xb6>
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	2b03      	cmp	r3, #3
 80021c2:	d003      	beq.n	80021cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80021c4:	e018      	b.n	80021f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	73fb      	strb	r3, [r7, #15]
      break;
 80021ca:	e015      	b.n	80021f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d00e      	beq.n	80021f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	73fb      	strb	r3, [r7, #15]
      break;
 80021dc:	e00b      	b.n	80021f6 <DMA_CheckFifoParam+0xe6>
      break;
 80021de:	bf00      	nop
 80021e0:	e00a      	b.n	80021f8 <DMA_CheckFifoParam+0xe8>
      break;
 80021e2:	bf00      	nop
 80021e4:	e008      	b.n	80021f8 <DMA_CheckFifoParam+0xe8>
      break;
 80021e6:	bf00      	nop
 80021e8:	e006      	b.n	80021f8 <DMA_CheckFifoParam+0xe8>
      break;
 80021ea:	bf00      	nop
 80021ec:	e004      	b.n	80021f8 <DMA_CheckFifoParam+0xe8>
      break;
 80021ee:	bf00      	nop
 80021f0:	e002      	b.n	80021f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80021f2:	bf00      	nop
 80021f4:	e000      	b.n	80021f8 <DMA_CheckFifoParam+0xe8>
      break;
 80021f6:	bf00      	nop
    }
  } 
  
  return status; 
 80021f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3714      	adds	r7, #20
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop

08002208 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002208:	b480      	push	{r7}
 800220a:	b089      	sub	sp, #36	; 0x24
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002212:	2300      	movs	r3, #0
 8002214:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002216:	2300      	movs	r3, #0
 8002218:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800221a:	2300      	movs	r3, #0
 800221c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800221e:	2300      	movs	r3, #0
 8002220:	61fb      	str	r3, [r7, #28]
 8002222:	e159      	b.n	80024d8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002224:	2201      	movs	r2, #1
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	697a      	ldr	r2, [r7, #20]
 8002234:	4013      	ands	r3, r2
 8002236:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	429a      	cmp	r2, r3
 800223e:	f040 8148 	bne.w	80024d2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f003 0303 	and.w	r3, r3, #3
 800224a:	2b01      	cmp	r3, #1
 800224c:	d005      	beq.n	800225a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002256:	2b02      	cmp	r3, #2
 8002258:	d130      	bne.n	80022bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	2203      	movs	r2, #3
 8002266:	fa02 f303 	lsl.w	r3, r2, r3
 800226a:	43db      	mvns	r3, r3
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	4013      	ands	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	68da      	ldr	r2, [r3, #12]
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	4313      	orrs	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002290:	2201      	movs	r2, #1
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	43db      	mvns	r3, r3
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	4013      	ands	r3, r2
 800229e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	091b      	lsrs	r3, r3, #4
 80022a6:	f003 0201 	and.w	r2, r3, #1
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f003 0303 	and.w	r3, r3, #3
 80022c4:	2b03      	cmp	r3, #3
 80022c6:	d017      	beq.n	80022f8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	2203      	movs	r2, #3
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	43db      	mvns	r3, r3
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	4013      	ands	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	689a      	ldr	r2, [r3, #8]
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f003 0303 	and.w	r3, r3, #3
 8002300:	2b02      	cmp	r3, #2
 8002302:	d123      	bne.n	800234c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	08da      	lsrs	r2, r3, #3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	3208      	adds	r2, #8
 800230c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002310:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	f003 0307 	and.w	r3, r3, #7
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	220f      	movs	r2, #15
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	43db      	mvns	r3, r3
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4013      	ands	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	691a      	ldr	r2, [r3, #16]
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	f003 0307 	and.w	r3, r3, #7
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	4313      	orrs	r3, r2
 800233c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	08da      	lsrs	r2, r3, #3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	3208      	adds	r2, #8
 8002346:	69b9      	ldr	r1, [r7, #24]
 8002348:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	2203      	movs	r2, #3
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	43db      	mvns	r3, r3
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	4013      	ands	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f003 0203 	and.w	r2, r3, #3
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	4313      	orrs	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002388:	2b00      	cmp	r3, #0
 800238a:	f000 80a2 	beq.w	80024d2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800238e:	2300      	movs	r3, #0
 8002390:	60fb      	str	r3, [r7, #12]
 8002392:	4b57      	ldr	r3, [pc, #348]	; (80024f0 <HAL_GPIO_Init+0x2e8>)
 8002394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002396:	4a56      	ldr	r2, [pc, #344]	; (80024f0 <HAL_GPIO_Init+0x2e8>)
 8002398:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800239c:	6453      	str	r3, [r2, #68]	; 0x44
 800239e:	4b54      	ldr	r3, [pc, #336]	; (80024f0 <HAL_GPIO_Init+0x2e8>)
 80023a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023aa:	4a52      	ldr	r2, [pc, #328]	; (80024f4 <HAL_GPIO_Init+0x2ec>)
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	089b      	lsrs	r3, r3, #2
 80023b0:	3302      	adds	r3, #2
 80023b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	f003 0303 	and.w	r3, r3, #3
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	220f      	movs	r2, #15
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	43db      	mvns	r3, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4013      	ands	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a49      	ldr	r2, [pc, #292]	; (80024f8 <HAL_GPIO_Init+0x2f0>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d019      	beq.n	800240a <HAL_GPIO_Init+0x202>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a48      	ldr	r2, [pc, #288]	; (80024fc <HAL_GPIO_Init+0x2f4>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d013      	beq.n	8002406 <HAL_GPIO_Init+0x1fe>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a47      	ldr	r2, [pc, #284]	; (8002500 <HAL_GPIO_Init+0x2f8>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d00d      	beq.n	8002402 <HAL_GPIO_Init+0x1fa>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a46      	ldr	r2, [pc, #280]	; (8002504 <HAL_GPIO_Init+0x2fc>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d007      	beq.n	80023fe <HAL_GPIO_Init+0x1f6>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a45      	ldr	r2, [pc, #276]	; (8002508 <HAL_GPIO_Init+0x300>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d101      	bne.n	80023fa <HAL_GPIO_Init+0x1f2>
 80023f6:	2304      	movs	r3, #4
 80023f8:	e008      	b.n	800240c <HAL_GPIO_Init+0x204>
 80023fa:	2307      	movs	r3, #7
 80023fc:	e006      	b.n	800240c <HAL_GPIO_Init+0x204>
 80023fe:	2303      	movs	r3, #3
 8002400:	e004      	b.n	800240c <HAL_GPIO_Init+0x204>
 8002402:	2302      	movs	r3, #2
 8002404:	e002      	b.n	800240c <HAL_GPIO_Init+0x204>
 8002406:	2301      	movs	r3, #1
 8002408:	e000      	b.n	800240c <HAL_GPIO_Init+0x204>
 800240a:	2300      	movs	r3, #0
 800240c:	69fa      	ldr	r2, [r7, #28]
 800240e:	f002 0203 	and.w	r2, r2, #3
 8002412:	0092      	lsls	r2, r2, #2
 8002414:	4093      	lsls	r3, r2
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	4313      	orrs	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800241c:	4935      	ldr	r1, [pc, #212]	; (80024f4 <HAL_GPIO_Init+0x2ec>)
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	089b      	lsrs	r3, r3, #2
 8002422:	3302      	adds	r3, #2
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800242a:	4b38      	ldr	r3, [pc, #224]	; (800250c <HAL_GPIO_Init+0x304>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	43db      	mvns	r3, r3
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	4013      	ands	r3, r2
 8002438:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d003      	beq.n	800244e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	4313      	orrs	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800244e:	4a2f      	ldr	r2, [pc, #188]	; (800250c <HAL_GPIO_Init+0x304>)
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002454:	4b2d      	ldr	r3, [pc, #180]	; (800250c <HAL_GPIO_Init+0x304>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	43db      	mvns	r3, r3
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	4013      	ands	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d003      	beq.n	8002478 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	4313      	orrs	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002478:	4a24      	ldr	r2, [pc, #144]	; (800250c <HAL_GPIO_Init+0x304>)
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800247e:	4b23      	ldr	r3, [pc, #140]	; (800250c <HAL_GPIO_Init+0x304>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	43db      	mvns	r3, r3
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	4013      	ands	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d003      	beq.n	80024a2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	4313      	orrs	r3, r2
 80024a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024a2:	4a1a      	ldr	r2, [pc, #104]	; (800250c <HAL_GPIO_Init+0x304>)
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024a8:	4b18      	ldr	r3, [pc, #96]	; (800250c <HAL_GPIO_Init+0x304>)
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	43db      	mvns	r3, r3
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	4013      	ands	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d003      	beq.n	80024cc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024cc:	4a0f      	ldr	r2, [pc, #60]	; (800250c <HAL_GPIO_Init+0x304>)
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	3301      	adds	r3, #1
 80024d6:	61fb      	str	r3, [r7, #28]
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	2b0f      	cmp	r3, #15
 80024dc:	f67f aea2 	bls.w	8002224 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024e0:	bf00      	nop
 80024e2:	bf00      	nop
 80024e4:	3724      	adds	r7, #36	; 0x24
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	40023800 	.word	0x40023800
 80024f4:	40013800 	.word	0x40013800
 80024f8:	40020000 	.word	0x40020000
 80024fc:	40020400 	.word	0x40020400
 8002500:	40020800 	.word	0x40020800
 8002504:	40020c00 	.word	0x40020c00
 8002508:	40021000 	.word	0x40021000
 800250c:	40013c00 	.word	0x40013c00

08002510 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d101      	bne.n	8002522 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e264      	b.n	80029ec <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	2b00      	cmp	r3, #0
 800252c:	d075      	beq.n	800261a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800252e:	4ba3      	ldr	r3, [pc, #652]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f003 030c 	and.w	r3, r3, #12
 8002536:	2b04      	cmp	r3, #4
 8002538:	d00c      	beq.n	8002554 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800253a:	4ba0      	ldr	r3, [pc, #640]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002542:	2b08      	cmp	r3, #8
 8002544:	d112      	bne.n	800256c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002546:	4b9d      	ldr	r3, [pc, #628]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800254e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002552:	d10b      	bne.n	800256c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002554:	4b99      	ldr	r3, [pc, #612]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d05b      	beq.n	8002618 <HAL_RCC_OscConfig+0x108>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d157      	bne.n	8002618 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e23f      	b.n	80029ec <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002574:	d106      	bne.n	8002584 <HAL_RCC_OscConfig+0x74>
 8002576:	4b91      	ldr	r3, [pc, #580]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a90      	ldr	r2, [pc, #576]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 800257c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002580:	6013      	str	r3, [r2, #0]
 8002582:	e01d      	b.n	80025c0 <HAL_RCC_OscConfig+0xb0>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800258c:	d10c      	bne.n	80025a8 <HAL_RCC_OscConfig+0x98>
 800258e:	4b8b      	ldr	r3, [pc, #556]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a8a      	ldr	r2, [pc, #552]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 8002594:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002598:	6013      	str	r3, [r2, #0]
 800259a:	4b88      	ldr	r3, [pc, #544]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a87      	ldr	r2, [pc, #540]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 80025a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025a4:	6013      	str	r3, [r2, #0]
 80025a6:	e00b      	b.n	80025c0 <HAL_RCC_OscConfig+0xb0>
 80025a8:	4b84      	ldr	r3, [pc, #528]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a83      	ldr	r2, [pc, #524]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 80025ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025b2:	6013      	str	r3, [r2, #0]
 80025b4:	4b81      	ldr	r3, [pc, #516]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a80      	ldr	r2, [pc, #512]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 80025ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d013      	beq.n	80025f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c8:	f7fe fd6a 	bl	80010a0 <HAL_GetTick>
 80025cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ce:	e008      	b.n	80025e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025d0:	f7fe fd66 	bl	80010a0 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b64      	cmp	r3, #100	; 0x64
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e204      	b.n	80029ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025e2:	4b76      	ldr	r3, [pc, #472]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d0f0      	beq.n	80025d0 <HAL_RCC_OscConfig+0xc0>
 80025ee:	e014      	b.n	800261a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f0:	f7fe fd56 	bl	80010a0 <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025f8:	f7fe fd52 	bl	80010a0 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b64      	cmp	r3, #100	; 0x64
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e1f0      	b.n	80029ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800260a:	4b6c      	ldr	r3, [pc, #432]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1f0      	bne.n	80025f8 <HAL_RCC_OscConfig+0xe8>
 8002616:	e000      	b.n	800261a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002618:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d063      	beq.n	80026ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002626:	4b65      	ldr	r3, [pc, #404]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f003 030c 	and.w	r3, r3, #12
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00b      	beq.n	800264a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002632:	4b62      	ldr	r3, [pc, #392]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800263a:	2b08      	cmp	r3, #8
 800263c:	d11c      	bne.n	8002678 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800263e:	4b5f      	ldr	r3, [pc, #380]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d116      	bne.n	8002678 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800264a:	4b5c      	ldr	r3, [pc, #368]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d005      	beq.n	8002662 <HAL_RCC_OscConfig+0x152>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d001      	beq.n	8002662 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e1c4      	b.n	80029ec <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002662:	4b56      	ldr	r3, [pc, #344]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	4952      	ldr	r1, [pc, #328]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 8002672:	4313      	orrs	r3, r2
 8002674:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002676:	e03a      	b.n	80026ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d020      	beq.n	80026c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002680:	4b4f      	ldr	r3, [pc, #316]	; (80027c0 <HAL_RCC_OscConfig+0x2b0>)
 8002682:	2201      	movs	r2, #1
 8002684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002686:	f7fe fd0b 	bl	80010a0 <HAL_GetTick>
 800268a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800268c:	e008      	b.n	80026a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800268e:	f7fe fd07 	bl	80010a0 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b02      	cmp	r3, #2
 800269a:	d901      	bls.n	80026a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e1a5      	b.n	80029ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026a0:	4b46      	ldr	r3, [pc, #280]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d0f0      	beq.n	800268e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ac:	4b43      	ldr	r3, [pc, #268]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	691b      	ldr	r3, [r3, #16]
 80026b8:	00db      	lsls	r3, r3, #3
 80026ba:	4940      	ldr	r1, [pc, #256]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	600b      	str	r3, [r1, #0]
 80026c0:	e015      	b.n	80026ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026c2:	4b3f      	ldr	r3, [pc, #252]	; (80027c0 <HAL_RCC_OscConfig+0x2b0>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c8:	f7fe fcea 	bl	80010a0 <HAL_GetTick>
 80026cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ce:	e008      	b.n	80026e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026d0:	f7fe fce6 	bl	80010a0 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e184      	b.n	80029ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026e2:	4b36      	ldr	r3, [pc, #216]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1f0      	bne.n	80026d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0308 	and.w	r3, r3, #8
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d030      	beq.n	800275c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d016      	beq.n	8002730 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002702:	4b30      	ldr	r3, [pc, #192]	; (80027c4 <HAL_RCC_OscConfig+0x2b4>)
 8002704:	2201      	movs	r2, #1
 8002706:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002708:	f7fe fcca 	bl	80010a0 <HAL_GetTick>
 800270c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800270e:	e008      	b.n	8002722 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002710:	f7fe fcc6 	bl	80010a0 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b02      	cmp	r3, #2
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e164      	b.n	80029ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002722:	4b26      	ldr	r3, [pc, #152]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 8002724:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d0f0      	beq.n	8002710 <HAL_RCC_OscConfig+0x200>
 800272e:	e015      	b.n	800275c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002730:	4b24      	ldr	r3, [pc, #144]	; (80027c4 <HAL_RCC_OscConfig+0x2b4>)
 8002732:	2200      	movs	r2, #0
 8002734:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002736:	f7fe fcb3 	bl	80010a0 <HAL_GetTick>
 800273a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800273c:	e008      	b.n	8002750 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800273e:	f7fe fcaf 	bl	80010a0 <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	2b02      	cmp	r3, #2
 800274a:	d901      	bls.n	8002750 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e14d      	b.n	80029ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002750:	4b1a      	ldr	r3, [pc, #104]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 8002752:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d1f0      	bne.n	800273e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0304 	and.w	r3, r3, #4
 8002764:	2b00      	cmp	r3, #0
 8002766:	f000 80a0 	beq.w	80028aa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800276a:	2300      	movs	r3, #0
 800276c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800276e:	4b13      	ldr	r3, [pc, #76]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d10f      	bne.n	800279a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800277a:	2300      	movs	r3, #0
 800277c:	60bb      	str	r3, [r7, #8]
 800277e:	4b0f      	ldr	r3, [pc, #60]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 8002780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002782:	4a0e      	ldr	r2, [pc, #56]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 8002784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002788:	6413      	str	r3, [r2, #64]	; 0x40
 800278a:	4b0c      	ldr	r3, [pc, #48]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002792:	60bb      	str	r3, [r7, #8]
 8002794:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002796:	2301      	movs	r3, #1
 8002798:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800279a:	4b0b      	ldr	r3, [pc, #44]	; (80027c8 <HAL_RCC_OscConfig+0x2b8>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d121      	bne.n	80027ea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027a6:	4b08      	ldr	r3, [pc, #32]	; (80027c8 <HAL_RCC_OscConfig+0x2b8>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a07      	ldr	r2, [pc, #28]	; (80027c8 <HAL_RCC_OscConfig+0x2b8>)
 80027ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027b2:	f7fe fc75 	bl	80010a0 <HAL_GetTick>
 80027b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b8:	e011      	b.n	80027de <HAL_RCC_OscConfig+0x2ce>
 80027ba:	bf00      	nop
 80027bc:	40023800 	.word	0x40023800
 80027c0:	42470000 	.word	0x42470000
 80027c4:	42470e80 	.word	0x42470e80
 80027c8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027cc:	f7fe fc68 	bl	80010a0 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e106      	b.n	80029ec <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027de:	4b85      	ldr	r3, [pc, #532]	; (80029f4 <HAL_RCC_OscConfig+0x4e4>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d0f0      	beq.n	80027cc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d106      	bne.n	8002800 <HAL_RCC_OscConfig+0x2f0>
 80027f2:	4b81      	ldr	r3, [pc, #516]	; (80029f8 <HAL_RCC_OscConfig+0x4e8>)
 80027f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f6:	4a80      	ldr	r2, [pc, #512]	; (80029f8 <HAL_RCC_OscConfig+0x4e8>)
 80027f8:	f043 0301 	orr.w	r3, r3, #1
 80027fc:	6713      	str	r3, [r2, #112]	; 0x70
 80027fe:	e01c      	b.n	800283a <HAL_RCC_OscConfig+0x32a>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	2b05      	cmp	r3, #5
 8002806:	d10c      	bne.n	8002822 <HAL_RCC_OscConfig+0x312>
 8002808:	4b7b      	ldr	r3, [pc, #492]	; (80029f8 <HAL_RCC_OscConfig+0x4e8>)
 800280a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800280c:	4a7a      	ldr	r2, [pc, #488]	; (80029f8 <HAL_RCC_OscConfig+0x4e8>)
 800280e:	f043 0304 	orr.w	r3, r3, #4
 8002812:	6713      	str	r3, [r2, #112]	; 0x70
 8002814:	4b78      	ldr	r3, [pc, #480]	; (80029f8 <HAL_RCC_OscConfig+0x4e8>)
 8002816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002818:	4a77      	ldr	r2, [pc, #476]	; (80029f8 <HAL_RCC_OscConfig+0x4e8>)
 800281a:	f043 0301 	orr.w	r3, r3, #1
 800281e:	6713      	str	r3, [r2, #112]	; 0x70
 8002820:	e00b      	b.n	800283a <HAL_RCC_OscConfig+0x32a>
 8002822:	4b75      	ldr	r3, [pc, #468]	; (80029f8 <HAL_RCC_OscConfig+0x4e8>)
 8002824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002826:	4a74      	ldr	r2, [pc, #464]	; (80029f8 <HAL_RCC_OscConfig+0x4e8>)
 8002828:	f023 0301 	bic.w	r3, r3, #1
 800282c:	6713      	str	r3, [r2, #112]	; 0x70
 800282e:	4b72      	ldr	r3, [pc, #456]	; (80029f8 <HAL_RCC_OscConfig+0x4e8>)
 8002830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002832:	4a71      	ldr	r2, [pc, #452]	; (80029f8 <HAL_RCC_OscConfig+0x4e8>)
 8002834:	f023 0304 	bic.w	r3, r3, #4
 8002838:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d015      	beq.n	800286e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002842:	f7fe fc2d 	bl	80010a0 <HAL_GetTick>
 8002846:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002848:	e00a      	b.n	8002860 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800284a:	f7fe fc29 	bl	80010a0 <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	f241 3288 	movw	r2, #5000	; 0x1388
 8002858:	4293      	cmp	r3, r2
 800285a:	d901      	bls.n	8002860 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e0c5      	b.n	80029ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002860:	4b65      	ldr	r3, [pc, #404]	; (80029f8 <HAL_RCC_OscConfig+0x4e8>)
 8002862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002864:	f003 0302 	and.w	r3, r3, #2
 8002868:	2b00      	cmp	r3, #0
 800286a:	d0ee      	beq.n	800284a <HAL_RCC_OscConfig+0x33a>
 800286c:	e014      	b.n	8002898 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800286e:	f7fe fc17 	bl	80010a0 <HAL_GetTick>
 8002872:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002874:	e00a      	b.n	800288c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002876:	f7fe fc13 	bl	80010a0 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	f241 3288 	movw	r2, #5000	; 0x1388
 8002884:	4293      	cmp	r3, r2
 8002886:	d901      	bls.n	800288c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e0af      	b.n	80029ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800288c:	4b5a      	ldr	r3, [pc, #360]	; (80029f8 <HAL_RCC_OscConfig+0x4e8>)
 800288e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d1ee      	bne.n	8002876 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002898:	7dfb      	ldrb	r3, [r7, #23]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d105      	bne.n	80028aa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800289e:	4b56      	ldr	r3, [pc, #344]	; (80029f8 <HAL_RCC_OscConfig+0x4e8>)
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	4a55      	ldr	r2, [pc, #340]	; (80029f8 <HAL_RCC_OscConfig+0x4e8>)
 80028a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	f000 809b 	beq.w	80029ea <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028b4:	4b50      	ldr	r3, [pc, #320]	; (80029f8 <HAL_RCC_OscConfig+0x4e8>)
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f003 030c 	and.w	r3, r3, #12
 80028bc:	2b08      	cmp	r3, #8
 80028be:	d05c      	beq.n	800297a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d141      	bne.n	800294c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028c8:	4b4c      	ldr	r3, [pc, #304]	; (80029fc <HAL_RCC_OscConfig+0x4ec>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ce:	f7fe fbe7 	bl	80010a0 <HAL_GetTick>
 80028d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028d4:	e008      	b.n	80028e8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028d6:	f7fe fbe3 	bl	80010a0 <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d901      	bls.n	80028e8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80028e4:	2303      	movs	r3, #3
 80028e6:	e081      	b.n	80029ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028e8:	4b43      	ldr	r3, [pc, #268]	; (80029f8 <HAL_RCC_OscConfig+0x4e8>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d1f0      	bne.n	80028d6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	69da      	ldr	r2, [r3, #28]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a1b      	ldr	r3, [r3, #32]
 80028fc:	431a      	orrs	r2, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002902:	019b      	lsls	r3, r3, #6
 8002904:	431a      	orrs	r2, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800290a:	085b      	lsrs	r3, r3, #1
 800290c:	3b01      	subs	r3, #1
 800290e:	041b      	lsls	r3, r3, #16
 8002910:	431a      	orrs	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002916:	061b      	lsls	r3, r3, #24
 8002918:	4937      	ldr	r1, [pc, #220]	; (80029f8 <HAL_RCC_OscConfig+0x4e8>)
 800291a:	4313      	orrs	r3, r2
 800291c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800291e:	4b37      	ldr	r3, [pc, #220]	; (80029fc <HAL_RCC_OscConfig+0x4ec>)
 8002920:	2201      	movs	r2, #1
 8002922:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002924:	f7fe fbbc 	bl	80010a0 <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800292c:	f7fe fbb8 	bl	80010a0 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e056      	b.n	80029ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800293e:	4b2e      	ldr	r3, [pc, #184]	; (80029f8 <HAL_RCC_OscConfig+0x4e8>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d0f0      	beq.n	800292c <HAL_RCC_OscConfig+0x41c>
 800294a:	e04e      	b.n	80029ea <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800294c:	4b2b      	ldr	r3, [pc, #172]	; (80029fc <HAL_RCC_OscConfig+0x4ec>)
 800294e:	2200      	movs	r2, #0
 8002950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002952:	f7fe fba5 	bl	80010a0 <HAL_GetTick>
 8002956:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002958:	e008      	b.n	800296c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800295a:	f7fe fba1 	bl	80010a0 <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	2b02      	cmp	r3, #2
 8002966:	d901      	bls.n	800296c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e03f      	b.n	80029ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800296c:	4b22      	ldr	r3, [pc, #136]	; (80029f8 <HAL_RCC_OscConfig+0x4e8>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d1f0      	bne.n	800295a <HAL_RCC_OscConfig+0x44a>
 8002978:	e037      	b.n	80029ea <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	699b      	ldr	r3, [r3, #24]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d101      	bne.n	8002986 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e032      	b.n	80029ec <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002986:	4b1c      	ldr	r3, [pc, #112]	; (80029f8 <HAL_RCC_OscConfig+0x4e8>)
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d028      	beq.n	80029e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800299e:	429a      	cmp	r2, r3
 80029a0:	d121      	bne.n	80029e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d11a      	bne.n	80029e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029b6:	4013      	ands	r3, r2
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029bc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029be:	4293      	cmp	r3, r2
 80029c0:	d111      	bne.n	80029e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029cc:	085b      	lsrs	r3, r3, #1
 80029ce:	3b01      	subs	r3, #1
 80029d0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d107      	bne.n	80029e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d001      	beq.n	80029ea <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e000      	b.n	80029ec <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3718      	adds	r7, #24
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	40007000 	.word	0x40007000
 80029f8:	40023800 	.word	0x40023800
 80029fc:	42470060 	.word	0x42470060

08002a00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d101      	bne.n	8002a14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e0cc      	b.n	8002bae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a14:	4b68      	ldr	r3, [pc, #416]	; (8002bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0307 	and.w	r3, r3, #7
 8002a1c:	683a      	ldr	r2, [r7, #0]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d90c      	bls.n	8002a3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a22:	4b65      	ldr	r3, [pc, #404]	; (8002bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a24:	683a      	ldr	r2, [r7, #0]
 8002a26:	b2d2      	uxtb	r2, r2
 8002a28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a2a:	4b63      	ldr	r3, [pc, #396]	; (8002bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0307 	and.w	r3, r3, #7
 8002a32:	683a      	ldr	r2, [r7, #0]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d001      	beq.n	8002a3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e0b8      	b.n	8002bae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0302 	and.w	r3, r3, #2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d020      	beq.n	8002a8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0304 	and.w	r3, r3, #4
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d005      	beq.n	8002a60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a54:	4b59      	ldr	r3, [pc, #356]	; (8002bbc <HAL_RCC_ClockConfig+0x1bc>)
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	4a58      	ldr	r2, [pc, #352]	; (8002bbc <HAL_RCC_ClockConfig+0x1bc>)
 8002a5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0308 	and.w	r3, r3, #8
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d005      	beq.n	8002a78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a6c:	4b53      	ldr	r3, [pc, #332]	; (8002bbc <HAL_RCC_ClockConfig+0x1bc>)
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	4a52      	ldr	r2, [pc, #328]	; (8002bbc <HAL_RCC_ClockConfig+0x1bc>)
 8002a72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a78:	4b50      	ldr	r3, [pc, #320]	; (8002bbc <HAL_RCC_ClockConfig+0x1bc>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	494d      	ldr	r1, [pc, #308]	; (8002bbc <HAL_RCC_ClockConfig+0x1bc>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d044      	beq.n	8002b20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d107      	bne.n	8002aae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a9e:	4b47      	ldr	r3, [pc, #284]	; (8002bbc <HAL_RCC_ClockConfig+0x1bc>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d119      	bne.n	8002ade <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e07f      	b.n	8002bae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d003      	beq.n	8002abe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002aba:	2b03      	cmp	r3, #3
 8002abc:	d107      	bne.n	8002ace <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002abe:	4b3f      	ldr	r3, [pc, #252]	; (8002bbc <HAL_RCC_ClockConfig+0x1bc>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d109      	bne.n	8002ade <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e06f      	b.n	8002bae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ace:	4b3b      	ldr	r3, [pc, #236]	; (8002bbc <HAL_RCC_ClockConfig+0x1bc>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e067      	b.n	8002bae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ade:	4b37      	ldr	r3, [pc, #220]	; (8002bbc <HAL_RCC_ClockConfig+0x1bc>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f023 0203 	bic.w	r2, r3, #3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	4934      	ldr	r1, [pc, #208]	; (8002bbc <HAL_RCC_ClockConfig+0x1bc>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002af0:	f7fe fad6 	bl	80010a0 <HAL_GetTick>
 8002af4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002af6:	e00a      	b.n	8002b0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002af8:	f7fe fad2 	bl	80010a0 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d901      	bls.n	8002b0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e04f      	b.n	8002bae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b0e:	4b2b      	ldr	r3, [pc, #172]	; (8002bbc <HAL_RCC_ClockConfig+0x1bc>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f003 020c 	and.w	r2, r3, #12
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d1eb      	bne.n	8002af8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b20:	4b25      	ldr	r3, [pc, #148]	; (8002bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0307 	and.w	r3, r3, #7
 8002b28:	683a      	ldr	r2, [r7, #0]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d20c      	bcs.n	8002b48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b2e:	4b22      	ldr	r3, [pc, #136]	; (8002bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b30:	683a      	ldr	r2, [r7, #0]
 8002b32:	b2d2      	uxtb	r2, r2
 8002b34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b36:	4b20      	ldr	r3, [pc, #128]	; (8002bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0307 	and.w	r3, r3, #7
 8002b3e:	683a      	ldr	r2, [r7, #0]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d001      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e032      	b.n	8002bae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0304 	and.w	r3, r3, #4
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d008      	beq.n	8002b66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b54:	4b19      	ldr	r3, [pc, #100]	; (8002bbc <HAL_RCC_ClockConfig+0x1bc>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	4916      	ldr	r1, [pc, #88]	; (8002bbc <HAL_RCC_ClockConfig+0x1bc>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0308 	and.w	r3, r3, #8
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d009      	beq.n	8002b86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b72:	4b12      	ldr	r3, [pc, #72]	; (8002bbc <HAL_RCC_ClockConfig+0x1bc>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	490e      	ldr	r1, [pc, #56]	; (8002bbc <HAL_RCC_ClockConfig+0x1bc>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b86:	f000 f821 	bl	8002bcc <HAL_RCC_GetSysClockFreq>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	4b0b      	ldr	r3, [pc, #44]	; (8002bbc <HAL_RCC_ClockConfig+0x1bc>)
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	091b      	lsrs	r3, r3, #4
 8002b92:	f003 030f 	and.w	r3, r3, #15
 8002b96:	490a      	ldr	r1, [pc, #40]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b98:	5ccb      	ldrb	r3, [r1, r3]
 8002b9a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b9e:	4a09      	ldr	r2, [pc, #36]	; (8002bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ba0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ba2:	4b09      	ldr	r3, [pc, #36]	; (8002bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7fe fa36 	bl	8001018 <HAL_InitTick>

  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3710      	adds	r7, #16
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	40023c00 	.word	0x40023c00
 8002bbc:	40023800 	.word	0x40023800
 8002bc0:	08003cf0 	.word	0x08003cf0
 8002bc4:	20000000 	.word	0x20000000
 8002bc8:	20000004 	.word	0x20000004

08002bcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bcc:	b5b0      	push	{r4, r5, r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002bd2:	2100      	movs	r1, #0
 8002bd4:	6079      	str	r1, [r7, #4]
 8002bd6:	2100      	movs	r1, #0
 8002bd8:	60f9      	str	r1, [r7, #12]
 8002bda:	2100      	movs	r1, #0
 8002bdc:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002bde:	2100      	movs	r1, #0
 8002be0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002be2:	4952      	ldr	r1, [pc, #328]	; (8002d2c <HAL_RCC_GetSysClockFreq+0x160>)
 8002be4:	6889      	ldr	r1, [r1, #8]
 8002be6:	f001 010c 	and.w	r1, r1, #12
 8002bea:	2908      	cmp	r1, #8
 8002bec:	d00d      	beq.n	8002c0a <HAL_RCC_GetSysClockFreq+0x3e>
 8002bee:	2908      	cmp	r1, #8
 8002bf0:	f200 8094 	bhi.w	8002d1c <HAL_RCC_GetSysClockFreq+0x150>
 8002bf4:	2900      	cmp	r1, #0
 8002bf6:	d002      	beq.n	8002bfe <HAL_RCC_GetSysClockFreq+0x32>
 8002bf8:	2904      	cmp	r1, #4
 8002bfa:	d003      	beq.n	8002c04 <HAL_RCC_GetSysClockFreq+0x38>
 8002bfc:	e08e      	b.n	8002d1c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bfe:	4b4c      	ldr	r3, [pc, #304]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x164>)
 8002c00:	60bb      	str	r3, [r7, #8]
       break;
 8002c02:	e08e      	b.n	8002d22 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c04:	4b4b      	ldr	r3, [pc, #300]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x168>)
 8002c06:	60bb      	str	r3, [r7, #8]
      break;
 8002c08:	e08b      	b.n	8002d22 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c0a:	4948      	ldr	r1, [pc, #288]	; (8002d2c <HAL_RCC_GetSysClockFreq+0x160>)
 8002c0c:	6849      	ldr	r1, [r1, #4]
 8002c0e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002c12:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c14:	4945      	ldr	r1, [pc, #276]	; (8002d2c <HAL_RCC_GetSysClockFreq+0x160>)
 8002c16:	6849      	ldr	r1, [r1, #4]
 8002c18:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002c1c:	2900      	cmp	r1, #0
 8002c1e:	d024      	beq.n	8002c6a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c20:	4942      	ldr	r1, [pc, #264]	; (8002d2c <HAL_RCC_GetSysClockFreq+0x160>)
 8002c22:	6849      	ldr	r1, [r1, #4]
 8002c24:	0989      	lsrs	r1, r1, #6
 8002c26:	4608      	mov	r0, r1
 8002c28:	f04f 0100 	mov.w	r1, #0
 8002c2c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002c30:	f04f 0500 	mov.w	r5, #0
 8002c34:	ea00 0204 	and.w	r2, r0, r4
 8002c38:	ea01 0305 	and.w	r3, r1, r5
 8002c3c:	493d      	ldr	r1, [pc, #244]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x168>)
 8002c3e:	fb01 f003 	mul.w	r0, r1, r3
 8002c42:	2100      	movs	r1, #0
 8002c44:	fb01 f102 	mul.w	r1, r1, r2
 8002c48:	1844      	adds	r4, r0, r1
 8002c4a:	493a      	ldr	r1, [pc, #232]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x168>)
 8002c4c:	fba2 0101 	umull	r0, r1, r2, r1
 8002c50:	1863      	adds	r3, r4, r1
 8002c52:	4619      	mov	r1, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	461a      	mov	r2, r3
 8002c58:	f04f 0300 	mov.w	r3, #0
 8002c5c:	f7fd fb18 	bl	8000290 <__aeabi_uldivmod>
 8002c60:	4602      	mov	r2, r0
 8002c62:	460b      	mov	r3, r1
 8002c64:	4613      	mov	r3, r2
 8002c66:	60fb      	str	r3, [r7, #12]
 8002c68:	e04a      	b.n	8002d00 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c6a:	4b30      	ldr	r3, [pc, #192]	; (8002d2c <HAL_RCC_GetSysClockFreq+0x160>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	099b      	lsrs	r3, r3, #6
 8002c70:	461a      	mov	r2, r3
 8002c72:	f04f 0300 	mov.w	r3, #0
 8002c76:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002c7a:	f04f 0100 	mov.w	r1, #0
 8002c7e:	ea02 0400 	and.w	r4, r2, r0
 8002c82:	ea03 0501 	and.w	r5, r3, r1
 8002c86:	4620      	mov	r0, r4
 8002c88:	4629      	mov	r1, r5
 8002c8a:	f04f 0200 	mov.w	r2, #0
 8002c8e:	f04f 0300 	mov.w	r3, #0
 8002c92:	014b      	lsls	r3, r1, #5
 8002c94:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002c98:	0142      	lsls	r2, r0, #5
 8002c9a:	4610      	mov	r0, r2
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	1b00      	subs	r0, r0, r4
 8002ca0:	eb61 0105 	sbc.w	r1, r1, r5
 8002ca4:	f04f 0200 	mov.w	r2, #0
 8002ca8:	f04f 0300 	mov.w	r3, #0
 8002cac:	018b      	lsls	r3, r1, #6
 8002cae:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002cb2:	0182      	lsls	r2, r0, #6
 8002cb4:	1a12      	subs	r2, r2, r0
 8002cb6:	eb63 0301 	sbc.w	r3, r3, r1
 8002cba:	f04f 0000 	mov.w	r0, #0
 8002cbe:	f04f 0100 	mov.w	r1, #0
 8002cc2:	00d9      	lsls	r1, r3, #3
 8002cc4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002cc8:	00d0      	lsls	r0, r2, #3
 8002cca:	4602      	mov	r2, r0
 8002ccc:	460b      	mov	r3, r1
 8002cce:	1912      	adds	r2, r2, r4
 8002cd0:	eb45 0303 	adc.w	r3, r5, r3
 8002cd4:	f04f 0000 	mov.w	r0, #0
 8002cd8:	f04f 0100 	mov.w	r1, #0
 8002cdc:	0299      	lsls	r1, r3, #10
 8002cde:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002ce2:	0290      	lsls	r0, r2, #10
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	4610      	mov	r0, r2
 8002cea:	4619      	mov	r1, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	461a      	mov	r2, r3
 8002cf0:	f04f 0300 	mov.w	r3, #0
 8002cf4:	f7fd facc 	bl	8000290 <__aeabi_uldivmod>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d00:	4b0a      	ldr	r3, [pc, #40]	; (8002d2c <HAL_RCC_GetSysClockFreq+0x160>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	0c1b      	lsrs	r3, r3, #16
 8002d06:	f003 0303 	and.w	r3, r3, #3
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002d10:	68fa      	ldr	r2, [r7, #12]
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d18:	60bb      	str	r3, [r7, #8]
      break;
 8002d1a:	e002      	b.n	8002d22 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d1c:	4b04      	ldr	r3, [pc, #16]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x164>)
 8002d1e:	60bb      	str	r3, [r7, #8]
      break;
 8002d20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d22:	68bb      	ldr	r3, [r7, #8]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3710      	adds	r7, #16
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bdb0      	pop	{r4, r5, r7, pc}
 8002d2c:	40023800 	.word	0x40023800
 8002d30:	00f42400 	.word	0x00f42400
 8002d34:	017d7840 	.word	0x017d7840

08002d38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d3c:	4b03      	ldr	r3, [pc, #12]	; (8002d4c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	20000000 	.word	0x20000000

08002d50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d54:	f7ff fff0 	bl	8002d38 <HAL_RCC_GetHCLKFreq>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	4b05      	ldr	r3, [pc, #20]	; (8002d70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	0a9b      	lsrs	r3, r3, #10
 8002d60:	f003 0307 	and.w	r3, r3, #7
 8002d64:	4903      	ldr	r1, [pc, #12]	; (8002d74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d66:	5ccb      	ldrb	r3, [r1, r3]
 8002d68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	40023800 	.word	0x40023800
 8002d74:	08003d00 	.word	0x08003d00

08002d78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d7c:	f7ff ffdc 	bl	8002d38 <HAL_RCC_GetHCLKFreq>
 8002d80:	4602      	mov	r2, r0
 8002d82:	4b05      	ldr	r3, [pc, #20]	; (8002d98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	0b5b      	lsrs	r3, r3, #13
 8002d88:	f003 0307 	and.w	r3, r3, #7
 8002d8c:	4903      	ldr	r1, [pc, #12]	; (8002d9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d8e:	5ccb      	ldrb	r3, [r1, r3]
 8002d90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	40023800 	.word	0x40023800
 8002d9c:	08003d00 	.word	0x08003d00

08002da0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e03f      	b.n	8002e32 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d106      	bne.n	8002dcc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f7fe f816 	bl	8000df8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2224      	movs	r2, #36	; 0x24
 8002dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68da      	ldr	r2, [r3, #12]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002de2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f000 f905 	bl	8002ff4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	691a      	ldr	r2, [r3, #16]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002df8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	695a      	ldr	r2, [r3, #20]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68da      	ldr	r2, [r3, #12]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2220      	movs	r2, #32
 8002e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2220      	movs	r2, #32
 8002e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3708      	adds	r7, #8
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	b08a      	sub	sp, #40	; 0x28
 8002e3e:	af02      	add	r7, sp, #8
 8002e40:	60f8      	str	r0, [r7, #12]
 8002e42:	60b9      	str	r1, [r7, #8]
 8002e44:	603b      	str	r3, [r7, #0]
 8002e46:	4613      	mov	r3, r2
 8002e48:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	2b20      	cmp	r3, #32
 8002e58:	d17c      	bne.n	8002f54 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d002      	beq.n	8002e66 <HAL_UART_Transmit+0x2c>
 8002e60:	88fb      	ldrh	r3, [r7, #6]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e075      	b.n	8002f56 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d101      	bne.n	8002e78 <HAL_UART_Transmit+0x3e>
 8002e74:	2302      	movs	r3, #2
 8002e76:	e06e      	b.n	8002f56 <HAL_UART_Transmit+0x11c>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2221      	movs	r2, #33	; 0x21
 8002e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e8e:	f7fe f907 	bl	80010a0 <HAL_GetTick>
 8002e92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	88fa      	ldrh	r2, [r7, #6]
 8002e98:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	88fa      	ldrh	r2, [r7, #6]
 8002e9e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ea8:	d108      	bne.n	8002ebc <HAL_UART_Transmit+0x82>
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d104      	bne.n	8002ebc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	61bb      	str	r3, [r7, #24]
 8002eba:	e003      	b.n	8002ec4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002ecc:	e02a      	b.n	8002f24 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	9300      	str	r3, [sp, #0]
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	2180      	movs	r1, #128	; 0x80
 8002ed8:	68f8      	ldr	r0, [r7, #12]
 8002eda:	f000 f840 	bl	8002f5e <UART_WaitOnFlagUntilTimeout>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d001      	beq.n	8002ee8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e036      	b.n	8002f56 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d10b      	bne.n	8002f06 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	881b      	ldrh	r3, [r3, #0]
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002efc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	3302      	adds	r3, #2
 8002f02:	61bb      	str	r3, [r7, #24]
 8002f04:	e007      	b.n	8002f16 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	781a      	ldrb	r2, [r3, #0]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	3301      	adds	r3, #1
 8002f14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	3b01      	subs	r3, #1
 8002f1e:	b29a      	uxth	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1cf      	bne.n	8002ece <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	9300      	str	r3, [sp, #0]
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	2200      	movs	r2, #0
 8002f36:	2140      	movs	r1, #64	; 0x40
 8002f38:	68f8      	ldr	r0, [r7, #12]
 8002f3a:	f000 f810 	bl	8002f5e <UART_WaitOnFlagUntilTimeout>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d001      	beq.n	8002f48 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e006      	b.n	8002f56 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002f50:	2300      	movs	r3, #0
 8002f52:	e000      	b.n	8002f56 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002f54:	2302      	movs	r3, #2
  }
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3720      	adds	r7, #32
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b084      	sub	sp, #16
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	60f8      	str	r0, [r7, #12]
 8002f66:	60b9      	str	r1, [r7, #8]
 8002f68:	603b      	str	r3, [r7, #0]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f6e:	e02c      	b.n	8002fca <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f76:	d028      	beq.n	8002fca <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d007      	beq.n	8002f8e <UART_WaitOnFlagUntilTimeout+0x30>
 8002f7e:	f7fe f88f 	bl	80010a0 <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d21d      	bcs.n	8002fca <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68da      	ldr	r2, [r3, #12]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002f9c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	695a      	ldr	r2, [r3, #20]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f022 0201 	bic.w	r2, r2, #1
 8002fac:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2220      	movs	r2, #32
 8002fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2220      	movs	r2, #32
 8002fba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e00f      	b.n	8002fea <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	68ba      	ldr	r2, [r7, #8]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	bf0c      	ite	eq
 8002fda:	2301      	moveq	r3, #1
 8002fdc:	2300      	movne	r3, #0
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	79fb      	ldrb	r3, [r7, #7]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d0c3      	beq.n	8002f70 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3710      	adds	r7, #16
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
	...

08002ff4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ff8:	b09f      	sub	sp, #124	; 0x7c
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ffe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003008:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800300a:	68d9      	ldr	r1, [r3, #12]
 800300c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	ea40 0301 	orr.w	r3, r0, r1
 8003014:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003016:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003018:	689a      	ldr	r2, [r3, #8]
 800301a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	431a      	orrs	r2, r3
 8003020:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003022:	695b      	ldr	r3, [r3, #20]
 8003024:	431a      	orrs	r2, r3
 8003026:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003028:	69db      	ldr	r3, [r3, #28]
 800302a:	4313      	orrs	r3, r2
 800302c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800302e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003038:	f021 010c 	bic.w	r1, r1, #12
 800303c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003042:	430b      	orrs	r3, r1
 8003044:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003046:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	695b      	ldr	r3, [r3, #20]
 800304c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003050:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003052:	6999      	ldr	r1, [r3, #24]
 8003054:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	ea40 0301 	orr.w	r3, r0, r1
 800305c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800305e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	4bc5      	ldr	r3, [pc, #788]	; (8003378 <UART_SetConfig+0x384>)
 8003064:	429a      	cmp	r2, r3
 8003066:	d004      	beq.n	8003072 <UART_SetConfig+0x7e>
 8003068:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	4bc3      	ldr	r3, [pc, #780]	; (800337c <UART_SetConfig+0x388>)
 800306e:	429a      	cmp	r2, r3
 8003070:	d103      	bne.n	800307a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003072:	f7ff fe81 	bl	8002d78 <HAL_RCC_GetPCLK2Freq>
 8003076:	6778      	str	r0, [r7, #116]	; 0x74
 8003078:	e002      	b.n	8003080 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800307a:	f7ff fe69 	bl	8002d50 <HAL_RCC_GetPCLK1Freq>
 800307e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003080:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003082:	69db      	ldr	r3, [r3, #28]
 8003084:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003088:	f040 80b6 	bne.w	80031f8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800308c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800308e:	461c      	mov	r4, r3
 8003090:	f04f 0500 	mov.w	r5, #0
 8003094:	4622      	mov	r2, r4
 8003096:	462b      	mov	r3, r5
 8003098:	1891      	adds	r1, r2, r2
 800309a:	6439      	str	r1, [r7, #64]	; 0x40
 800309c:	415b      	adcs	r3, r3
 800309e:	647b      	str	r3, [r7, #68]	; 0x44
 80030a0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80030a4:	1912      	adds	r2, r2, r4
 80030a6:	eb45 0303 	adc.w	r3, r5, r3
 80030aa:	f04f 0000 	mov.w	r0, #0
 80030ae:	f04f 0100 	mov.w	r1, #0
 80030b2:	00d9      	lsls	r1, r3, #3
 80030b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80030b8:	00d0      	lsls	r0, r2, #3
 80030ba:	4602      	mov	r2, r0
 80030bc:	460b      	mov	r3, r1
 80030be:	1911      	adds	r1, r2, r4
 80030c0:	6639      	str	r1, [r7, #96]	; 0x60
 80030c2:	416b      	adcs	r3, r5
 80030c4:	667b      	str	r3, [r7, #100]	; 0x64
 80030c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	461a      	mov	r2, r3
 80030cc:	f04f 0300 	mov.w	r3, #0
 80030d0:	1891      	adds	r1, r2, r2
 80030d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80030d4:	415b      	adcs	r3, r3
 80030d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80030dc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80030e0:	f7fd f8d6 	bl	8000290 <__aeabi_uldivmod>
 80030e4:	4602      	mov	r2, r0
 80030e6:	460b      	mov	r3, r1
 80030e8:	4ba5      	ldr	r3, [pc, #660]	; (8003380 <UART_SetConfig+0x38c>)
 80030ea:	fba3 2302 	umull	r2, r3, r3, r2
 80030ee:	095b      	lsrs	r3, r3, #5
 80030f0:	011e      	lsls	r6, r3, #4
 80030f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030f4:	461c      	mov	r4, r3
 80030f6:	f04f 0500 	mov.w	r5, #0
 80030fa:	4622      	mov	r2, r4
 80030fc:	462b      	mov	r3, r5
 80030fe:	1891      	adds	r1, r2, r2
 8003100:	6339      	str	r1, [r7, #48]	; 0x30
 8003102:	415b      	adcs	r3, r3
 8003104:	637b      	str	r3, [r7, #52]	; 0x34
 8003106:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800310a:	1912      	adds	r2, r2, r4
 800310c:	eb45 0303 	adc.w	r3, r5, r3
 8003110:	f04f 0000 	mov.w	r0, #0
 8003114:	f04f 0100 	mov.w	r1, #0
 8003118:	00d9      	lsls	r1, r3, #3
 800311a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800311e:	00d0      	lsls	r0, r2, #3
 8003120:	4602      	mov	r2, r0
 8003122:	460b      	mov	r3, r1
 8003124:	1911      	adds	r1, r2, r4
 8003126:	65b9      	str	r1, [r7, #88]	; 0x58
 8003128:	416b      	adcs	r3, r5
 800312a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800312c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	461a      	mov	r2, r3
 8003132:	f04f 0300 	mov.w	r3, #0
 8003136:	1891      	adds	r1, r2, r2
 8003138:	62b9      	str	r1, [r7, #40]	; 0x28
 800313a:	415b      	adcs	r3, r3
 800313c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800313e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003142:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003146:	f7fd f8a3 	bl	8000290 <__aeabi_uldivmod>
 800314a:	4602      	mov	r2, r0
 800314c:	460b      	mov	r3, r1
 800314e:	4b8c      	ldr	r3, [pc, #560]	; (8003380 <UART_SetConfig+0x38c>)
 8003150:	fba3 1302 	umull	r1, r3, r3, r2
 8003154:	095b      	lsrs	r3, r3, #5
 8003156:	2164      	movs	r1, #100	; 0x64
 8003158:	fb01 f303 	mul.w	r3, r1, r3
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	3332      	adds	r3, #50	; 0x32
 8003162:	4a87      	ldr	r2, [pc, #540]	; (8003380 <UART_SetConfig+0x38c>)
 8003164:	fba2 2303 	umull	r2, r3, r2, r3
 8003168:	095b      	lsrs	r3, r3, #5
 800316a:	005b      	lsls	r3, r3, #1
 800316c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003170:	441e      	add	r6, r3
 8003172:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003174:	4618      	mov	r0, r3
 8003176:	f04f 0100 	mov.w	r1, #0
 800317a:	4602      	mov	r2, r0
 800317c:	460b      	mov	r3, r1
 800317e:	1894      	adds	r4, r2, r2
 8003180:	623c      	str	r4, [r7, #32]
 8003182:	415b      	adcs	r3, r3
 8003184:	627b      	str	r3, [r7, #36]	; 0x24
 8003186:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800318a:	1812      	adds	r2, r2, r0
 800318c:	eb41 0303 	adc.w	r3, r1, r3
 8003190:	f04f 0400 	mov.w	r4, #0
 8003194:	f04f 0500 	mov.w	r5, #0
 8003198:	00dd      	lsls	r5, r3, #3
 800319a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800319e:	00d4      	lsls	r4, r2, #3
 80031a0:	4622      	mov	r2, r4
 80031a2:	462b      	mov	r3, r5
 80031a4:	1814      	adds	r4, r2, r0
 80031a6:	653c      	str	r4, [r7, #80]	; 0x50
 80031a8:	414b      	adcs	r3, r1
 80031aa:	657b      	str	r3, [r7, #84]	; 0x54
 80031ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	461a      	mov	r2, r3
 80031b2:	f04f 0300 	mov.w	r3, #0
 80031b6:	1891      	adds	r1, r2, r2
 80031b8:	61b9      	str	r1, [r7, #24]
 80031ba:	415b      	adcs	r3, r3
 80031bc:	61fb      	str	r3, [r7, #28]
 80031be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031c2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80031c6:	f7fd f863 	bl	8000290 <__aeabi_uldivmod>
 80031ca:	4602      	mov	r2, r0
 80031cc:	460b      	mov	r3, r1
 80031ce:	4b6c      	ldr	r3, [pc, #432]	; (8003380 <UART_SetConfig+0x38c>)
 80031d0:	fba3 1302 	umull	r1, r3, r3, r2
 80031d4:	095b      	lsrs	r3, r3, #5
 80031d6:	2164      	movs	r1, #100	; 0x64
 80031d8:	fb01 f303 	mul.w	r3, r1, r3
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	00db      	lsls	r3, r3, #3
 80031e0:	3332      	adds	r3, #50	; 0x32
 80031e2:	4a67      	ldr	r2, [pc, #412]	; (8003380 <UART_SetConfig+0x38c>)
 80031e4:	fba2 2303 	umull	r2, r3, r2, r3
 80031e8:	095b      	lsrs	r3, r3, #5
 80031ea:	f003 0207 	and.w	r2, r3, #7
 80031ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4432      	add	r2, r6
 80031f4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80031f6:	e0b9      	b.n	800336c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031fa:	461c      	mov	r4, r3
 80031fc:	f04f 0500 	mov.w	r5, #0
 8003200:	4622      	mov	r2, r4
 8003202:	462b      	mov	r3, r5
 8003204:	1891      	adds	r1, r2, r2
 8003206:	6139      	str	r1, [r7, #16]
 8003208:	415b      	adcs	r3, r3
 800320a:	617b      	str	r3, [r7, #20]
 800320c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003210:	1912      	adds	r2, r2, r4
 8003212:	eb45 0303 	adc.w	r3, r5, r3
 8003216:	f04f 0000 	mov.w	r0, #0
 800321a:	f04f 0100 	mov.w	r1, #0
 800321e:	00d9      	lsls	r1, r3, #3
 8003220:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003224:	00d0      	lsls	r0, r2, #3
 8003226:	4602      	mov	r2, r0
 8003228:	460b      	mov	r3, r1
 800322a:	eb12 0804 	adds.w	r8, r2, r4
 800322e:	eb43 0905 	adc.w	r9, r3, r5
 8003232:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	4618      	mov	r0, r3
 8003238:	f04f 0100 	mov.w	r1, #0
 800323c:	f04f 0200 	mov.w	r2, #0
 8003240:	f04f 0300 	mov.w	r3, #0
 8003244:	008b      	lsls	r3, r1, #2
 8003246:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800324a:	0082      	lsls	r2, r0, #2
 800324c:	4640      	mov	r0, r8
 800324e:	4649      	mov	r1, r9
 8003250:	f7fd f81e 	bl	8000290 <__aeabi_uldivmod>
 8003254:	4602      	mov	r2, r0
 8003256:	460b      	mov	r3, r1
 8003258:	4b49      	ldr	r3, [pc, #292]	; (8003380 <UART_SetConfig+0x38c>)
 800325a:	fba3 2302 	umull	r2, r3, r3, r2
 800325e:	095b      	lsrs	r3, r3, #5
 8003260:	011e      	lsls	r6, r3, #4
 8003262:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003264:	4618      	mov	r0, r3
 8003266:	f04f 0100 	mov.w	r1, #0
 800326a:	4602      	mov	r2, r0
 800326c:	460b      	mov	r3, r1
 800326e:	1894      	adds	r4, r2, r2
 8003270:	60bc      	str	r4, [r7, #8]
 8003272:	415b      	adcs	r3, r3
 8003274:	60fb      	str	r3, [r7, #12]
 8003276:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800327a:	1812      	adds	r2, r2, r0
 800327c:	eb41 0303 	adc.w	r3, r1, r3
 8003280:	f04f 0400 	mov.w	r4, #0
 8003284:	f04f 0500 	mov.w	r5, #0
 8003288:	00dd      	lsls	r5, r3, #3
 800328a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800328e:	00d4      	lsls	r4, r2, #3
 8003290:	4622      	mov	r2, r4
 8003292:	462b      	mov	r3, r5
 8003294:	1814      	adds	r4, r2, r0
 8003296:	64bc      	str	r4, [r7, #72]	; 0x48
 8003298:	414b      	adcs	r3, r1
 800329a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800329c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	4618      	mov	r0, r3
 80032a2:	f04f 0100 	mov.w	r1, #0
 80032a6:	f04f 0200 	mov.w	r2, #0
 80032aa:	f04f 0300 	mov.w	r3, #0
 80032ae:	008b      	lsls	r3, r1, #2
 80032b0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80032b4:	0082      	lsls	r2, r0, #2
 80032b6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80032ba:	f7fc ffe9 	bl	8000290 <__aeabi_uldivmod>
 80032be:	4602      	mov	r2, r0
 80032c0:	460b      	mov	r3, r1
 80032c2:	4b2f      	ldr	r3, [pc, #188]	; (8003380 <UART_SetConfig+0x38c>)
 80032c4:	fba3 1302 	umull	r1, r3, r3, r2
 80032c8:	095b      	lsrs	r3, r3, #5
 80032ca:	2164      	movs	r1, #100	; 0x64
 80032cc:	fb01 f303 	mul.w	r3, r1, r3
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	011b      	lsls	r3, r3, #4
 80032d4:	3332      	adds	r3, #50	; 0x32
 80032d6:	4a2a      	ldr	r2, [pc, #168]	; (8003380 <UART_SetConfig+0x38c>)
 80032d8:	fba2 2303 	umull	r2, r3, r2, r3
 80032dc:	095b      	lsrs	r3, r3, #5
 80032de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032e2:	441e      	add	r6, r3
 80032e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032e6:	4618      	mov	r0, r3
 80032e8:	f04f 0100 	mov.w	r1, #0
 80032ec:	4602      	mov	r2, r0
 80032ee:	460b      	mov	r3, r1
 80032f0:	1894      	adds	r4, r2, r2
 80032f2:	603c      	str	r4, [r7, #0]
 80032f4:	415b      	adcs	r3, r3
 80032f6:	607b      	str	r3, [r7, #4]
 80032f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80032fc:	1812      	adds	r2, r2, r0
 80032fe:	eb41 0303 	adc.w	r3, r1, r3
 8003302:	f04f 0400 	mov.w	r4, #0
 8003306:	f04f 0500 	mov.w	r5, #0
 800330a:	00dd      	lsls	r5, r3, #3
 800330c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003310:	00d4      	lsls	r4, r2, #3
 8003312:	4622      	mov	r2, r4
 8003314:	462b      	mov	r3, r5
 8003316:	eb12 0a00 	adds.w	sl, r2, r0
 800331a:	eb43 0b01 	adc.w	fp, r3, r1
 800331e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	4618      	mov	r0, r3
 8003324:	f04f 0100 	mov.w	r1, #0
 8003328:	f04f 0200 	mov.w	r2, #0
 800332c:	f04f 0300 	mov.w	r3, #0
 8003330:	008b      	lsls	r3, r1, #2
 8003332:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003336:	0082      	lsls	r2, r0, #2
 8003338:	4650      	mov	r0, sl
 800333a:	4659      	mov	r1, fp
 800333c:	f7fc ffa8 	bl	8000290 <__aeabi_uldivmod>
 8003340:	4602      	mov	r2, r0
 8003342:	460b      	mov	r3, r1
 8003344:	4b0e      	ldr	r3, [pc, #56]	; (8003380 <UART_SetConfig+0x38c>)
 8003346:	fba3 1302 	umull	r1, r3, r3, r2
 800334a:	095b      	lsrs	r3, r3, #5
 800334c:	2164      	movs	r1, #100	; 0x64
 800334e:	fb01 f303 	mul.w	r3, r1, r3
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	011b      	lsls	r3, r3, #4
 8003356:	3332      	adds	r3, #50	; 0x32
 8003358:	4a09      	ldr	r2, [pc, #36]	; (8003380 <UART_SetConfig+0x38c>)
 800335a:	fba2 2303 	umull	r2, r3, r2, r3
 800335e:	095b      	lsrs	r3, r3, #5
 8003360:	f003 020f 	and.w	r2, r3, #15
 8003364:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4432      	add	r2, r6
 800336a:	609a      	str	r2, [r3, #8]
}
 800336c:	bf00      	nop
 800336e:	377c      	adds	r7, #124	; 0x7c
 8003370:	46bd      	mov	sp, r7
 8003372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003376:	bf00      	nop
 8003378:	40011000 	.word	0x40011000
 800337c:	40011400 	.word	0x40011400
 8003380:	51eb851f 	.word	0x51eb851f

08003384 <__errno>:
 8003384:	4b01      	ldr	r3, [pc, #4]	; (800338c <__errno+0x8>)
 8003386:	6818      	ldr	r0, [r3, #0]
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	2000000c 	.word	0x2000000c

08003390 <__libc_init_array>:
 8003390:	b570      	push	{r4, r5, r6, lr}
 8003392:	4d0d      	ldr	r5, [pc, #52]	; (80033c8 <__libc_init_array+0x38>)
 8003394:	4c0d      	ldr	r4, [pc, #52]	; (80033cc <__libc_init_array+0x3c>)
 8003396:	1b64      	subs	r4, r4, r5
 8003398:	10a4      	asrs	r4, r4, #2
 800339a:	2600      	movs	r6, #0
 800339c:	42a6      	cmp	r6, r4
 800339e:	d109      	bne.n	80033b4 <__libc_init_array+0x24>
 80033a0:	4d0b      	ldr	r5, [pc, #44]	; (80033d0 <__libc_init_array+0x40>)
 80033a2:	4c0c      	ldr	r4, [pc, #48]	; (80033d4 <__libc_init_array+0x44>)
 80033a4:	f000 fc4e 	bl	8003c44 <_init>
 80033a8:	1b64      	subs	r4, r4, r5
 80033aa:	10a4      	asrs	r4, r4, #2
 80033ac:	2600      	movs	r6, #0
 80033ae:	42a6      	cmp	r6, r4
 80033b0:	d105      	bne.n	80033be <__libc_init_array+0x2e>
 80033b2:	bd70      	pop	{r4, r5, r6, pc}
 80033b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80033b8:	4798      	blx	r3
 80033ba:	3601      	adds	r6, #1
 80033bc:	e7ee      	b.n	800339c <__libc_init_array+0xc>
 80033be:	f855 3b04 	ldr.w	r3, [r5], #4
 80033c2:	4798      	blx	r3
 80033c4:	3601      	adds	r6, #1
 80033c6:	e7f2      	b.n	80033ae <__libc_init_array+0x1e>
 80033c8:	08003d4c 	.word	0x08003d4c
 80033cc:	08003d4c 	.word	0x08003d4c
 80033d0:	08003d4c 	.word	0x08003d4c
 80033d4:	08003d50 	.word	0x08003d50

080033d8 <memset>:
 80033d8:	4402      	add	r2, r0
 80033da:	4603      	mov	r3, r0
 80033dc:	4293      	cmp	r3, r2
 80033de:	d100      	bne.n	80033e2 <memset+0xa>
 80033e0:	4770      	bx	lr
 80033e2:	f803 1b01 	strb.w	r1, [r3], #1
 80033e6:	e7f9      	b.n	80033dc <memset+0x4>

080033e8 <siprintf>:
 80033e8:	b40e      	push	{r1, r2, r3}
 80033ea:	b500      	push	{lr}
 80033ec:	b09c      	sub	sp, #112	; 0x70
 80033ee:	ab1d      	add	r3, sp, #116	; 0x74
 80033f0:	9002      	str	r0, [sp, #8]
 80033f2:	9006      	str	r0, [sp, #24]
 80033f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80033f8:	4809      	ldr	r0, [pc, #36]	; (8003420 <siprintf+0x38>)
 80033fa:	9107      	str	r1, [sp, #28]
 80033fc:	9104      	str	r1, [sp, #16]
 80033fe:	4909      	ldr	r1, [pc, #36]	; (8003424 <siprintf+0x3c>)
 8003400:	f853 2b04 	ldr.w	r2, [r3], #4
 8003404:	9105      	str	r1, [sp, #20]
 8003406:	6800      	ldr	r0, [r0, #0]
 8003408:	9301      	str	r3, [sp, #4]
 800340a:	a902      	add	r1, sp, #8
 800340c:	f000 f868 	bl	80034e0 <_svfiprintf_r>
 8003410:	9b02      	ldr	r3, [sp, #8]
 8003412:	2200      	movs	r2, #0
 8003414:	701a      	strb	r2, [r3, #0]
 8003416:	b01c      	add	sp, #112	; 0x70
 8003418:	f85d eb04 	ldr.w	lr, [sp], #4
 800341c:	b003      	add	sp, #12
 800341e:	4770      	bx	lr
 8003420:	2000000c 	.word	0x2000000c
 8003424:	ffff0208 	.word	0xffff0208

08003428 <__ssputs_r>:
 8003428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800342c:	688e      	ldr	r6, [r1, #8]
 800342e:	429e      	cmp	r6, r3
 8003430:	4682      	mov	sl, r0
 8003432:	460c      	mov	r4, r1
 8003434:	4690      	mov	r8, r2
 8003436:	461f      	mov	r7, r3
 8003438:	d838      	bhi.n	80034ac <__ssputs_r+0x84>
 800343a:	898a      	ldrh	r2, [r1, #12]
 800343c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003440:	d032      	beq.n	80034a8 <__ssputs_r+0x80>
 8003442:	6825      	ldr	r5, [r4, #0]
 8003444:	6909      	ldr	r1, [r1, #16]
 8003446:	eba5 0901 	sub.w	r9, r5, r1
 800344a:	6965      	ldr	r5, [r4, #20]
 800344c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003450:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003454:	3301      	adds	r3, #1
 8003456:	444b      	add	r3, r9
 8003458:	106d      	asrs	r5, r5, #1
 800345a:	429d      	cmp	r5, r3
 800345c:	bf38      	it	cc
 800345e:	461d      	movcc	r5, r3
 8003460:	0553      	lsls	r3, r2, #21
 8003462:	d531      	bpl.n	80034c8 <__ssputs_r+0xa0>
 8003464:	4629      	mov	r1, r5
 8003466:	f000 fb47 	bl	8003af8 <_malloc_r>
 800346a:	4606      	mov	r6, r0
 800346c:	b950      	cbnz	r0, 8003484 <__ssputs_r+0x5c>
 800346e:	230c      	movs	r3, #12
 8003470:	f8ca 3000 	str.w	r3, [sl]
 8003474:	89a3      	ldrh	r3, [r4, #12]
 8003476:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800347a:	81a3      	strh	r3, [r4, #12]
 800347c:	f04f 30ff 	mov.w	r0, #4294967295
 8003480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003484:	6921      	ldr	r1, [r4, #16]
 8003486:	464a      	mov	r2, r9
 8003488:	f000 fabe 	bl	8003a08 <memcpy>
 800348c:	89a3      	ldrh	r3, [r4, #12]
 800348e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003492:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003496:	81a3      	strh	r3, [r4, #12]
 8003498:	6126      	str	r6, [r4, #16]
 800349a:	6165      	str	r5, [r4, #20]
 800349c:	444e      	add	r6, r9
 800349e:	eba5 0509 	sub.w	r5, r5, r9
 80034a2:	6026      	str	r6, [r4, #0]
 80034a4:	60a5      	str	r5, [r4, #8]
 80034a6:	463e      	mov	r6, r7
 80034a8:	42be      	cmp	r6, r7
 80034aa:	d900      	bls.n	80034ae <__ssputs_r+0x86>
 80034ac:	463e      	mov	r6, r7
 80034ae:	4632      	mov	r2, r6
 80034b0:	6820      	ldr	r0, [r4, #0]
 80034b2:	4641      	mov	r1, r8
 80034b4:	f000 fab6 	bl	8003a24 <memmove>
 80034b8:	68a3      	ldr	r3, [r4, #8]
 80034ba:	6822      	ldr	r2, [r4, #0]
 80034bc:	1b9b      	subs	r3, r3, r6
 80034be:	4432      	add	r2, r6
 80034c0:	60a3      	str	r3, [r4, #8]
 80034c2:	6022      	str	r2, [r4, #0]
 80034c4:	2000      	movs	r0, #0
 80034c6:	e7db      	b.n	8003480 <__ssputs_r+0x58>
 80034c8:	462a      	mov	r2, r5
 80034ca:	f000 fb6f 	bl	8003bac <_realloc_r>
 80034ce:	4606      	mov	r6, r0
 80034d0:	2800      	cmp	r0, #0
 80034d2:	d1e1      	bne.n	8003498 <__ssputs_r+0x70>
 80034d4:	6921      	ldr	r1, [r4, #16]
 80034d6:	4650      	mov	r0, sl
 80034d8:	f000 fabe 	bl	8003a58 <_free_r>
 80034dc:	e7c7      	b.n	800346e <__ssputs_r+0x46>
	...

080034e0 <_svfiprintf_r>:
 80034e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034e4:	4698      	mov	r8, r3
 80034e6:	898b      	ldrh	r3, [r1, #12]
 80034e8:	061b      	lsls	r3, r3, #24
 80034ea:	b09d      	sub	sp, #116	; 0x74
 80034ec:	4607      	mov	r7, r0
 80034ee:	460d      	mov	r5, r1
 80034f0:	4614      	mov	r4, r2
 80034f2:	d50e      	bpl.n	8003512 <_svfiprintf_r+0x32>
 80034f4:	690b      	ldr	r3, [r1, #16]
 80034f6:	b963      	cbnz	r3, 8003512 <_svfiprintf_r+0x32>
 80034f8:	2140      	movs	r1, #64	; 0x40
 80034fa:	f000 fafd 	bl	8003af8 <_malloc_r>
 80034fe:	6028      	str	r0, [r5, #0]
 8003500:	6128      	str	r0, [r5, #16]
 8003502:	b920      	cbnz	r0, 800350e <_svfiprintf_r+0x2e>
 8003504:	230c      	movs	r3, #12
 8003506:	603b      	str	r3, [r7, #0]
 8003508:	f04f 30ff 	mov.w	r0, #4294967295
 800350c:	e0d1      	b.n	80036b2 <_svfiprintf_r+0x1d2>
 800350e:	2340      	movs	r3, #64	; 0x40
 8003510:	616b      	str	r3, [r5, #20]
 8003512:	2300      	movs	r3, #0
 8003514:	9309      	str	r3, [sp, #36]	; 0x24
 8003516:	2320      	movs	r3, #32
 8003518:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800351c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003520:	2330      	movs	r3, #48	; 0x30
 8003522:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80036cc <_svfiprintf_r+0x1ec>
 8003526:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800352a:	f04f 0901 	mov.w	r9, #1
 800352e:	4623      	mov	r3, r4
 8003530:	469a      	mov	sl, r3
 8003532:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003536:	b10a      	cbz	r2, 800353c <_svfiprintf_r+0x5c>
 8003538:	2a25      	cmp	r2, #37	; 0x25
 800353a:	d1f9      	bne.n	8003530 <_svfiprintf_r+0x50>
 800353c:	ebba 0b04 	subs.w	fp, sl, r4
 8003540:	d00b      	beq.n	800355a <_svfiprintf_r+0x7a>
 8003542:	465b      	mov	r3, fp
 8003544:	4622      	mov	r2, r4
 8003546:	4629      	mov	r1, r5
 8003548:	4638      	mov	r0, r7
 800354a:	f7ff ff6d 	bl	8003428 <__ssputs_r>
 800354e:	3001      	adds	r0, #1
 8003550:	f000 80aa 	beq.w	80036a8 <_svfiprintf_r+0x1c8>
 8003554:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003556:	445a      	add	r2, fp
 8003558:	9209      	str	r2, [sp, #36]	; 0x24
 800355a:	f89a 3000 	ldrb.w	r3, [sl]
 800355e:	2b00      	cmp	r3, #0
 8003560:	f000 80a2 	beq.w	80036a8 <_svfiprintf_r+0x1c8>
 8003564:	2300      	movs	r3, #0
 8003566:	f04f 32ff 	mov.w	r2, #4294967295
 800356a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800356e:	f10a 0a01 	add.w	sl, sl, #1
 8003572:	9304      	str	r3, [sp, #16]
 8003574:	9307      	str	r3, [sp, #28]
 8003576:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800357a:	931a      	str	r3, [sp, #104]	; 0x68
 800357c:	4654      	mov	r4, sl
 800357e:	2205      	movs	r2, #5
 8003580:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003584:	4851      	ldr	r0, [pc, #324]	; (80036cc <_svfiprintf_r+0x1ec>)
 8003586:	f7fc fe33 	bl	80001f0 <memchr>
 800358a:	9a04      	ldr	r2, [sp, #16]
 800358c:	b9d8      	cbnz	r0, 80035c6 <_svfiprintf_r+0xe6>
 800358e:	06d0      	lsls	r0, r2, #27
 8003590:	bf44      	itt	mi
 8003592:	2320      	movmi	r3, #32
 8003594:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003598:	0711      	lsls	r1, r2, #28
 800359a:	bf44      	itt	mi
 800359c:	232b      	movmi	r3, #43	; 0x2b
 800359e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80035a2:	f89a 3000 	ldrb.w	r3, [sl]
 80035a6:	2b2a      	cmp	r3, #42	; 0x2a
 80035a8:	d015      	beq.n	80035d6 <_svfiprintf_r+0xf6>
 80035aa:	9a07      	ldr	r2, [sp, #28]
 80035ac:	4654      	mov	r4, sl
 80035ae:	2000      	movs	r0, #0
 80035b0:	f04f 0c0a 	mov.w	ip, #10
 80035b4:	4621      	mov	r1, r4
 80035b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80035ba:	3b30      	subs	r3, #48	; 0x30
 80035bc:	2b09      	cmp	r3, #9
 80035be:	d94e      	bls.n	800365e <_svfiprintf_r+0x17e>
 80035c0:	b1b0      	cbz	r0, 80035f0 <_svfiprintf_r+0x110>
 80035c2:	9207      	str	r2, [sp, #28]
 80035c4:	e014      	b.n	80035f0 <_svfiprintf_r+0x110>
 80035c6:	eba0 0308 	sub.w	r3, r0, r8
 80035ca:	fa09 f303 	lsl.w	r3, r9, r3
 80035ce:	4313      	orrs	r3, r2
 80035d0:	9304      	str	r3, [sp, #16]
 80035d2:	46a2      	mov	sl, r4
 80035d4:	e7d2      	b.n	800357c <_svfiprintf_r+0x9c>
 80035d6:	9b03      	ldr	r3, [sp, #12]
 80035d8:	1d19      	adds	r1, r3, #4
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	9103      	str	r1, [sp, #12]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	bfbb      	ittet	lt
 80035e2:	425b      	neglt	r3, r3
 80035e4:	f042 0202 	orrlt.w	r2, r2, #2
 80035e8:	9307      	strge	r3, [sp, #28]
 80035ea:	9307      	strlt	r3, [sp, #28]
 80035ec:	bfb8      	it	lt
 80035ee:	9204      	strlt	r2, [sp, #16]
 80035f0:	7823      	ldrb	r3, [r4, #0]
 80035f2:	2b2e      	cmp	r3, #46	; 0x2e
 80035f4:	d10c      	bne.n	8003610 <_svfiprintf_r+0x130>
 80035f6:	7863      	ldrb	r3, [r4, #1]
 80035f8:	2b2a      	cmp	r3, #42	; 0x2a
 80035fa:	d135      	bne.n	8003668 <_svfiprintf_r+0x188>
 80035fc:	9b03      	ldr	r3, [sp, #12]
 80035fe:	1d1a      	adds	r2, r3, #4
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	9203      	str	r2, [sp, #12]
 8003604:	2b00      	cmp	r3, #0
 8003606:	bfb8      	it	lt
 8003608:	f04f 33ff 	movlt.w	r3, #4294967295
 800360c:	3402      	adds	r4, #2
 800360e:	9305      	str	r3, [sp, #20]
 8003610:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80036dc <_svfiprintf_r+0x1fc>
 8003614:	7821      	ldrb	r1, [r4, #0]
 8003616:	2203      	movs	r2, #3
 8003618:	4650      	mov	r0, sl
 800361a:	f7fc fde9 	bl	80001f0 <memchr>
 800361e:	b140      	cbz	r0, 8003632 <_svfiprintf_r+0x152>
 8003620:	2340      	movs	r3, #64	; 0x40
 8003622:	eba0 000a 	sub.w	r0, r0, sl
 8003626:	fa03 f000 	lsl.w	r0, r3, r0
 800362a:	9b04      	ldr	r3, [sp, #16]
 800362c:	4303      	orrs	r3, r0
 800362e:	3401      	adds	r4, #1
 8003630:	9304      	str	r3, [sp, #16]
 8003632:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003636:	4826      	ldr	r0, [pc, #152]	; (80036d0 <_svfiprintf_r+0x1f0>)
 8003638:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800363c:	2206      	movs	r2, #6
 800363e:	f7fc fdd7 	bl	80001f0 <memchr>
 8003642:	2800      	cmp	r0, #0
 8003644:	d038      	beq.n	80036b8 <_svfiprintf_r+0x1d8>
 8003646:	4b23      	ldr	r3, [pc, #140]	; (80036d4 <_svfiprintf_r+0x1f4>)
 8003648:	bb1b      	cbnz	r3, 8003692 <_svfiprintf_r+0x1b2>
 800364a:	9b03      	ldr	r3, [sp, #12]
 800364c:	3307      	adds	r3, #7
 800364e:	f023 0307 	bic.w	r3, r3, #7
 8003652:	3308      	adds	r3, #8
 8003654:	9303      	str	r3, [sp, #12]
 8003656:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003658:	4433      	add	r3, r6
 800365a:	9309      	str	r3, [sp, #36]	; 0x24
 800365c:	e767      	b.n	800352e <_svfiprintf_r+0x4e>
 800365e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003662:	460c      	mov	r4, r1
 8003664:	2001      	movs	r0, #1
 8003666:	e7a5      	b.n	80035b4 <_svfiprintf_r+0xd4>
 8003668:	2300      	movs	r3, #0
 800366a:	3401      	adds	r4, #1
 800366c:	9305      	str	r3, [sp, #20]
 800366e:	4619      	mov	r1, r3
 8003670:	f04f 0c0a 	mov.w	ip, #10
 8003674:	4620      	mov	r0, r4
 8003676:	f810 2b01 	ldrb.w	r2, [r0], #1
 800367a:	3a30      	subs	r2, #48	; 0x30
 800367c:	2a09      	cmp	r2, #9
 800367e:	d903      	bls.n	8003688 <_svfiprintf_r+0x1a8>
 8003680:	2b00      	cmp	r3, #0
 8003682:	d0c5      	beq.n	8003610 <_svfiprintf_r+0x130>
 8003684:	9105      	str	r1, [sp, #20]
 8003686:	e7c3      	b.n	8003610 <_svfiprintf_r+0x130>
 8003688:	fb0c 2101 	mla	r1, ip, r1, r2
 800368c:	4604      	mov	r4, r0
 800368e:	2301      	movs	r3, #1
 8003690:	e7f0      	b.n	8003674 <_svfiprintf_r+0x194>
 8003692:	ab03      	add	r3, sp, #12
 8003694:	9300      	str	r3, [sp, #0]
 8003696:	462a      	mov	r2, r5
 8003698:	4b0f      	ldr	r3, [pc, #60]	; (80036d8 <_svfiprintf_r+0x1f8>)
 800369a:	a904      	add	r1, sp, #16
 800369c:	4638      	mov	r0, r7
 800369e:	f3af 8000 	nop.w
 80036a2:	1c42      	adds	r2, r0, #1
 80036a4:	4606      	mov	r6, r0
 80036a6:	d1d6      	bne.n	8003656 <_svfiprintf_r+0x176>
 80036a8:	89ab      	ldrh	r3, [r5, #12]
 80036aa:	065b      	lsls	r3, r3, #25
 80036ac:	f53f af2c 	bmi.w	8003508 <_svfiprintf_r+0x28>
 80036b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80036b2:	b01d      	add	sp, #116	; 0x74
 80036b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036b8:	ab03      	add	r3, sp, #12
 80036ba:	9300      	str	r3, [sp, #0]
 80036bc:	462a      	mov	r2, r5
 80036be:	4b06      	ldr	r3, [pc, #24]	; (80036d8 <_svfiprintf_r+0x1f8>)
 80036c0:	a904      	add	r1, sp, #16
 80036c2:	4638      	mov	r0, r7
 80036c4:	f000 f87a 	bl	80037bc <_printf_i>
 80036c8:	e7eb      	b.n	80036a2 <_svfiprintf_r+0x1c2>
 80036ca:	bf00      	nop
 80036cc:	08003d10 	.word	0x08003d10
 80036d0:	08003d1a 	.word	0x08003d1a
 80036d4:	00000000 	.word	0x00000000
 80036d8:	08003429 	.word	0x08003429
 80036dc:	08003d16 	.word	0x08003d16

080036e0 <_printf_common>:
 80036e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036e4:	4616      	mov	r6, r2
 80036e6:	4699      	mov	r9, r3
 80036e8:	688a      	ldr	r2, [r1, #8]
 80036ea:	690b      	ldr	r3, [r1, #16]
 80036ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80036f0:	4293      	cmp	r3, r2
 80036f2:	bfb8      	it	lt
 80036f4:	4613      	movlt	r3, r2
 80036f6:	6033      	str	r3, [r6, #0]
 80036f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80036fc:	4607      	mov	r7, r0
 80036fe:	460c      	mov	r4, r1
 8003700:	b10a      	cbz	r2, 8003706 <_printf_common+0x26>
 8003702:	3301      	adds	r3, #1
 8003704:	6033      	str	r3, [r6, #0]
 8003706:	6823      	ldr	r3, [r4, #0]
 8003708:	0699      	lsls	r1, r3, #26
 800370a:	bf42      	ittt	mi
 800370c:	6833      	ldrmi	r3, [r6, #0]
 800370e:	3302      	addmi	r3, #2
 8003710:	6033      	strmi	r3, [r6, #0]
 8003712:	6825      	ldr	r5, [r4, #0]
 8003714:	f015 0506 	ands.w	r5, r5, #6
 8003718:	d106      	bne.n	8003728 <_printf_common+0x48>
 800371a:	f104 0a19 	add.w	sl, r4, #25
 800371e:	68e3      	ldr	r3, [r4, #12]
 8003720:	6832      	ldr	r2, [r6, #0]
 8003722:	1a9b      	subs	r3, r3, r2
 8003724:	42ab      	cmp	r3, r5
 8003726:	dc26      	bgt.n	8003776 <_printf_common+0x96>
 8003728:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800372c:	1e13      	subs	r3, r2, #0
 800372e:	6822      	ldr	r2, [r4, #0]
 8003730:	bf18      	it	ne
 8003732:	2301      	movne	r3, #1
 8003734:	0692      	lsls	r2, r2, #26
 8003736:	d42b      	bmi.n	8003790 <_printf_common+0xb0>
 8003738:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800373c:	4649      	mov	r1, r9
 800373e:	4638      	mov	r0, r7
 8003740:	47c0      	blx	r8
 8003742:	3001      	adds	r0, #1
 8003744:	d01e      	beq.n	8003784 <_printf_common+0xa4>
 8003746:	6823      	ldr	r3, [r4, #0]
 8003748:	68e5      	ldr	r5, [r4, #12]
 800374a:	6832      	ldr	r2, [r6, #0]
 800374c:	f003 0306 	and.w	r3, r3, #6
 8003750:	2b04      	cmp	r3, #4
 8003752:	bf08      	it	eq
 8003754:	1aad      	subeq	r5, r5, r2
 8003756:	68a3      	ldr	r3, [r4, #8]
 8003758:	6922      	ldr	r2, [r4, #16]
 800375a:	bf0c      	ite	eq
 800375c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003760:	2500      	movne	r5, #0
 8003762:	4293      	cmp	r3, r2
 8003764:	bfc4      	itt	gt
 8003766:	1a9b      	subgt	r3, r3, r2
 8003768:	18ed      	addgt	r5, r5, r3
 800376a:	2600      	movs	r6, #0
 800376c:	341a      	adds	r4, #26
 800376e:	42b5      	cmp	r5, r6
 8003770:	d11a      	bne.n	80037a8 <_printf_common+0xc8>
 8003772:	2000      	movs	r0, #0
 8003774:	e008      	b.n	8003788 <_printf_common+0xa8>
 8003776:	2301      	movs	r3, #1
 8003778:	4652      	mov	r2, sl
 800377a:	4649      	mov	r1, r9
 800377c:	4638      	mov	r0, r7
 800377e:	47c0      	blx	r8
 8003780:	3001      	adds	r0, #1
 8003782:	d103      	bne.n	800378c <_printf_common+0xac>
 8003784:	f04f 30ff 	mov.w	r0, #4294967295
 8003788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800378c:	3501      	adds	r5, #1
 800378e:	e7c6      	b.n	800371e <_printf_common+0x3e>
 8003790:	18e1      	adds	r1, r4, r3
 8003792:	1c5a      	adds	r2, r3, #1
 8003794:	2030      	movs	r0, #48	; 0x30
 8003796:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800379a:	4422      	add	r2, r4
 800379c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80037a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80037a4:	3302      	adds	r3, #2
 80037a6:	e7c7      	b.n	8003738 <_printf_common+0x58>
 80037a8:	2301      	movs	r3, #1
 80037aa:	4622      	mov	r2, r4
 80037ac:	4649      	mov	r1, r9
 80037ae:	4638      	mov	r0, r7
 80037b0:	47c0      	blx	r8
 80037b2:	3001      	adds	r0, #1
 80037b4:	d0e6      	beq.n	8003784 <_printf_common+0xa4>
 80037b6:	3601      	adds	r6, #1
 80037b8:	e7d9      	b.n	800376e <_printf_common+0x8e>
	...

080037bc <_printf_i>:
 80037bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80037c0:	460c      	mov	r4, r1
 80037c2:	4691      	mov	r9, r2
 80037c4:	7e27      	ldrb	r7, [r4, #24]
 80037c6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80037c8:	2f78      	cmp	r7, #120	; 0x78
 80037ca:	4680      	mov	r8, r0
 80037cc:	469a      	mov	sl, r3
 80037ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80037d2:	d807      	bhi.n	80037e4 <_printf_i+0x28>
 80037d4:	2f62      	cmp	r7, #98	; 0x62
 80037d6:	d80a      	bhi.n	80037ee <_printf_i+0x32>
 80037d8:	2f00      	cmp	r7, #0
 80037da:	f000 80d8 	beq.w	800398e <_printf_i+0x1d2>
 80037de:	2f58      	cmp	r7, #88	; 0x58
 80037e0:	f000 80a3 	beq.w	800392a <_printf_i+0x16e>
 80037e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80037e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80037ec:	e03a      	b.n	8003864 <_printf_i+0xa8>
 80037ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80037f2:	2b15      	cmp	r3, #21
 80037f4:	d8f6      	bhi.n	80037e4 <_printf_i+0x28>
 80037f6:	a001      	add	r0, pc, #4	; (adr r0, 80037fc <_printf_i+0x40>)
 80037f8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80037fc:	08003855 	.word	0x08003855
 8003800:	08003869 	.word	0x08003869
 8003804:	080037e5 	.word	0x080037e5
 8003808:	080037e5 	.word	0x080037e5
 800380c:	080037e5 	.word	0x080037e5
 8003810:	080037e5 	.word	0x080037e5
 8003814:	08003869 	.word	0x08003869
 8003818:	080037e5 	.word	0x080037e5
 800381c:	080037e5 	.word	0x080037e5
 8003820:	080037e5 	.word	0x080037e5
 8003824:	080037e5 	.word	0x080037e5
 8003828:	08003975 	.word	0x08003975
 800382c:	08003899 	.word	0x08003899
 8003830:	08003957 	.word	0x08003957
 8003834:	080037e5 	.word	0x080037e5
 8003838:	080037e5 	.word	0x080037e5
 800383c:	08003997 	.word	0x08003997
 8003840:	080037e5 	.word	0x080037e5
 8003844:	08003899 	.word	0x08003899
 8003848:	080037e5 	.word	0x080037e5
 800384c:	080037e5 	.word	0x080037e5
 8003850:	0800395f 	.word	0x0800395f
 8003854:	680b      	ldr	r3, [r1, #0]
 8003856:	1d1a      	adds	r2, r3, #4
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	600a      	str	r2, [r1, #0]
 800385c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003860:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003864:	2301      	movs	r3, #1
 8003866:	e0a3      	b.n	80039b0 <_printf_i+0x1f4>
 8003868:	6825      	ldr	r5, [r4, #0]
 800386a:	6808      	ldr	r0, [r1, #0]
 800386c:	062e      	lsls	r6, r5, #24
 800386e:	f100 0304 	add.w	r3, r0, #4
 8003872:	d50a      	bpl.n	800388a <_printf_i+0xce>
 8003874:	6805      	ldr	r5, [r0, #0]
 8003876:	600b      	str	r3, [r1, #0]
 8003878:	2d00      	cmp	r5, #0
 800387a:	da03      	bge.n	8003884 <_printf_i+0xc8>
 800387c:	232d      	movs	r3, #45	; 0x2d
 800387e:	426d      	negs	r5, r5
 8003880:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003884:	485e      	ldr	r0, [pc, #376]	; (8003a00 <_printf_i+0x244>)
 8003886:	230a      	movs	r3, #10
 8003888:	e019      	b.n	80038be <_printf_i+0x102>
 800388a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800388e:	6805      	ldr	r5, [r0, #0]
 8003890:	600b      	str	r3, [r1, #0]
 8003892:	bf18      	it	ne
 8003894:	b22d      	sxthne	r5, r5
 8003896:	e7ef      	b.n	8003878 <_printf_i+0xbc>
 8003898:	680b      	ldr	r3, [r1, #0]
 800389a:	6825      	ldr	r5, [r4, #0]
 800389c:	1d18      	adds	r0, r3, #4
 800389e:	6008      	str	r0, [r1, #0]
 80038a0:	0628      	lsls	r0, r5, #24
 80038a2:	d501      	bpl.n	80038a8 <_printf_i+0xec>
 80038a4:	681d      	ldr	r5, [r3, #0]
 80038a6:	e002      	b.n	80038ae <_printf_i+0xf2>
 80038a8:	0669      	lsls	r1, r5, #25
 80038aa:	d5fb      	bpl.n	80038a4 <_printf_i+0xe8>
 80038ac:	881d      	ldrh	r5, [r3, #0]
 80038ae:	4854      	ldr	r0, [pc, #336]	; (8003a00 <_printf_i+0x244>)
 80038b0:	2f6f      	cmp	r7, #111	; 0x6f
 80038b2:	bf0c      	ite	eq
 80038b4:	2308      	moveq	r3, #8
 80038b6:	230a      	movne	r3, #10
 80038b8:	2100      	movs	r1, #0
 80038ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80038be:	6866      	ldr	r6, [r4, #4]
 80038c0:	60a6      	str	r6, [r4, #8]
 80038c2:	2e00      	cmp	r6, #0
 80038c4:	bfa2      	ittt	ge
 80038c6:	6821      	ldrge	r1, [r4, #0]
 80038c8:	f021 0104 	bicge.w	r1, r1, #4
 80038cc:	6021      	strge	r1, [r4, #0]
 80038ce:	b90d      	cbnz	r5, 80038d4 <_printf_i+0x118>
 80038d0:	2e00      	cmp	r6, #0
 80038d2:	d04d      	beq.n	8003970 <_printf_i+0x1b4>
 80038d4:	4616      	mov	r6, r2
 80038d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80038da:	fb03 5711 	mls	r7, r3, r1, r5
 80038de:	5dc7      	ldrb	r7, [r0, r7]
 80038e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80038e4:	462f      	mov	r7, r5
 80038e6:	42bb      	cmp	r3, r7
 80038e8:	460d      	mov	r5, r1
 80038ea:	d9f4      	bls.n	80038d6 <_printf_i+0x11a>
 80038ec:	2b08      	cmp	r3, #8
 80038ee:	d10b      	bne.n	8003908 <_printf_i+0x14c>
 80038f0:	6823      	ldr	r3, [r4, #0]
 80038f2:	07df      	lsls	r7, r3, #31
 80038f4:	d508      	bpl.n	8003908 <_printf_i+0x14c>
 80038f6:	6923      	ldr	r3, [r4, #16]
 80038f8:	6861      	ldr	r1, [r4, #4]
 80038fa:	4299      	cmp	r1, r3
 80038fc:	bfde      	ittt	le
 80038fe:	2330      	movle	r3, #48	; 0x30
 8003900:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003904:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003908:	1b92      	subs	r2, r2, r6
 800390a:	6122      	str	r2, [r4, #16]
 800390c:	f8cd a000 	str.w	sl, [sp]
 8003910:	464b      	mov	r3, r9
 8003912:	aa03      	add	r2, sp, #12
 8003914:	4621      	mov	r1, r4
 8003916:	4640      	mov	r0, r8
 8003918:	f7ff fee2 	bl	80036e0 <_printf_common>
 800391c:	3001      	adds	r0, #1
 800391e:	d14c      	bne.n	80039ba <_printf_i+0x1fe>
 8003920:	f04f 30ff 	mov.w	r0, #4294967295
 8003924:	b004      	add	sp, #16
 8003926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800392a:	4835      	ldr	r0, [pc, #212]	; (8003a00 <_printf_i+0x244>)
 800392c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003930:	6823      	ldr	r3, [r4, #0]
 8003932:	680e      	ldr	r6, [r1, #0]
 8003934:	061f      	lsls	r7, r3, #24
 8003936:	f856 5b04 	ldr.w	r5, [r6], #4
 800393a:	600e      	str	r6, [r1, #0]
 800393c:	d514      	bpl.n	8003968 <_printf_i+0x1ac>
 800393e:	07d9      	lsls	r1, r3, #31
 8003940:	bf44      	itt	mi
 8003942:	f043 0320 	orrmi.w	r3, r3, #32
 8003946:	6023      	strmi	r3, [r4, #0]
 8003948:	b91d      	cbnz	r5, 8003952 <_printf_i+0x196>
 800394a:	6823      	ldr	r3, [r4, #0]
 800394c:	f023 0320 	bic.w	r3, r3, #32
 8003950:	6023      	str	r3, [r4, #0]
 8003952:	2310      	movs	r3, #16
 8003954:	e7b0      	b.n	80038b8 <_printf_i+0xfc>
 8003956:	6823      	ldr	r3, [r4, #0]
 8003958:	f043 0320 	orr.w	r3, r3, #32
 800395c:	6023      	str	r3, [r4, #0]
 800395e:	2378      	movs	r3, #120	; 0x78
 8003960:	4828      	ldr	r0, [pc, #160]	; (8003a04 <_printf_i+0x248>)
 8003962:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003966:	e7e3      	b.n	8003930 <_printf_i+0x174>
 8003968:	065e      	lsls	r6, r3, #25
 800396a:	bf48      	it	mi
 800396c:	b2ad      	uxthmi	r5, r5
 800396e:	e7e6      	b.n	800393e <_printf_i+0x182>
 8003970:	4616      	mov	r6, r2
 8003972:	e7bb      	b.n	80038ec <_printf_i+0x130>
 8003974:	680b      	ldr	r3, [r1, #0]
 8003976:	6826      	ldr	r6, [r4, #0]
 8003978:	6960      	ldr	r0, [r4, #20]
 800397a:	1d1d      	adds	r5, r3, #4
 800397c:	600d      	str	r5, [r1, #0]
 800397e:	0635      	lsls	r5, r6, #24
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	d501      	bpl.n	8003988 <_printf_i+0x1cc>
 8003984:	6018      	str	r0, [r3, #0]
 8003986:	e002      	b.n	800398e <_printf_i+0x1d2>
 8003988:	0671      	lsls	r1, r6, #25
 800398a:	d5fb      	bpl.n	8003984 <_printf_i+0x1c8>
 800398c:	8018      	strh	r0, [r3, #0]
 800398e:	2300      	movs	r3, #0
 8003990:	6123      	str	r3, [r4, #16]
 8003992:	4616      	mov	r6, r2
 8003994:	e7ba      	b.n	800390c <_printf_i+0x150>
 8003996:	680b      	ldr	r3, [r1, #0]
 8003998:	1d1a      	adds	r2, r3, #4
 800399a:	600a      	str	r2, [r1, #0]
 800399c:	681e      	ldr	r6, [r3, #0]
 800399e:	6862      	ldr	r2, [r4, #4]
 80039a0:	2100      	movs	r1, #0
 80039a2:	4630      	mov	r0, r6
 80039a4:	f7fc fc24 	bl	80001f0 <memchr>
 80039a8:	b108      	cbz	r0, 80039ae <_printf_i+0x1f2>
 80039aa:	1b80      	subs	r0, r0, r6
 80039ac:	6060      	str	r0, [r4, #4]
 80039ae:	6863      	ldr	r3, [r4, #4]
 80039b0:	6123      	str	r3, [r4, #16]
 80039b2:	2300      	movs	r3, #0
 80039b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039b8:	e7a8      	b.n	800390c <_printf_i+0x150>
 80039ba:	6923      	ldr	r3, [r4, #16]
 80039bc:	4632      	mov	r2, r6
 80039be:	4649      	mov	r1, r9
 80039c0:	4640      	mov	r0, r8
 80039c2:	47d0      	blx	sl
 80039c4:	3001      	adds	r0, #1
 80039c6:	d0ab      	beq.n	8003920 <_printf_i+0x164>
 80039c8:	6823      	ldr	r3, [r4, #0]
 80039ca:	079b      	lsls	r3, r3, #30
 80039cc:	d413      	bmi.n	80039f6 <_printf_i+0x23a>
 80039ce:	68e0      	ldr	r0, [r4, #12]
 80039d0:	9b03      	ldr	r3, [sp, #12]
 80039d2:	4298      	cmp	r0, r3
 80039d4:	bfb8      	it	lt
 80039d6:	4618      	movlt	r0, r3
 80039d8:	e7a4      	b.n	8003924 <_printf_i+0x168>
 80039da:	2301      	movs	r3, #1
 80039dc:	4632      	mov	r2, r6
 80039de:	4649      	mov	r1, r9
 80039e0:	4640      	mov	r0, r8
 80039e2:	47d0      	blx	sl
 80039e4:	3001      	adds	r0, #1
 80039e6:	d09b      	beq.n	8003920 <_printf_i+0x164>
 80039e8:	3501      	adds	r5, #1
 80039ea:	68e3      	ldr	r3, [r4, #12]
 80039ec:	9903      	ldr	r1, [sp, #12]
 80039ee:	1a5b      	subs	r3, r3, r1
 80039f0:	42ab      	cmp	r3, r5
 80039f2:	dcf2      	bgt.n	80039da <_printf_i+0x21e>
 80039f4:	e7eb      	b.n	80039ce <_printf_i+0x212>
 80039f6:	2500      	movs	r5, #0
 80039f8:	f104 0619 	add.w	r6, r4, #25
 80039fc:	e7f5      	b.n	80039ea <_printf_i+0x22e>
 80039fe:	bf00      	nop
 8003a00:	08003d21 	.word	0x08003d21
 8003a04:	08003d32 	.word	0x08003d32

08003a08 <memcpy>:
 8003a08:	440a      	add	r2, r1
 8003a0a:	4291      	cmp	r1, r2
 8003a0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003a10:	d100      	bne.n	8003a14 <memcpy+0xc>
 8003a12:	4770      	bx	lr
 8003a14:	b510      	push	{r4, lr}
 8003a16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a1e:	4291      	cmp	r1, r2
 8003a20:	d1f9      	bne.n	8003a16 <memcpy+0xe>
 8003a22:	bd10      	pop	{r4, pc}

08003a24 <memmove>:
 8003a24:	4288      	cmp	r0, r1
 8003a26:	b510      	push	{r4, lr}
 8003a28:	eb01 0402 	add.w	r4, r1, r2
 8003a2c:	d902      	bls.n	8003a34 <memmove+0x10>
 8003a2e:	4284      	cmp	r4, r0
 8003a30:	4623      	mov	r3, r4
 8003a32:	d807      	bhi.n	8003a44 <memmove+0x20>
 8003a34:	1e43      	subs	r3, r0, #1
 8003a36:	42a1      	cmp	r1, r4
 8003a38:	d008      	beq.n	8003a4c <memmove+0x28>
 8003a3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003a3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003a42:	e7f8      	b.n	8003a36 <memmove+0x12>
 8003a44:	4402      	add	r2, r0
 8003a46:	4601      	mov	r1, r0
 8003a48:	428a      	cmp	r2, r1
 8003a4a:	d100      	bne.n	8003a4e <memmove+0x2a>
 8003a4c:	bd10      	pop	{r4, pc}
 8003a4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003a52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003a56:	e7f7      	b.n	8003a48 <memmove+0x24>

08003a58 <_free_r>:
 8003a58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003a5a:	2900      	cmp	r1, #0
 8003a5c:	d048      	beq.n	8003af0 <_free_r+0x98>
 8003a5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a62:	9001      	str	r0, [sp, #4]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f1a1 0404 	sub.w	r4, r1, #4
 8003a6a:	bfb8      	it	lt
 8003a6c:	18e4      	addlt	r4, r4, r3
 8003a6e:	f000 f8d3 	bl	8003c18 <__malloc_lock>
 8003a72:	4a20      	ldr	r2, [pc, #128]	; (8003af4 <_free_r+0x9c>)
 8003a74:	9801      	ldr	r0, [sp, #4]
 8003a76:	6813      	ldr	r3, [r2, #0]
 8003a78:	4615      	mov	r5, r2
 8003a7a:	b933      	cbnz	r3, 8003a8a <_free_r+0x32>
 8003a7c:	6063      	str	r3, [r4, #4]
 8003a7e:	6014      	str	r4, [r2, #0]
 8003a80:	b003      	add	sp, #12
 8003a82:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003a86:	f000 b8cd 	b.w	8003c24 <__malloc_unlock>
 8003a8a:	42a3      	cmp	r3, r4
 8003a8c:	d90b      	bls.n	8003aa6 <_free_r+0x4e>
 8003a8e:	6821      	ldr	r1, [r4, #0]
 8003a90:	1862      	adds	r2, r4, r1
 8003a92:	4293      	cmp	r3, r2
 8003a94:	bf04      	itt	eq
 8003a96:	681a      	ldreq	r2, [r3, #0]
 8003a98:	685b      	ldreq	r3, [r3, #4]
 8003a9a:	6063      	str	r3, [r4, #4]
 8003a9c:	bf04      	itt	eq
 8003a9e:	1852      	addeq	r2, r2, r1
 8003aa0:	6022      	streq	r2, [r4, #0]
 8003aa2:	602c      	str	r4, [r5, #0]
 8003aa4:	e7ec      	b.n	8003a80 <_free_r+0x28>
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	b10b      	cbz	r3, 8003ab0 <_free_r+0x58>
 8003aac:	42a3      	cmp	r3, r4
 8003aae:	d9fa      	bls.n	8003aa6 <_free_r+0x4e>
 8003ab0:	6811      	ldr	r1, [r2, #0]
 8003ab2:	1855      	adds	r5, r2, r1
 8003ab4:	42a5      	cmp	r5, r4
 8003ab6:	d10b      	bne.n	8003ad0 <_free_r+0x78>
 8003ab8:	6824      	ldr	r4, [r4, #0]
 8003aba:	4421      	add	r1, r4
 8003abc:	1854      	adds	r4, r2, r1
 8003abe:	42a3      	cmp	r3, r4
 8003ac0:	6011      	str	r1, [r2, #0]
 8003ac2:	d1dd      	bne.n	8003a80 <_free_r+0x28>
 8003ac4:	681c      	ldr	r4, [r3, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	6053      	str	r3, [r2, #4]
 8003aca:	4421      	add	r1, r4
 8003acc:	6011      	str	r1, [r2, #0]
 8003ace:	e7d7      	b.n	8003a80 <_free_r+0x28>
 8003ad0:	d902      	bls.n	8003ad8 <_free_r+0x80>
 8003ad2:	230c      	movs	r3, #12
 8003ad4:	6003      	str	r3, [r0, #0]
 8003ad6:	e7d3      	b.n	8003a80 <_free_r+0x28>
 8003ad8:	6825      	ldr	r5, [r4, #0]
 8003ada:	1961      	adds	r1, r4, r5
 8003adc:	428b      	cmp	r3, r1
 8003ade:	bf04      	itt	eq
 8003ae0:	6819      	ldreq	r1, [r3, #0]
 8003ae2:	685b      	ldreq	r3, [r3, #4]
 8003ae4:	6063      	str	r3, [r4, #4]
 8003ae6:	bf04      	itt	eq
 8003ae8:	1949      	addeq	r1, r1, r5
 8003aea:	6021      	streq	r1, [r4, #0]
 8003aec:	6054      	str	r4, [r2, #4]
 8003aee:	e7c7      	b.n	8003a80 <_free_r+0x28>
 8003af0:	b003      	add	sp, #12
 8003af2:	bd30      	pop	{r4, r5, pc}
 8003af4:	20000090 	.word	0x20000090

08003af8 <_malloc_r>:
 8003af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003afa:	1ccd      	adds	r5, r1, #3
 8003afc:	f025 0503 	bic.w	r5, r5, #3
 8003b00:	3508      	adds	r5, #8
 8003b02:	2d0c      	cmp	r5, #12
 8003b04:	bf38      	it	cc
 8003b06:	250c      	movcc	r5, #12
 8003b08:	2d00      	cmp	r5, #0
 8003b0a:	4606      	mov	r6, r0
 8003b0c:	db01      	blt.n	8003b12 <_malloc_r+0x1a>
 8003b0e:	42a9      	cmp	r1, r5
 8003b10:	d903      	bls.n	8003b1a <_malloc_r+0x22>
 8003b12:	230c      	movs	r3, #12
 8003b14:	6033      	str	r3, [r6, #0]
 8003b16:	2000      	movs	r0, #0
 8003b18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b1a:	f000 f87d 	bl	8003c18 <__malloc_lock>
 8003b1e:	4921      	ldr	r1, [pc, #132]	; (8003ba4 <_malloc_r+0xac>)
 8003b20:	680a      	ldr	r2, [r1, #0]
 8003b22:	4614      	mov	r4, r2
 8003b24:	b99c      	cbnz	r4, 8003b4e <_malloc_r+0x56>
 8003b26:	4f20      	ldr	r7, [pc, #128]	; (8003ba8 <_malloc_r+0xb0>)
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	b923      	cbnz	r3, 8003b36 <_malloc_r+0x3e>
 8003b2c:	4621      	mov	r1, r4
 8003b2e:	4630      	mov	r0, r6
 8003b30:	f000 f862 	bl	8003bf8 <_sbrk_r>
 8003b34:	6038      	str	r0, [r7, #0]
 8003b36:	4629      	mov	r1, r5
 8003b38:	4630      	mov	r0, r6
 8003b3a:	f000 f85d 	bl	8003bf8 <_sbrk_r>
 8003b3e:	1c43      	adds	r3, r0, #1
 8003b40:	d123      	bne.n	8003b8a <_malloc_r+0x92>
 8003b42:	230c      	movs	r3, #12
 8003b44:	6033      	str	r3, [r6, #0]
 8003b46:	4630      	mov	r0, r6
 8003b48:	f000 f86c 	bl	8003c24 <__malloc_unlock>
 8003b4c:	e7e3      	b.n	8003b16 <_malloc_r+0x1e>
 8003b4e:	6823      	ldr	r3, [r4, #0]
 8003b50:	1b5b      	subs	r3, r3, r5
 8003b52:	d417      	bmi.n	8003b84 <_malloc_r+0x8c>
 8003b54:	2b0b      	cmp	r3, #11
 8003b56:	d903      	bls.n	8003b60 <_malloc_r+0x68>
 8003b58:	6023      	str	r3, [r4, #0]
 8003b5a:	441c      	add	r4, r3
 8003b5c:	6025      	str	r5, [r4, #0]
 8003b5e:	e004      	b.n	8003b6a <_malloc_r+0x72>
 8003b60:	6863      	ldr	r3, [r4, #4]
 8003b62:	42a2      	cmp	r2, r4
 8003b64:	bf0c      	ite	eq
 8003b66:	600b      	streq	r3, [r1, #0]
 8003b68:	6053      	strne	r3, [r2, #4]
 8003b6a:	4630      	mov	r0, r6
 8003b6c:	f000 f85a 	bl	8003c24 <__malloc_unlock>
 8003b70:	f104 000b 	add.w	r0, r4, #11
 8003b74:	1d23      	adds	r3, r4, #4
 8003b76:	f020 0007 	bic.w	r0, r0, #7
 8003b7a:	1ac2      	subs	r2, r0, r3
 8003b7c:	d0cc      	beq.n	8003b18 <_malloc_r+0x20>
 8003b7e:	1a1b      	subs	r3, r3, r0
 8003b80:	50a3      	str	r3, [r4, r2]
 8003b82:	e7c9      	b.n	8003b18 <_malloc_r+0x20>
 8003b84:	4622      	mov	r2, r4
 8003b86:	6864      	ldr	r4, [r4, #4]
 8003b88:	e7cc      	b.n	8003b24 <_malloc_r+0x2c>
 8003b8a:	1cc4      	adds	r4, r0, #3
 8003b8c:	f024 0403 	bic.w	r4, r4, #3
 8003b90:	42a0      	cmp	r0, r4
 8003b92:	d0e3      	beq.n	8003b5c <_malloc_r+0x64>
 8003b94:	1a21      	subs	r1, r4, r0
 8003b96:	4630      	mov	r0, r6
 8003b98:	f000 f82e 	bl	8003bf8 <_sbrk_r>
 8003b9c:	3001      	adds	r0, #1
 8003b9e:	d1dd      	bne.n	8003b5c <_malloc_r+0x64>
 8003ba0:	e7cf      	b.n	8003b42 <_malloc_r+0x4a>
 8003ba2:	bf00      	nop
 8003ba4:	20000090 	.word	0x20000090
 8003ba8:	20000094 	.word	0x20000094

08003bac <_realloc_r>:
 8003bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bae:	4607      	mov	r7, r0
 8003bb0:	4614      	mov	r4, r2
 8003bb2:	460e      	mov	r6, r1
 8003bb4:	b921      	cbnz	r1, 8003bc0 <_realloc_r+0x14>
 8003bb6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003bba:	4611      	mov	r1, r2
 8003bbc:	f7ff bf9c 	b.w	8003af8 <_malloc_r>
 8003bc0:	b922      	cbnz	r2, 8003bcc <_realloc_r+0x20>
 8003bc2:	f7ff ff49 	bl	8003a58 <_free_r>
 8003bc6:	4625      	mov	r5, r4
 8003bc8:	4628      	mov	r0, r5
 8003bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bcc:	f000 f830 	bl	8003c30 <_malloc_usable_size_r>
 8003bd0:	42a0      	cmp	r0, r4
 8003bd2:	d20f      	bcs.n	8003bf4 <_realloc_r+0x48>
 8003bd4:	4621      	mov	r1, r4
 8003bd6:	4638      	mov	r0, r7
 8003bd8:	f7ff ff8e 	bl	8003af8 <_malloc_r>
 8003bdc:	4605      	mov	r5, r0
 8003bde:	2800      	cmp	r0, #0
 8003be0:	d0f2      	beq.n	8003bc8 <_realloc_r+0x1c>
 8003be2:	4631      	mov	r1, r6
 8003be4:	4622      	mov	r2, r4
 8003be6:	f7ff ff0f 	bl	8003a08 <memcpy>
 8003bea:	4631      	mov	r1, r6
 8003bec:	4638      	mov	r0, r7
 8003bee:	f7ff ff33 	bl	8003a58 <_free_r>
 8003bf2:	e7e9      	b.n	8003bc8 <_realloc_r+0x1c>
 8003bf4:	4635      	mov	r5, r6
 8003bf6:	e7e7      	b.n	8003bc8 <_realloc_r+0x1c>

08003bf8 <_sbrk_r>:
 8003bf8:	b538      	push	{r3, r4, r5, lr}
 8003bfa:	4d06      	ldr	r5, [pc, #24]	; (8003c14 <_sbrk_r+0x1c>)
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	4604      	mov	r4, r0
 8003c00:	4608      	mov	r0, r1
 8003c02:	602b      	str	r3, [r5, #0]
 8003c04:	f7fd f974 	bl	8000ef0 <_sbrk>
 8003c08:	1c43      	adds	r3, r0, #1
 8003c0a:	d102      	bne.n	8003c12 <_sbrk_r+0x1a>
 8003c0c:	682b      	ldr	r3, [r5, #0]
 8003c0e:	b103      	cbz	r3, 8003c12 <_sbrk_r+0x1a>
 8003c10:	6023      	str	r3, [r4, #0]
 8003c12:	bd38      	pop	{r3, r4, r5, pc}
 8003c14:	20000204 	.word	0x20000204

08003c18 <__malloc_lock>:
 8003c18:	4801      	ldr	r0, [pc, #4]	; (8003c20 <__malloc_lock+0x8>)
 8003c1a:	f000 b811 	b.w	8003c40 <__retarget_lock_acquire_recursive>
 8003c1e:	bf00      	nop
 8003c20:	2000020c 	.word	0x2000020c

08003c24 <__malloc_unlock>:
 8003c24:	4801      	ldr	r0, [pc, #4]	; (8003c2c <__malloc_unlock+0x8>)
 8003c26:	f000 b80c 	b.w	8003c42 <__retarget_lock_release_recursive>
 8003c2a:	bf00      	nop
 8003c2c:	2000020c 	.word	0x2000020c

08003c30 <_malloc_usable_size_r>:
 8003c30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c34:	1f18      	subs	r0, r3, #4
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	bfbc      	itt	lt
 8003c3a:	580b      	ldrlt	r3, [r1, r0]
 8003c3c:	18c0      	addlt	r0, r0, r3
 8003c3e:	4770      	bx	lr

08003c40 <__retarget_lock_acquire_recursive>:
 8003c40:	4770      	bx	lr

08003c42 <__retarget_lock_release_recursive>:
 8003c42:	4770      	bx	lr

08003c44 <_init>:
 8003c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c46:	bf00      	nop
 8003c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c4a:	bc08      	pop	{r3}
 8003c4c:	469e      	mov	lr, r3
 8003c4e:	4770      	bx	lr

08003c50 <_fini>:
 8003c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c52:	bf00      	nop
 8003c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c56:	bc08      	pop	{r3}
 8003c58:	469e      	mov	lr, r3
 8003c5a:	4770      	bx	lr
